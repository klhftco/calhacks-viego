{
  "openapi": "3.0.1",
  "info": {
    "title": "Visa Transaction Controls",
    "description": "",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://sandbox.api.visa.com",
      "description": "Sandbox server"
    }
  ],
  "security": [],
  "tags": [
    {
      "name": "Alert History and Customer Profiles API",
      "description": "The Alert History and Customer Profile APIs are used to manage customer profiles and their contact information for issuers who participate in the Visa Alert Delivery Service. All issuers can use this API to retrieve a history of VTC notifications. NOTE: Solutions should be designed to accept new attributes and error codes when introduced without them adversely impacting existing functionality."
    },
    {
      "name": "Authorization Decision API",
      "description": "The Authorization Decision API enables an authorization processor to request an authorization decision recommendation based on cardholder rules configured in consumer transaction controls.  In addition, the API enables the authorization processor to update an authorization decision with the actual decision that was rendered. "
    },
    {
      "name": "Customer Rules API",
      "description": "The Customer Rules API is used to enroll, configure and retrieve an account&apos;s card control settings.  NOTE: Solutions should be designed to accept new attributes and error codes when intoducecd without them adversely impacting existing functionality."
    },
    {
      "name": "Enrollment Callback API",
      "description": "The Transaction Controls Client Host Callback API will be hosted external to Visa. Card Enrollment callback will be hosted by the authorizing agent."
    },
    {
      "name": "Notification Delivery Callback API",
      "description": "The Transaction Controls  Client Host Callback API will be hosted external to Visa.  Card Enrollment callback will be hosted by the authorizing agent.  Alert notification callback will be hosted by the application service responsible for delivering notifications to the consumer."
    },
    {
      "name": "Program Administration API",
      "description": "The Transaction Controls Program Administration API enables Issuers to change program configurations for their sponsorID."
    }
  ],
  "paths": {
    "/ConsumerTransactionControls/v1/notifications": {
      "post": {
        "tags": [
          "Notification Delivery Callback API"
        ],
        "summary": "Alert Notification",
        "description": "Alert Notification",
        "operationId": "Alert Notification",
        "requestBody": {
          "description": "payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayload"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "transactionType": [
                      "TCT_ATM_WITHDRAW",
                      "TCT_CROSS_BORDER"
                    ],
                    "transactionDetails": {
                      "cardholderBillAmount": 100,
                      "userIdentifier": "abhi@hotmail.com",
                      "billerCurrencyCode": "840",
                      "requestReceivedTimeStamp": "2017-11-29 19:57:25.174",
                      "userInformation": {
                        "applicationDefinedAttributes": [
                          "Any attribute as stored on customer rules"
                        ],
                        "bankingIdentifier": "BID12341122",
                        "name": "Joe Williams"
                      },
                      "primaryAccountNumber": "xxxxxxxxxxxx1121",
                      "merchantInfo": {
                        "city": " Highlands Ranch ",
                        "countryCode": "USA",
                        "postalCode": "80122",
                        "transactionAmount": 10,
                        "merchantCategoryCode": "5411",
                        "name": "King Sooper",
                        "addressLines": [
                          " 6675 Business Center Dr "
                        ],
                        "region": "CO",
                        "currencyCode": "840"
                      },
                      "transactionID": "121343432003332"
                    },
                    "transactionOutcome": {
                      "ctcDocumentID": "ctc-ip-d484dc28-ac64-48f9-86f2-468a27e0eec7",
                      "decisionResponseTimeStamp": "2017-03-29 19:57:25.251",
                      "transactionApproved": "DECLINED",
                      "alertDetails": [
                        {
                          "triggeringAppID": "04323ae8-45aa-4553-a808-8ef54157d0b6",
                          "ruleCategory": "PCT_TRANSACTION",
                          "userIdentifier": "joe5280@hotmail.com",
                          "alertReason": "DECLINE_ALL",
                          "ruleType": "TCT_ATM_WITHDRAW",
                          "userInformation": {
                            "applicationDefinedAttributes": [
                              "Any attribute as stored on customer rules"
                            ],
                            "bankingIdentifier": "BID12341122",
                            "name": "Joe Williams"
                          },
                          "controlTargetType": "string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "payload",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1ConsumerTransactionControls~1v1~1notifications/post",
            "default": false
          }
        ],
        "x-hideSample": true
      }
    },
    "/ConsumerTransactionControls/v1/notifications/pushNotification": {
      "post": {
        "tags": [
          "Notification Delivery Callback API"
        ],
        "summary": "Push Notification",
        "description": "Push Notification",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1ConsumerTransactionControls~1v1~1notifications~1pushNotification/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    },
    "/vctc/validation/v1/decisions/{decisionID}": {
      "get": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Retrieve the details of a specific decision record",
        "description": "Retrieve the details of a specific decision record",
        "operationId": "getDecisionByDecisionIdUsingGET",
        "parameters": [
          {
            "name": "decisionID",
            "in": "path",
            "description": "The ID of the document for the document to be returned",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showControlsSnapShot",
            "in": "query",
            "description": "This flag is required to view the controls snap shot at the time of processing the decision.",
            "required": false,
            "allowEmptyValue": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfDecisionDocument-5"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 18:50:11.079",
                      "resource": {
                        "decisionResponse": {
                          "decisionResponseTimeStamp": "2022-05-25 18:50:10",
                          "declineRuleCategory": "PCT_GLOBAL",
                          "declineRuleDetail": {
                            "triggeringAppID": "fae99da2-095d-438a-bcc2-4696eed1b846",
                            "ruleCategory": "PCT_GLOBAL",
                            "userIdentifier": "4991108855939046",
                            "alertReason": "DECLINE_TRANS_LIMIT",
                            "ruleType": "NONE",
                            "controlTargetType": "CARD_LEVEL"
                          },
                          "shouldAlert": true,
                          "alertsRuleDetail": [
                            {
                              "triggeringAppID": "fae99da2-095d-438a-bcc2-4696eed1b846",
                              "ruleCategory": "PCT_GLOBAL",
                              "userIdentifier": "4991108855939046",
                              "alertReason": "DECLINE_TRANS_LIMIT",
                              "ruleType": "NONE",
                              "controlTargetType": "CARD_LEVEL"
                            }
                          ],
                          "shouldDecline": true
                        },
                        "primaryAccountNumber": "xxxx-xxxx-xxxx-9046",
                        "decisionID": "v-304-9e840f4c-1dd5-4579-b2b2-9c1e28a2a43c",
                        "decisionRequest": {
                          "pointOfServiceInfo": {
                            "securityCondition": "NO_SECURITY_CONCERN",
                            "personalIdentificationNumberEntryMode": "UNKNOWN",
                            "primaryAccountNumberEntryMode": "UNKNOWN",
                            "terminalClass": {
                              "isAttended": true,
                              "howOperated": "CUSTOMER_OPERATED",
                              "deviceLocation": "ON_PREMISE"
                            },
                            "presentationData": {
                              "isCardPresent": true,
                              "howPresented": "CUSTOMER_PRESENT"
                            },
                            "terminalEntryCapability": "UNKNOWN",
                            "terminalType": "ATM"
                          },
                          "cardholderBillAmount": 1000,
                          "messageType": "0100",
                          "billerCurrencyCode": "978",
                          "processingCode": "010000",
                          "cardDetail": {
                            "nameOnCard": "hhh",
                            "sequenceOnCard": "3"
                          },
                          "decisionType": "COMPLETE",
                          "decisionRequestTimeStamp": "2022-05-25 18:50:10",
                          "retrievalReferenceNumber": "1101000000",
                          "merchantInfo": {
                            "city": "Highlands Ranch",
                            "countryCode": "USA",
                            "postalCode": "80129",
                            "transactionAmount": 1000,
                            "merchantCategoryCode": "5942",
                            "cardAcceptorTerminalID": "3101000000",
                            "name": "COSTCO",
                            "addressLines": [
                              "ParkMeadows"
                            ],
                            "region": "CO",
                            "currencyCode": "756"
                          },
                          "dateTimeLocal": "0101000000",
                          "transactionID": "2101000000"
                        },
                        "decisionUpdate": {
                          "transactionApproved": "DECLINED",
                          "lastUpdateTimeStamp": "2022-05-25 18:50:10.645",
                          "decisionType": "COMPLETE"
                        }
                      },
                      "processingTimeinMs": 2
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1decisions~1{decisionID}/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "put": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Update the state of a specific decision record",
        "description": "Update the state of a specific decision record",
        "operationId": "updateDecisionByDecisionIDUsingPUT",
        "parameters": [
          {
            "name": "decisionID",
            "in": "path",
            "description": "The ID of the document for the document to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "decisionUpdate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionUpdateRequest"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "transactionApproved": "DECLINED",
                    "decisionType": "COMPLETE",
                    "isDeclineResultOfTransactionControl": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfDecisionUpdateModel"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-27 15:18:51.91",
                      "resource": {
                        "transactionApproved": "DECLINED",
                        "lastUpdateTimeStamp": "2017-03-27 15:18:51",
                        "decisionType": "COMPLETE",
                        "isDeclineResultOfTransactionControl": true
                      },
                      "processingTimeinMs": 147
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "decisionUpdate",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1decisions~1{decisionID}/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/validation/v1/decisions/cardinquiry": {
      "post": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Retrieve a list of decision records for a card",
        "description": "Retrieve a list of decision records for a card",
        "operationId": "getDecisionHistoryByCardUsingPOST",
        "requestBody": {
          "description": "decisionHistoryRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionHistoryRequest"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "paginationData": {
                      "pageLimit": "10",
                      "startIndex": "1"
                    },
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfDecisionHistoryResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "string",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "string",
                          "startIndex": "string",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 0,
                          "totalPages": 0,
                          "totalCount": 0
                        },
                        "decisionDocument": [
                          {
                            "paymentToken": "string",
                            "decisionResponse": {
                              "decisionResponseTimeStamp": "string",
                              "declineRuleType": "string",
                              "impulseDelayExpired": true,
                              "flexResponse": {
                                "controlType": "string",
                                "secondaryCredential": {
                                  "documentId": "string",
                                  "primaryAccountNumber": "string",
                                  "expirationDate": {
                                    "mm": "string",
                                    "yy": "string"
                                  }
                                },
                                "primaryCredential": {
                                  "documentId": "string",
                                  "primaryAccountNumber": "string",
                                  "expirationDate": {
                                    "mm": "string",
                                    "yy": "string"
                                  }
                                },
                                "ruleId": "string"
                              },
                              "declineRuleCategory": "string",
                              "declineControlTargetType": "string",
                              "responseMessage": "CARD_NOT_ENROLLED",
                              "declineRuleDetail": {
                                "triggeringAppID": "string",
                                "ruleCategory": "PCT_GLOBAL",
                                "thresholdAmount": 0,
                                "userIdentifier": "string",
                                "alertReason": " DECLINE_TRANS_LIMIT",
                                "ruleType": "TCT_ATM_WITHDRAW",
                                "userInformation": {
                                  "applicationDefinedAttributes": [
                                    "string"
                                  ],
                                  "bankingIdentifier": "string",
                                  "name": "string"
                                },
                                "controlTargetType": "string"
                              },
                              "shouldAlert": true,
                              "declineThresholdAmount": 0,
                              "alertsRuleDetail": [
                                {
                                  "triggeringAppID": "string",
                                  "ruleCategory": "PCT_GLOBAL",
                                  "thresholdAmount": 0,
                                  "userIdentifier": "string",
                                  "alertReason": "DECLINE_TRANS_LIMIT",
                                  "ruleType": "TCT_ATM_WITHDRAW",
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "string"
                                    ],
                                    "bankingIdentifier": "string",
                                    "name": "string"
                                  },
                                  "controlTargetType": "string"
                                }
                              ],
                              "shouldDecline": true
                            },
                            "transactionControlsnapshot": [
                              {
                                "globalControls": [
                                  {
                                    "shouldDeclineAll": false,
                                    "declineThreshold": 0,
                                    "isControlEnabled": true,
                                    "userIdentifier": "string",
                                    "alertThreshold": 0,
                                    "declineAllNonTokenizeTransactions": true,
                                    "userInformation": {
                                      "applicationDefinedAttributes": [
                                        "string"
                                      ],
                                      "bankingIdentifier": "string",
                                      "name": "string"
                                    },
                                    "spendLimit": {
                                      "startDateTime": "string",
                                      "declineThreshold": 0,
                                      "timeZoneID": "string",
                                      "alertThreshold": 0,
                                      "type": "LMT_MONTH",
                                      "endDateTime": "string",
                                      "currentPeriodSpend": 0,
                                      "recurringCycleTime": 0
                                    },
                                    "transactionLimit": {
                                      "currentTransactionCount": 4,
                                      "maxTransactionCount": 6
                                    },
                                    "filterByCountry": {
                                      "controlDisabledCountryList": [
                                        "string"
                                      ],
                                      "controlEnabledCountryList": [
                                        "string"
                                      ]
                                    },
                                    "shouldAlertOnDecline": true,
                                    "timeRange": {
                                      "timeZoneID": "string",
                                      "startTime": "string",
                                      "endTime": "string"
                                    }
                                  }
                                ],
                                "shouldDecouple": true,
                                "lastUpdateTimeStamp": "string",
                                "documentID": "string",
                                "createdOnDate": "string"
                              }
                            ],
                            "primaryAccountNumber": "string",
                            "decisionID": "string",
                            "decisionRequest": {
                              "serviceType": [
                                "CTC"
                              ],
                              "pointOfServiceInfo": {
                                "securityCondition": "NO_SECURITY_CONCERN",
                                "personalIdentificationNumberEntryMode": "UNKNOWN",
                                "primaryAccountNumberEntryMode": "UNKNOWN",
                                "terminalClass": {
                                  "isAttended": true,
                                  "howOperated": "CUSTOMER_OPERATED",
                                  "deviceLocation": "ON_PREMISE"
                                },
                                "presentationData": {
                                  "isCardPresent": true,
                                  "howPresented": "CUSTOMER_PRESENT"
                                },
                                "terminalEntryCapability": "UNKNOWN",
                                "terminalType": "POS_TERMINAL"
                              },
                              "transactionTypes": [
                                "TCT_OCT"
                              ],
                              "processingCode": "string",
                              "decisionRequestTimeStampInMs": "string",
                              "retrievalReferenceNumber": "string",
                              "fxInfo": {
                                "crossCurrencyIndicator": true,
                                "visaExchangeRate": 0
                              },
                              "merchantInfo": {
                                "city": "string",
                                "countryCode": "string",
                                "postalCode": "string",
                                "transactionAmount": 0,
                                "merchantCategoryCode": "string",
                                "cardAcceptorTerminalID": "string",
                                "name": "string",
                                "addressLines": [
                                  "string"
                                ],
                                "region": "string",
                                "currencyCode": "string"
                              },
                              "transactionID": "string",
                              "cardholderBillAmount": 0,
                              "messageType": "0100",
                              "billerCurrencyCode": "string",
                              "cardDetail": {
                                "nameOnCard": "string",
                                "sequenceOnCard": "string"
                              },
                              "decisionType": "RECOMMENDED",
                              "decisionRequestTimeStamp": "string",
                              "dateTimeLocal": "string",
                              "wasProcessorDeclined": true
                            },
                            "decisionUpdate": {
                              "transactionApproved": "DECLINED",
                              "cardholderBillAmount": 0,
                              "declineResponseCode": "string",
                              "billerCurrencyCode": "string",
                              "lastUpdateTimeStamp": "string",
                              "transactionAmount": 0,
                              "decisionType": "COMPLETE",
                              "isDeclineResultOfTransactionControl": true
                            }
                          }
                        ],
                        "status": "AVAILABLE_RECORDS"
                      },
                      "processingTimeinMs": 0
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "decisionHistoryRequest",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1decisions~1cardinquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/validation/v1/decisions/history": {
      "get": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Retrieve a list of decision records for a sponsor",
        "description": "Retrieve a list of decision records for a sponsor",
        "operationId": "getDecisionHistoryBySponsorUsingGET",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Page size to be returned",
            "required": true,
            "allowEmptyValue": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "required": true,
            "allowEmptyValue": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfDecisionHistoryResponse-2"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "string",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "string",
                          "startIndex": "string",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 0,
                          "totalPages": 0,
                          "totalCount": 0
                        },
                        "decisionDocument": [
                          {
                            "paymentToken": "string",
                            "decisionResponse": {
                              "decisionResponseTimeStamp": "string",
                              "declineRuleType": "string",
                              "impulseDelayExpired": true,
                              "flexResponse": {
                                "controlType": "string",
                                "secondaryCredential": {
                                  "documentId": "string",
                                  "primaryAccountNumber": "string",
                                  "expirationDate": {
                                    "mm": "string",
                                    "yy": "string"
                                  }
                                },
                                "primaryCredential": {
                                  "documentId": "string",
                                  "primaryAccountNumber": "string",
                                  "expirationDate": {
                                    "mm": "string",
                                    "yy": "string"
                                  }
                                },
                                "ruleId": "string"
                              },
                              "declineRuleCategory": "string",
                              "declineControlTargetType": "string",
                              "responseMessage": "CARD_NOT_ENROLLED",
                              "declineRuleDetail": {
                                "triggeringAppID": "string",
                                "ruleCategory": "PCT_GLOBAL",
                                "thresholdAmount": 0,
                                "userIdentifier": "string",
                                "alertReason": " DECLINE_TRANS_LIMIT ",
                                "ruleType": "TCT_ATM_WITHDRAW",
                                "userInformation": {
                                  "applicationDefinedAttributes": [
                                    "string"
                                  ],
                                  "bankingIdentifier": "string",
                                  "name": "string"
                                },
                                "controlTargetType": "string"
                              },
                              "shouldAlert": true,
                              "declineThresholdAmount": 0,
                              "alertsRuleDetail": [
                                {
                                  "triggeringAppID": "string",
                                  "ruleCategory": "PCT_GLOBAL",
                                  "thresholdAmount": 0,
                                  "userIdentifier": "string",
                                  "alertReason": "DECLINE_TRANS_LIMIT",
                                  "ruleType": "TCT_ATM_WITHDRAW",
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "string"
                                    ],
                                    "bankingIdentifier": "string",
                                    "name": "string"
                                  },
                                  "controlTargetType": "string"
                                }
                              ],
                              "shouldDecline": true
                            },
                            "transactionControlsnapshot": [
                              {
                                "globalControls": [
                                  {
                                    "shouldDeclineAll": false,
                                    "declineThreshold": 0,
                                    "isControlEnabled": true,
                                    "userIdentifier": "string",
                                    "alertThreshold": 0,
                                    "declineAllNonTokenizeTransactions": true,
                                    "userInformation": {
                                      "applicationDefinedAttributes": [
                                        "string"
                                      ],
                                      "bankingIdentifier": "string",
                                      "name": "string"
                                    },
                                    "spendLimit": {
                                      "startDateTime": "string",
                                      "declineThreshold": 0,
                                      "timeZoneID": "string",
                                      "alertThreshold": 0,
                                      "type": "LMT_MONTH",
                                      "endDateTime": "string",
                                      "currentPeriodSpend": 0,
                                      "recurringCycleTime": 0
                                    },
                                    "transactionLimit": {
                                      "currentTransactionCount": 4,
                                      "maxTransactionCount": 6
                                    },
                                    "filterByCountry": {
                                      "controlDisabledCountryList": [
                                        "string"
                                      ],
                                      "controlEnabledCountryList": [
                                        "string"
                                      ]
                                    },
                                    "shouldAlertOnDecline": true,
                                    "timeRange": {
                                      "timeZoneID": "string",
                                      "startTime": "string",
                                      "endTime": "string"
                                    }
                                  }
                                ],
                                "shouldDecouple": true,
                                "lastUpdateTimeStamp": "string",
                                "documentID": "string",
                                "createdOnDate": "string"
                              }
                            ],
                            "primaryAccountNumber": "string",
                            "decisionID": "string",
                            "decisionRequest": {
                              "serviceType": [
                                "CTC"
                              ],
                              "pointOfServiceInfo": {
                                "securityCondition": "NO_SECURITY_CONCERN",
                                "personalIdentificationNumberEntryMode": "UNKNOWN",
                                "primaryAccountNumberEntryMode": "UNKNOWN",
                                "terminalClass": {
                                  "isAttended": true,
                                  "howOperated": "CUSTOMER_OPERATED",
                                  "deviceLocation": "ON_PREMISE"
                                },
                                "presentationData": {
                                  "isCardPresent": true,
                                  "howPresented": "CUSTOMER_PRESENT"
                                },
                                "terminalEntryCapability": "UNKNOWN",
                                "terminalType": "POS_TERMINAL"
                              },
                              "transactionTypes": [
                                "TCT_OCT"
                              ],
                              "processingCode": "string",
                              "decisionRequestTimeStampInMs": "string",
                              "retrievalReferenceNumber": "string",
                              "fxInfo": {
                                "crossCurrencyIndicator": true,
                                "visaExchangeRate": 0
                              },
                              "merchantInfo": {
                                "city": "string",
                                "countryCode": "string",
                                "postalCode": "string",
                                "transactionAmount": 0,
                                "merchantCategoryCode": "string",
                                "cardAcceptorTerminalID": "string",
                                "name": "string",
                                "addressLines": [
                                  "string"
                                ],
                                "region": "string",
                                "currencyCode": "string"
                              },
                              "transactionID": "string",
                              "cardholderBillAmount": 0,
                              "messageType": "0100",
                              "billerCurrencyCode": "string",
                              "cardDetail": {
                                "nameOnCard": "string",
                                "sequenceOnCard": "string"
                              },
                              "decisionType": "RECOMMENDED",
                              "decisionRequestTimeStamp": "string",
                              "dateTimeLocal": "string",
                              "wasProcessorDeclined": true
                            },
                            "decisionUpdate": {
                              "transactionApproved": "APPROVED",
                              "cardholderBillAmount": 0,
                              "declineResponseCode": "string",
                              "billerCurrencyCode": "string",
                              "lastUpdateTimeStamp": "string",
                              "transactionAmount": 0,
                              "decisionType": "COMPLETE",
                              "isDeclineResultOfTransactionControl": true
                            }
                          }
                        ],
                        "status": "AVAILABLE_RECORDS"
                      },
                      "processingTimeinMs": 0
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1decisions~1history/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/validation/v1/preevaluations": {
      "post": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Request a Pre-Evaluation recommendation on a transaction before it is run",
        "description": "Request a Pre-Evaluation recommendation on a transaction before it is run",
        "operationId": "createPreEvaluationDecisionDocumentUsingPOST",
        "requestBody": {
          "description": "preEvaluationRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreEvalDecisionRequest-3"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "pointOfServiceInfo": {
                      "securityCondition": "IDENTIFICATION_VERIFIED",
                      "terminalClass": {
                        "isAttended": false,
                        "howOperated": "CUSTOMER_OPERATED",
                        "deviceLocation": "ON_PREMISE"
                      },
                      "presentationData": {
                        "isCardPresent": true,
                        "howPresented": "CUSTOMER_PRESENT"
                      },
                      "terminalEntryCapability": "MAG_STRIPE_READ",
                      "terminalType": "POS_TERMINAL"
                    },
                    "cardholderBillAmount": 100,
                    "messageType": "0100",
                    "processingCode": "000000",
                    "decisionType": "PREEVAL",
                    "primaryAccountNumber": "4514170000000001",
                    "retrievalReferenceNumber": "000000000002",
                    "merchantInfo": {
                      "city": "Highlands Ranch",
                      "countryCode": "USA",
                      "postalCode": "80130",
                      "merchantCategoryCode": "5310",
                      "name": "POS at ",
                      "addressLines": [
                        "6675 Business Center Dr"
                      ],
                      "region": "CO",
                      "currencyCode": "840"
                    },
                    "dateTimeLocal": "0322080000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfDecisionResponseType"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-05-04 07:56:19.978",
                      "resource": {
                        "decisionResponse": {
                          "decisionResponseTimeStamp": "2017-05-04 07:56:20",
                          "declineRuleType": "TCT_BRICK_AND_MORTAR",
                          "declineRuleCategory": "PCT_TRANSACTION",
                          "declineThresholdAmount": 100,
                          "shouldDecline": true
                        },
                        "decisionID": "ctc-vd-c2c7c572-d3a9-4b09-9dac-f668aed688b5"
                      },
                      "processingTimeinMs": 61
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "preEvaluationRequest",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1preevaluations/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/validation/v1/consumertransactioncontrols/decisioninquiry": {
      "post": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Retrieve a list of decision records by reterivalReferenceNumber",
        "description": "Retrieve a list of decision records by reterivalReferenceNumber",
        "operationId": "getDecisionDocumentByRefNumberUsingPOST",
        "requestBody": {
          "description": "decisionRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionRequestType"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "cardAcceptorTerminalID": "string",
                    "retrievalReferenceNumber": "000000000002",
                    "dateTimeLocal": "0322080000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfGetDecisionDocument-4"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "string",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "string",
                          "startIndex": "string",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 0,
                          "totalPages": 0,
                          "totalCount": 0
                        },
                        "decisionDocument": [
                          {
                            "paymentToken": "string",
                            "decisionResponse": {
                              "decisionResponseTimeStamp": "string",
                              "declineRuleType": "string",
                              "impulseDelayExpired": true,
                              "flexResponse": {
                                "controlType": "string",
                                "secondaryCredential": {
                                  "documentId": "string",
                                  "primaryAccountNumber": "string",
                                  "expirationDate": {
                                    "mm": "string",
                                    "yy": "string"
                                  }
                                },
                                "primaryCredential": {
                                  "documentId": "string",
                                  "primaryAccountNumber": "string",
                                  "expirationDate": {
                                    "mm": "string",
                                    "yy": "string"
                                  }
                                },
                                "ruleId": "string"
                              },
                              "declineRuleCategory": "string",
                              "declineControlTargetType": "string",
                              "responseMessage": "CARD_NOT_ENROLLED",
                              "declineRuleDetail": {
                                "triggeringAppID": "string",
                                "ruleCategory": "PCT_GLOBAL",
                                "thresholdAmount": 0,
                                "userIdentifier": "string",
                                "alertReason": " DECLINE_TRANS_LIMIT",
                                "ruleType": "TCT_ATM_WITHDRAW",
                                "userInformation": {
                                  "applicationDefinedAttributes": [
                                    "string"
                                  ],
                                  "bankingIdentifier": "string",
                                  "name": "string"
                                },
                                "controlTargetType": "string"
                              },
                              "shouldAlert": true,
                              "declineThresholdAmount": 0,
                              "alertsRuleDetail": [
                                {
                                  "triggeringAppID": "string",
                                  "ruleCategory": "PCT_GLOBAL",
                                  "thresholdAmount": 0,
                                  "userIdentifier": "string",
                                  "alertReason": "DECLINE_TRANS_LIMIT",
                                  "ruleType": "TCT_ATM_WITHDRAW",
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "string"
                                    ],
                                    "bankingIdentifier": "string",
                                    "name": "string"
                                  },
                                  "controlTargetType": "string"
                                }
                              ],
                              "shouldDecline": true
                            },
                            "transactionControlsnapshot": [
                              {
                                "globalControls": [
                                  {
                                    "shouldDeclineAll": false,
                                    "declineThreshold": 0,
                                    "isControlEnabled": true,
                                    "userIdentifier": "string",
                                    "alertThreshold": 0,
                                    "declineAllNonTokenizeTransactions": true,
                                    "userInformation": {
                                      "applicationDefinedAttributes": [
                                        "string"
                                      ],
                                      "bankingIdentifier": "string",
                                      "name": "string"
                                    },
                                    "spendLimit": {
                                      "startDateTime": "string",
                                      "declineThreshold": 0,
                                      "timeZoneID": "string",
                                      "alertThreshold": 0,
                                      "type": "LMT_MONTH",
                                      "endDateTime": "string",
                                      "currentPeriodSpend": 0,
                                      "recurringCycleTime": 0
                                    },
                                    "transactionLimit": {
                                      "currentTransactionCount": 4,
                                      "maxTransactionCount": 6
                                    },
                                    "filterByCountry": {
                                      "controlDisabledCountryList": [
                                        "string"
                                      ],
                                      "controlEnabledCountryList": [
                                        "string"
                                      ]
                                    },
                                    "shouldAlertOnDecline": true,
                                    "timeRange": {
                                      "timeZoneID": "string",
                                      "startTime": "string",
                                      "endTime": "string"
                                    }
                                  }
                                ],
                                "shouldDecouple": true,
                                "lastUpdateTimeStamp": "string",
                                "documentID": "string",
                                "createdOnDate": "string"
                              }
                            ],
                            "primaryAccountNumber": "string",
                            "decisionID": "string",
                            "decisionRequest": {
                              "serviceType": [
                                "CTC"
                              ],
                              "pointOfServiceInfo": {
                                "securityCondition": "NO_SECURITY_CONCERN",
                                "personalIdentificationNumberEntryMode": "UNKNOWN",
                                "primaryAccountNumberEntryMode": "UNKNOWN",
                                "terminalClass": {
                                  "isAttended": true,
                                  "howOperated": "CUSTOMER_OPERATED",
                                  "deviceLocation": "ON_PREMISE"
                                },
                                "presentationData": {
                                  "isCardPresent": true,
                                  "howPresented": "CUSTOMER_PRESENT"
                                },
                                "terminalEntryCapability": "UNKNOWN",
                                "terminalType": "POS_TERMINAL"
                              },
                              "transactionTypes": [
                                "TCT_OCT"
                              ],
                              "processingCode": "string",
                              "decisionRequestTimeStampInMs": "string",
                              "retrievalReferenceNumber": "string",
                              "fxInfo": {
                                "crossCurrencyIndicator": true,
                                "visaExchangeRate": 0
                              },
                              "merchantInfo": {
                                "city": "string",
                                "countryCode": "string",
                                "postalCode": "string",
                                "transactionAmount": 0,
                                "merchantCategoryCode": "string",
                                "cardAcceptorTerminalID": "string",
                                "name": "string",
                                "addressLines": [
                                  "string"
                                ],
                                "region": "string",
                                "currencyCode": "string"
                              },
                              "transactionID": "string",
                              "cardholderBillAmount": 0,
                              "messageType": "0100",
                              "billerCurrencyCode": "string",
                              "cardDetail": {
                                "nameOnCard": "string",
                                "sequenceOnCard": "string"
                              },
                              "decisionType": "RECOMMENDED",
                              "decisionRequestTimeStamp": "string",
                              "dateTimeLocal": "string",
                              "wasProcessorDeclined": true
                            },
                            "decisionUpdate": {
                              "transactionApproved": "DECLINED",
                              "cardholderBillAmount": 0,
                              "declineResponseCode": "string",
                              "billerCurrencyCode": "string",
                              "lastUpdateTimeStamp": "string",
                              "transactionAmount": 0,
                              "decisionType": "COMPLETE",
                              "isDeclineResultOfTransactionControl": true
                            }
                          }
                        ],
                        "status": "AVAILABLE_RECORDS"
                      },
                      "processingTimeinMs": 0
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "decisionRequest",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1consumertransactioncontrols~1decisioninquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/validation/v1/decisions": {
      "post": {
        "tags": [
          "Authorization Decision API"
        ],
        "summary": "Request a decision on pending transaction or send notification or advice for completed transaction",
        "description": "Request a decision on pending transaction or send notification/advice for completed transaction",
        "operationId": "createDecisionTransactionUsingPOST",
        "requestBody": {
          "description": "decisionRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "pointOfServiceInfo": {
                      "securityCondition": "IDENTIFICATION_VERIFIED",
                      "terminalClass": {
                        "isAttended": false,
                        "howOperated": "CUSTOMER_OPERATED",
                        "deviceLocation": "ON_PREMISE"
                      },
                      "presentationData": {
                        "isCardPresent": true,
                        "howPresented": "CUSTOMER_PRESENT"
                      },
                      "terminalEntryCapability": "MAG_STRIPE_READ",
                      "terminalType": "POS_TERMINAL"
                    },
                    "cardholderBillAmount": 100,
                    "messageType": "0100",
                    "processingCode": "000000",
                    "decisionType": "RECOMMENDED",
                    "primaryAccountNumber": "4514170000000001",
                    "retrievalReferenceNumber": "000000000002",
                    "merchantInfo": {
                      "city": "Highlands Ranch",
                      "countryCode": "USA",
                      "postalCode": "80130",
                      "transactionAmount": 10,
                      "merchantCategoryCode": "5310",
                      "name": "POS at ",
                      "addressLines": [
                        "6675 Business Center Dr"
                      ],
                      "region": "CO",
                      "currencyCode": "840"
                    },
                    "dateTimeLocal": "0322080000",
                    "transactionID": "2132133231"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceOfDecisionResponseType"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-27 14:55:54.314",
                      "resource": {
                        "decisionResponse": {
                          "decisionResponseTimeStamp": "2017-03-27 14:55:54",
                          "declineRuleType": "TCT_BRICK_AND_MORTAR",
                          "declineRuleCategory": "PCT_TRANSACTION",
                          "declineThresholdAmount": 100,
                          "shouldDecline": true
                        },
                        "decisionID": "ctc-vd-0990b370-ec42-4ff6-9881-0406860dd50b"
                      },
                      "processingTimeinMs": 619
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "decisionRequest",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1validation~1v1~1decisions/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/customer/notificationInquiry": {
      "post": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Account Notifications Inquiry",
        "description": "Retrieves a summary of notifications based on either the primaryAccountNumber or paymentToken depending on which value is in the request.",
        "operationId": "getCustomerNotificationsByAccount",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationInquiryRequestPayload-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "includeContactDetails": true,
                    "pagination": {
                      "pageLimit": "10",
                      "startIndex": "1"
                    },
                    "includeAlertDetails": true,
                    "includeMerchantDetails": true,
                    "primaryAccountNumber": "4111748398761237"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceNotificationDetails-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 18:46:00.407",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "10",
                          "startIndex": "1",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 1,
                          "totalPages": 1,
                          "totalCount": 1
                        },
                        "notificationDetails": [
                          {
                            "notificationDetailId": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd",
                            "outBoundAlertsNotificationPayload": {
                              "transactionDetails": {
                                "cardholderBillAmount": 1000,
                                "nameOnCard": "hhh",
                                "userIdentifier": "4991104699359772",
                                "billerCurrencyCode": "840",
                                "requestReceivedTimeStamp": "2022-05-25 18:45:55",
                                "userInformation": {
                                  "applicationDefinedAttributes": [
                                    "APP"
                                  ],
                                  "bankingIdentifier": "BI",
                                  "name": "BOA"
                                },
                                "primaryAccountNumber": "xxxx-xxxx-xxxx-9772",
                                "retrievalReferenceNumber": "1101000000",
                                "merchantInfo": {
                                  "city": "Highlands Ranch",
                                  "countryCode": "USA",
                                  "postalCode": "80129",
                                  "transactionAmount": 1000,
                                  "merchantCategoryCode": "5942",
                                  "cardAcceptorTerminalID": "3101000000",
                                  "name": "COSTCO",
                                  "addressLines": [
                                    "ParkMeadows"
                                  ],
                                  "region": "CO",
                                  "currencyCode": "756"
                                },
                                "transactionID": "2101000000"
                              },
                              "transactionTypes": [
                                "TCT_ATM_WITHDRAW"
                              ],
                              "transactionOutcome": {
                                "decisionResponseTimeStamp": "2022-05-25 18:45:55",
                                "transactionApproved": "DECLINED",
                                "documentID": "ctc-vd-abddb5cf-d297-4e8d-beb6-380a22e3043b",
                                "notificationID": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd",
                                "decisionID": "v-304-f1f11166-f3b3-4465-b995-61edb244c178",
                                "alertDetails": [
                                  {
                                    "triggeringAppID": "fae99da2-095d-438a-bcc2-4696eed1b846",
                                    "ruleCategory": "PCT_GLOBAL",
                                    "userIdentifier": "4991104699359772",
                                    "alertReason": "DECLINE_TRANS_LIMIT",
                                    "ruleType": "NONE",
                                    "userInformation": {
                                      "applicationDefinedAttributes": [
                                        "APP"
                                      ],
                                      "bankingIdentifier": "BI",
                                      "name": "BOA"
                                    },
                                    "controlTargetType": "CARD_LEVEL"
                                  }
                                ]
                              }
                            },
                            "outboundCallDetails": {
                              "httpVerb": "POST",
                              "httpResponseCode": 200,
                              "status": "SUCCESS"
                            }
                          }
                        ]
                      },
                      "processingTimeinMs": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1notificationInquiry/post",
            "default": false
          },
          {
            "label": "v3 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v3~1consumertransactioncontrols~1customer~1notificationInquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}": {
      "get": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Retrieve an Existing Customer Profile by the userIdentifier",
        "description": "Retrieves an existing customer profile by the user identifier",
        "operationId": "getCustomerProfile",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "Uniquely identifies the cardholder who is to receive the alert message. The userIdentifier should be a GUID but at a minimum it must be unique per enrolling application and must not contain any PII data. It is mandatory for all VTC notifications. The maximum number of characters allowed is 72.",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-2"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-08-16 11:39:43.945",
                      "resource": {
                        "customerDetails": {
                          "lastName": "Mishra",
                          "firstName": "Suresh",
                          "isProfileActive": true,
                          "preferredLanguage": "en-us",
                          "preferredCountryCode": "USA",
                          "defaultAlertsPreferences": [
                            {
                              "isVerified": true,
                              "contactValue": "suresh@gmail.com",
                              "contactType": "Email",
                              "status": "Active"
                            },
                            {
                              "isVerified": true,
                              "contactValue": "9820777197",
                              "contactType": "SMS",
                              "status": "Active"
                            },
                            {
                              "isVerified": false,
                              "contactValue": "45346tc3t34ogred435m",
                              "contactType": "Push",
                              "status": "Active"
                            }
                          ]
                        }
                      },
                      "processingTimeinMs": 267
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "patch": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Update an Existing Customer Profile by the userIdentifier",
        "description": "Updates an existing customer profile by the userIdentifier",
        "operationId": "updateCustomerProfile",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerProfilePatchRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "lastName": "Sandford III",
                    "firstName": "John",
                    "isProfileActive": true,
                    "preferredLanguage": "es-us",
                    "countryCode": "MX",
                    "defaultAlertsPreferences": [
                      {
                        "callingCode": "52",
                        "contactValue": "5555640037",
                        "contactType": "SMS",
                        "status": "Active"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}/patch",
            "default": false
          }
        ]
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/alerts/preferences": {
      "put": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Replaces one or more Existing Alert Preferences on an Enrolled Account (DEPRECATED)",
        "description": "Replaces existing alert preferences on the enrolled account",
        "operationId": "updateCustomerNotificationPreferences",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPreferencesRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "alertPreferences": [
                      {
                        "alertType": "DECLINE_BY_SPEND_LIMIT",
                        "controlType": "MCT_ALCOHOL",
                        "contacts": [
                          {
                            "contactValue": "jsandford3@visavtc.com",
                            "contactType": "Email",
                            "preferredEmailFormat": "Plain",
                            "status": "Active"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 04:56:12.551",
                      "resource": {
                        "lastName": "John",
                        "firstName": "Ric",
                        "isProfileActive": false,
                        "preferredLanguage": "en-us",
                        "userIdentifier": "8g2XUnKmMS",
                        "lastUpdateTimeStamp": "2017-08-16 11:59:05",
                        "preferredCountryCode": "USA",
                        "defaultAlertsPreferences": [
                          {
                            "isVerified": true,
                            "contactValue": "ric@abc.com",
                            "contactType": "Email",
                            "status": "Active"
                          },
                          {
                            "isVerified": true,
                            "contactValue": "9820777197",
                            "contactType": "SMS",
                            "status": "Active"
                          },
                          {
                            "isVerified": false,
                            "contactValue": "45346tc3t34ogred435m",
                            "contactType": "Push",
                            "status": "Active"
                          }
                        ],
                        "alertPreferences": [
                          {
                            "alertType": "DECLINE_ALL",
                            "controlType": "MCT_CAR_RENTAL",
                            "contacts": [
                              {
                                "isVerified": true,
                                "contactValue": "suresh@yahoo.co.in",
                                "contactType": "Email",
                                "status": "Active"
                              }
                            ]
                          }
                        ]
                      },
                      "processingTimeinMs": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}~1alerts~1preferences/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Add one or more Tailored Alert Preferences to an Enrolled Account (DEPRECATED)",
        "description": "Adds one or more alert preferences to the enrolled account",
        "operationId": "createNotificationPreferences",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPreferencesRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "portfolioID": "003",
                    "alertPreferences": [
                      {
                        "alertType": "DECLINE_ALL",
                        "controlType": "MCT_GAMBLING",
                        "contacts": [
                          {
                            "callingCode": "1",
                            "contactValue": "2024581233",
                            "contactType": "SMS",
                            "status": "Active"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 04:56:12.551",
                      "resource": {
                        "lastName": "John",
                        "firstName": "Ric",
                        "isProfileActive": false,
                        "preferredLanguage": "en-us",
                        "userIdentifier": "8g2XUnKmMS",
                        "lastUpdateTimeStamp": "2017-08-16 11:59:05",
                        "preferredCountryCode": "USA",
                        "defaultAlertsPreferences": [
                          {
                            "isVerified": true,
                            "contactValue": "ric@abc.com",
                            "contactType": "Email",
                            "status": "Active"
                          },
                          {
                            "isVerified": true,
                            "contactValue": "9820777197",
                            "contactType": "SMS",
                            "status": "Active"
                          },
                          {
                            "isVerified": false,
                            "contactValue": "45346tc3t34ogred435m",
                            "contactType": "Push",
                            "status": "Active"
                          }
                        ],
                        "alertPreferences": [
                          {
                            "alertType": "DECLINE_ALL",
                            "controlType": "TCT_ATM_WITHDRAW",
                            "contacts": [
                              {
                                "isVerified": true,
                                "contactValue": "suresh@yahoo.co.in",
                                "contactType": "Email",
                                "status": "Active"
                              }
                            ]
                          }
                        ]
                      },
                      "processingTimeinMs": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}~1alerts~1preferences/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Removes one or more Existing Alert Preferences from an Enrolled Account (DEPRECATED)",
        "description": "Removes one or more alert preferences from the enrolled account",
        "operationId": "deleteCustomerNotificationPreferences",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPreferencesRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "alertPreferences": [
                      {
                        "alertType": "DECLINE_BY_SPEND_LIMIT",
                        "controlType": "MCT_ALCOHOL",
                        "contacts": [
                          {
                            "contactValue": "jsandford3@visavtc.com",
                            "contactType": "Email"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 04:56:12.551",
                      "resource": {
                        "lastName": "John",
                        "firstName": "Ric",
                        "isProfileActive": false,
                        "preferredLanguage": "en-us",
                        "userIdentifier": "8g2XUnKmMS",
                        "lastUpdateTimeStamp": "2017-08-16 11:59:05",
                        "preferredCountryCode": "USA",
                        "defaultAlertsPreferences": [
                          {
                            "isVerified": true,
                            "contactValue": "ric@abc.com",
                            "contactType": "Email",
                            "status": "Active"
                          },
                          {
                            "isVerified": true,
                            "contactValue": "9820777197",
                            "contactType": "SMS",
                            "status": "Active"
                          },
                          {
                            "isVerified": false,
                            "contactValue": "45346tc3t34ogred435m",
                            "contactType": "Push",
                            "status": "Active"
                          }
                        ]
                      },
                      "processingTimeinMs": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}~1alerts~1preferences/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/customer/{userIdentifier}/{documentId}/alerts/preferences": {
      "put": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Replaces one or more Existing Alert Preferences on an Enrolled Account",
        "description": "Replaces existing alert preferences on an enrolled account",
        "operationId": "updateCustomerNotificationPreferencesV2",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPreferencesRequestV2-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "alertPreferences": [
                      {
                        "alertType": "DECLINE_BY_SPEND_LIMIT",
                        "controlType": "MCT_ALCOHOL",
                        "contacts": [
                          {
                            "contactValue": "jsandford3@visavtc.com",
                            "contactType": "Email",
                            "preferredEmailFormat": "Plain",
                            "status": "Active"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2020-04-01 21:38:24.004",
                      "resource": {
                        "lastName": "eric",
                        "firstName": "john",
                        "isProfileActive": true,
                        "preferredLanguage": "en-us",
                        "cards": [
                          {
                            "portfolioID": "005",
                            "documentID": "ctc-vd-8f76cee1-5a87-4cb2-aa4e-9ee76c6a0ade",
                            "primaryAccountNumber": "xxxx-xxxx-xxxx-3008",
                            "alertsPreferences": [
                              {
                                "alertType": "DECLINE_BY_SPEND_LIMIT",
                                "controlType": "MCT_ALCOHOL",
                                "contacts": [
                                  {
                                    "isVerified": true,
                                    "contactValue": "jsandford3@visavtc.com",
                                    "contactType": "Email",
                                    "preferredEmailFormat": "Plain",
                                    "status": "Active"
                                  }
                                ]
                              }
                            ]
                          }
                        ],
                        "userIdentifier": "jjohn123",
                        "lastUpdateTimeStamp": "2020-04-01 21:38:28",
                        "preferredCountryCode": "USA",
                        "defaultAlertsPreferences": [
                          {
                            "callingCode": "1",
                            "isVerified": true,
                            "contactValue": "9704122005",
                            "contactType": "SMS",
                            "status": "Active"
                          }
                        ]
                      },
                      "processingTimeinMs": 5020
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}~1{documentId}~1alerts~1preferences/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Add one or more Tailored Alert Preferences to an Enrolled Account",
        "description": "Add one or more tailored alert preferences to an enrolled account.",
        "operationId": "createNotificationPreferencesV2",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPreferencesRequestV2-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "portfolioID": "003",
                    "alertPreferences": [
                      {
                        "alertType": "DECLINE_ALL",
                        "controlType": "MCT_GAMBLING",
                        "contacts": [
                          {
                            "callingCode": "1",
                            "contactValue": "2024581233",
                            "contactType": "SMS",
                            "status": "Active"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2020-04-01 21:34:31.105",
                      "resource": {
                        "lastName": "eric",
                        "firstName": "john",
                        "isProfileActive": true,
                        "preferredLanguage": "en-us",
                        "cards": [
                          {
                            "portfolioID": "005",
                            "documentID": "ctc-vd-8f76cee1-5a87-4cb2-aa4e-9ee76c6a0ade",
                            "primaryAccountNumber": "xxxx-xxxx-xxxx-3008",
                            "alertsPreferences": [
                              {
                                "alertType": "DECLINE_ALL",
                                "controlType": "MCT_GAMBLING",
                                "contacts": [
                                  {
                                    "callingCode": "1",
                                    "isVerified": true,
                                    "contactValue": "2024581233",
                                    "contactType": "SMS",
                                    "status": "Active"
                                  }
                                ]
                              }
                            ]
                          }
                        ],
                        "userIdentifier": "jjohn123",
                        "lastUpdateTimeStamp": "2020-04-01 21:34:32",
                        "preferredCountryCode": "USA",
                        "defaultAlertsPreferences": [
                          {
                            "callingCode": "1",
                            "isVerified": true,
                            "contactValue": "9704122005",
                            "contactType": "SMS",
                            "status": "Active"
                          }
                        ]
                      },
                      "processingTimeinMs": 1050
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}~1{documentId}~1alerts~1preferences/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Removes one or more Existing Alert Preferences from an Enrolled Account",
        "description": "Removes one or more alert preferences from an enrolled account",
        "operationId": "deleteCustomerNotificationPreferencesV2",
        "parameters": [
          {
            "name": "userIdentifier",
            "in": "path",
            "description": "The user identifier of the customer profile document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertPreferencesRequestV2-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "alertPreferences": [
                      {
                        "alertType": "DECLINE_BY_SPEND_LIMIT",
                        "controlType": "MCT_ALCOHOL",
                        "contacts": [
                          {
                            "contactValue": "jsandford3@visavtc.com",
                            "contactType": "Email"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2020-04-01 21:41:24.758",
                      "resource": {
                        "lastName": "eric",
                        "firstName": "john",
                        "isProfileActive": true,
                        "preferredLanguage": "en-us",
                        "cards": [
                          {
                            "portfolioID": "005",
                            "documentID": "ctc-vd-8f76cee1-5a87-4cb2-aa4e-9ee76c6a0ade",
                            "primaryAccountNumber": "xxxx-xxxx-xxxx-3008",
                            "alertsPreferences": [
                              {
                                "alertType": "DECLINE_ALL",
                                "controlType": "MCT_ALCOHOL",
                                "contacts": [
                                  {
                                    "isVerified": true,
                                    "contactValue": "jsandford3@visavtc.com",
                                    "contactType": "Email",
                                    "preferredEmailFormat": "Plain",
                                    "status": "Active"
                                  }
                                ]
                              }
                            ]
                          }
                        ],
                        "userIdentifier": "jjohn123",
                        "lastUpdateTimeStamp": "2020-04-01 21:41:25",
                        "preferredCountryCode": "USA",
                        "defaultAlertsPreferences": [
                          {
                            "callingCode": "1",
                            "isVerified": true,
                            "contactValue": "9704122005",
                            "contactType": "SMS",
                            "status": "Active"
                          }
                        ]
                      },
                      "processingTimeinMs": 849
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1{userIdentifier}~1{documentId}~1alerts~1preferences/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v3/consumertransactioncontrols/customer/notificationInquiry": {
      "post": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Account Notifications Inquiry",
        "description": "Get notifications summary for all alerts by primaryAccountNumbers, paymentTokens, or documentIds",
        "operationId": "getCustomerNotificationsV3",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationInquiryRequestV2-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "includeContactDetails": true,
                    "pagination": {
                      "pageLimit": "string",
                      "startIndex": "string"
                    },
                    "includeAlertDetails": true,
                    "includeMerchantDetails": true,
                    "primaryAccountNumbers": [
                      "string"
                    ],
                    "paymentTokens": [
                      "string"
                    ],
                    "timeRange": {
                      "startTime": "string",
                      "endTime": "string"
                    },
                    "documentIds": [
                      "string"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceNotificationDetailsV2-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 18:46:00.407",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "10",
                          "startIndex": "1",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 1,
                          "totalPages": 1,
                          "totalCount": 1
                        },
                        "notificationDetails": [
                          {
                            "notificationDetailId": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd",
                            "outBoundAlertsNotificationPayload": {
                              "transactionDetails": {
                                "cardholderBillAmount": 1000,
                                "nameOnCard": "hhh",
                                "userIdentifier": "4991104699359772",
                                "billerCurrencyCode": "840",
                                "requestReceivedTimeStamp": "2022-05-25 18:45:55",
                                "userInformation": {
                                  "applicationDefinedAttributes": [
                                    "APP"
                                  ],
                                  "bankingIdentifier": "BI",
                                  "name": "BOA"
                                },
                                "primaryAccountNumber": "xxxx-xxxx-xxxx-9772",
                                "retrievalReferenceNumber": "1101000000",
                                "merchantInfo": {
                                  "city": "Highlands Ranch",
                                  "countryCode": "USA",
                                  "postalCode": "80129",
                                  "transactionAmount": 1000,
                                  "merchantCategoryCode": "5942",
                                  "cardAcceptorTerminalID": "3101000000",
                                  "name": "COSTCO",
                                  "addressLines": [
                                    "ParkMeadows"
                                  ],
                                  "region": "CO",
                                  "currencyCode": "756"
                                },
                                "transactionID": "2101000000"
                              },
                              "transactionTypes": [
                                "TCT_ATM_WITHDRAW"
                              ],
                              "transactionOutcome": {
                                "decisionResponseTimeStamp": "2022-05-25 18:45:55",
                                "transactionApproved": "DECLINED",
                                "documentID": "ctc-vd-abddb5cf-d297-4e8d-beb6-380a22e3043b",
                                "notificationID": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd",
                                "decisionID": "v-304-f1f11166-f3b3-4465-b995-61edb244c178",
                                "alertDetails": [
                                  {
                                    "triggeringAppID": "fae99da2-095d-438a-bcc2-4696eed1b846",
                                    "ruleCategory": "PCT_GLOBAL",
                                    "userIdentifier": "4991104699359772",
                                    "alertReason": "DECLINE_TRANS_LIMIT",
                                    "ruleType": "NONE",
                                    "userInformation": {
                                      "applicationDefinedAttributes": [
                                        "APP"
                                      ],
                                      "bankingIdentifier": "BI",
                                      "name": "BOA"
                                    },
                                    "controlTargetType": "CARD_LEVEL"
                                  }
                                ]
                              }
                            },
                            "outboundCallDetails": {
                              "httpVerb": "POST",
                              "httpResponseCode": 200,
                              "status": "SUCCESS"
                            }
                          }
                        ]
                      },
                      "processingTimeinMs": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/customer/notifications": {
      "get": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Account Notifications Inquiry By ID",
        "description": "Retrieves a summary of notifications based on the documentId, decisionId or userIdentifier sent in the request. Only one identifier can be used at a time.",
        "operationId": "getCustomerNotificationsByDocumentId",
        "parameters": [
          {
            "name": "notificationId",
            "in": "query",
            "description": "Notification ID to search for",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "decisionId",
            "in": "query",
            "description": "Decision ID to search for",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "query",
            "description": "Control document ID to search for",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdentifier",
            "in": "query",
            "description": "User identifier to search for",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size to be returned",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceNotificationDetails-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 18:46:00.407",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "10",
                          "startIndex": "1",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 1,
                          "totalPages": 1,
                          "totalCount": 1
                        },
                        "notificationDetails": [
                          {
                            "notificationDetailId": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd",
                            "outBoundAlertsNotificationPayload": {
                              "transactionDetails": {
                                "cardholderBillAmount": 1000,
                                "nameOnCard": "hhh",
                                "userIdentifier": "4991104699359772",
                                "billerCurrencyCode": "840",
                                "requestReceivedTimeStamp": "2022-05-25 18:45:55",
                                "userInformation": {
                                  "applicationDefinedAttributes": [
                                    "APP"
                                  ],
                                  "bankingIdentifier": "BI",
                                  "name": "BOA"
                                },
                                "primaryAccountNumber": "xxxx-xxxx-xxxx-9772",
                                "retrievalReferenceNumber": "1101000000",
                                "merchantInfo": {
                                  "city": "Highlands Ranch",
                                  "countryCode": "USA",
                                  "postalCode": "80129",
                                  "transactionAmount": 1000,
                                  "merchantCategoryCode": "5942",
                                  "cardAcceptorTerminalID": "3101000000",
                                  "name": "COSTCO",
                                  "addressLines": [
                                    "ParkMeadows"
                                  ],
                                  "region": "CO",
                                  "currencyCode": "756"
                                },
                                "transactionID": "2101000000"
                              },
                              "transactionTypes": [
                                "TCT_ATM_WITHDRAW"
                              ],
                              "transactionOutcome": {
                                "decisionResponseTimeStamp": "2022-05-25 18:45:55",
                                "transactionApproved": "DECLINED",
                                "documentID": "ctc-vd-abddb5cf-d297-4e8d-beb6-380a22e3043b",
                                "notificationID": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd",
                                "decisionID": "v-304-f1f11166-f3b3-4465-b995-61edb244c178",
                                "alertDetails": [
                                  {
                                    "triggeringAppID": "fae99da2-095d-438a-bcc2-4696eed1b846",
                                    "ruleCategory": "PCT_GLOBAL",
                                    "userIdentifier": "4991104699359772",
                                    "alertReason": "DECLINE_TRANS_LIMIT",
                                    "ruleType": "NONE",
                                    "userInformation": {
                                      "applicationDefinedAttributes": [
                                        "APP"
                                      ],
                                      "bankingIdentifier": "BI",
                                      "name": "BOA"
                                    },
                                    "controlTargetType": "CARD_LEVEL"
                                  }
                                ]
                              }
                            },
                            "outboundCallDetails": {
                              "httpVerb": "POST",
                              "httpResponseCode": 200,
                              "status": "SUCCESS"
                            }
                          }
                        ]
                      },
                      "processingTimeinMs": 70
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer~1notifications/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/customer": {
      "post": {
        "tags": [
          "Alert History and Customer Profiles API"
        ],
        "summary": "Create a New Customer Profile",
        "description": "Creates a New Customer Profile",
        "operationId": "createCustomerProfile",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerProfileFacade-10"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "lastName": "Sandford",
                    "firstName": "John",
                    "isProfileActive": true,
                    "preferredLanguage": "en-us",
                    "userIdentifier": "913f11f6-92a3-4f9f-9a69-c9c59f1133c3",
                    "countryCode": "USA",
                    "defaultAlertsPreferences": [
                      {
                        "callingCode": "1",
                        "contactValue": "6282462222",
                        "contactType": "SMS",
                        "status": "Active"
                      },
                      {
                        "contactValue": "jsandford@visavtc.com",
                        "contactType": "Email",
                        "preferredEmailFormat": "HTML",
                        "status": "Active"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCustomerProfileDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-08-16 11:39:43.945",
                      "resource": {
                        "userIdentifier": "8g2XUnKmMS"
                      },
                      "processingTimeinMs": 267
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceCreatedCustomerProfileDocument"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-08-16 11:39:43.945",
                      "resource": {
                        "userIdentifier": "8g2XUnKmMS"
                      },
                      "processingTimeinMs": 267
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1customer/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/transactiontypecontrols/cardinquiry": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Retrieve the list of available transaction type controls for a card",
        "description": "Retrieve list of available transaction type controls for a primaryAccountNumber or paymentToken",
        "operationId": "transactionControlTypeEnquiryOnCard",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardInquiryRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceSponsorConfigTransactionTypeCardEnquiryTransactionControlResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 04:52:42.296",
                      "resource": {
                        "availableTransactionTypeRules": [
                          {
                            "name": "TCT_ATM_WITHDRAW"
                          },
                          {
                            "name": "TCT_AUTO_PAY"
                          },
                          {
                            "name": "TCT_BRICK_AND_MORTAR"
                          },
                          {
                            "name": "TCT_CROSS_BORDER"
                          },
                          {
                            "name": "TCT_E_COMMERCE"
                          },
                          {
                            "name": "TCT_CONTACTLESS"
                          }
                        ],
                        "status": "ELIGIBLE"
                      },
                      "processingTimeinMs": 15
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1transactiontypecontrols~1cardinquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/accounts/accountupdate": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Update the existing account number with a new one on a control document",
        "description": "Replace the primaryAccountNumber or paymentToken of a control document with a new primaryAccountNumber or paymentToken (Card Replacement)",
        "operationId": "updateExistingAccountIdentifier",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "currentAccountID": "4514170000000001",
                    "newAccountID": "4514170000000002"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceAccountUpdateResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 05:26:13.876",
                      "resource": {
                        "status": "SUCCESS"
                      },
                      "processingTimeinMs": 72
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1accounts~1accountupdate/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Delete Control Document By an Account Identifier",
        "description": "Delete a Control Document using the primaryAccountNumber or paymentToken",
        "operationId": "deleteAccountIdentifier",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CTCSupportedEntitiesRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000002"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceAccountUpdateResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 05:54:07.729",
                      "resource": {
                        "status": "SUCCESS"
                      },
                      "processingTimeinMs": 105
                    }
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partial Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1accounts~1accountupdate/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/{documentID}/rules": {
      "get": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Retrieve the Transaction Control Document",
        "description": "Retrieve a Control Document",
        "operationId": "getTransactionControlDocument",
        "parameters": [
          {
            "name": "documentID",
            "in": "path",
            "description": "The documentID of the control document to be returned.",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string",
              "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
            }
          },
          {
            "name": "userIdentifier",
            "in": "query",
            "description": "Uniquely identifies the cardholder who is to receive the alert message. The userIdentifier should be a GUID but at a minimum it must be unique per enrolling application and must not contain any PII data. It is mandatory for all VTC notifications. The maximum number of characters allowed is 72.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 21:45:52.42",
                      "resource": {
                        "globalControls": [
                          {
                            "shouldDeclineAll": false,
                            "isControlEnabled": true,
                            "userIdentifier": "4991104699359772",
                            "userInformation": {
                              "applicationDefinedAttributes": [
                                "APP"
                              ],
                              "bankingIdentifier": "BI",
                              "name": "BOA"
                            },
                            "transactionLimit": {
                              "currentTransactionCount": 4,
                              "maxTransactionCount": 6
                            },
                            "shouldAlertOnDecline": true
                          }
                        ],
                        "lastUpdateTimeStamp": "2022-05-25 21:43:52",
                        "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                        "createdOnDate": "2022-05-25 21:34:21.749"
                      },
                      "processingTimeinMs": 5
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1{documentID}~1rules/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "put": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Update the existing control(s) within the Transaction Control Document",
        "description": "Replace all details of the existing Transaction Control Document",
        "operationId": "updateControlRules",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "description": "The documentID of the transaction control document to be updated.",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionControlRequestType-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "globalControls": [
                      {
                        "shouldDeclineAll": false,
                        "isControlEnabled": true,
                        "userIdentifier": "4991104699359772",
                        "userInformation": {
                          "applicationDefinedAttributes": [
                            "APP"
                          ],
                          "bankingIdentifier": "BI",
                          "name": "BOA"
                        },
                        "transactionLimit": {
                          "currentTransactionCount": "4",
                          "maxTransactionCount": "6"
                        },
                        "shouldAlertOnDecline": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 21:42:45.256",
                      "resource": {
                        "globalControls": [
                          {
                            "shouldDeclineAll": false,
                            "isControlEnabled": true,
                            "userIdentifier": "4991104699359772",
                            "userInformation": {
                              "applicationDefinedAttributes": [
                                "APP"
                              ],
                              "bankingIdentifier": "BI",
                              "name": "BOA"
                            },
                            "transactionLimit": {
                              "currentTransactionCount": 4,
                              "maxTransactionCount": 6
                            },
                            "shouldAlertOnDecline": true
                          }
                        ],
                        "lastUpdateTimeStamp": "2022-05-25 21:42:45",
                        "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                        "createdOnDate": "2022-05-25 21:34:21.749"
                      },
                      "processingTimeinMs": 67
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1{documentID}~1rules/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Create a new control(s) within the Transaction Control Document",
        "description": "Add or update control(s) within the Transaction Control Document",
        "operationId": "addControlRules",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "description": "The documentID of the transaction control document.",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionControlRequestType-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "globalControls": [
                      {
                        "shouldDeclineAll": false,
                        "isControlEnabled": true,
                        "userIdentifier": "4991104699359772",
                        "userInformation": {
                          "applicationDefinedAttributes": [
                            "APP"
                          ],
                          "bankingIdentifier": "BI",
                          "name": "BOA"
                        },
                        "transactionLimit": {
                          "currentTransactionCount": "4",
                          "maxTransactionCount": "6"
                        },
                        "shouldAlertOnDecline": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 21:42:45.256",
                      "resource": {
                        "globalControls": [
                          {
                            "shouldDeclineAll": false,
                            "isControlEnabled": true,
                            "userIdentifier": "4991104699359772",
                            "userInformation": {
                              "applicationDefinedAttributes": [
                                "APP"
                              ],
                              "bankingIdentifier": "BI",
                              "name": "BOA"
                            },
                            "transactionLimit": {
                              "currentTransactionCount": 4,
                              "maxTransactionCount": 6
                            },
                            "shouldAlertOnDecline": true
                          }
                        ],
                        "lastUpdateTimeStamp": "2022-05-25 21:42:45",
                        "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                        "createdOnDate": "2022-05-25 21:34:21.749"
                      },
                      "processingTimeinMs": 67
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1{documentID}~1rules/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Delete existing Control rules within the Transaction Control Document",
        "description": "Delete existing Control rules within the Transaction Control Document.",
        "operationId": "deleteControlRules",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "description": "The documentID of the transaction control document from where control rules to be deleted, Does not delete the document",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionControlRequestType-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "globalControls": [
                      {
                        "shouldDeclineAll": false,
                        "isControlEnabled": true,
                        "userIdentifier": "4991104699359772",
                        "userInformation": {
                          "applicationDefinedAttributes": [
                            "APP"
                          ],
                          "bankingIdentifier": "BI",
                          "name": "BOA"
                        },
                        "transactionLimit": {
                          "currentTransactionCount": "4",
                          "maxTransactionCount": "6"
                        },
                        "shouldAlertOnDecline": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 05:01:52.004",
                      "resource": {
                        "globalControls": [
                          {
                            "shouldDeclineAll": false,
                            "declineThreshold": 100,
                            "isControlEnabled": true,
                            "userIdentifier": "abhi-539d-4f93-ba00-77ef9ff873a2",
                            "alertThreshold": 10,
                            "declineAllNonTokenizeTransactions": false,
                            "spendLimit": {
                              "declineThreshold": "50.0",
                              "timeZoneID": "America/Denver",
                              "alertThreshold": "10.0",
                              "type": "LMT_MONTH",
                              "currentPeriodSpend": "14.0"
                            },
                            "shouldAlertOnDecline": false
                          }
                        ],
                        "transactionControls": [
                          {
                            "shouldDeclineAll": false,
                            "declineThreshold": 100,
                            "isControlEnabled": true,
                            "controlType": "TCT_ATM_WITHDRAW",
                            "userIdentifier": "abhi-539d-4f93-ba00-77ef9ff873a2",
                            "alertThreshold": 10,
                            "shouldAlertOnDecline": false
                          },
                          {
                            "shouldDeclineAll": false,
                            "declineThreshold": 100,
                            "isControlEnabled": true,
                            "controlType": "TCT_AUTO_PAY",
                            "userIdentifier": "abhi-539d-4f93-ba00-77ef9ff873a2",
                            "alertThreshold": 10,
                            "shouldAlertOnDecline": false
                          },
                          {
                            "shouldDeclineAll": false,
                            "declineThreshold": 100,
                            "isControlEnabled": true,
                            "controlType": "TCT_BRICK_AND_MORTAR",
                            "userIdentifier": "abhi-539d-4f93-ba00-77ef9ff873a2",
                            "alertThreshold": 10,
                            "shouldAlertOnDecline": false
                          },
                          {
                            "shouldDeclineAll": false,
                            "declineThreshold": 100,
                            "isControlEnabled": true,
                            "controlType": "TCT_CROSS_BORDER",
                            "userIdentifier": "abhi-539d-4f93-ba00-77ef9ff873a2",
                            "alertThreshold": 10,
                            "shouldAlertOnDecline": false
                          }
                        ],
                        "lastUpdateTimeStamp": "2017-11-21 04:59:20",
                        "documentID": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
                      },
                      "processingTimeinMs": 43
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1{documentID}~1rules/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/accounts/decoupletokens": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Decouple Tokens",
        "description": "Couple/Decouple a list of tokens from/to corresponding PAN",
        "operationId": "decoupleTokensFromPan",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDecoupleTokenRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "decoupleTokenRequest": [
                      {
                        "paymentToken": "4514170000000002",
                        "shouldDecouple": true,
                        "primaryAccountNumber": "4154710000000003"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceBulkDecoupleTokenResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 05:54:08.729",
                      "resource": {
                        "response": [
                          {
                            "index": 0,
                            "documentID": "ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960"
                          }
                        ],
                        "status": "Success"
                      },
                      "processingTimeinMs": 50
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1accounts~1decoupletokens/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/{documentID}": {
      "delete": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Delete a Control Document by its documentID",
        "description": "Delete a Control Document.",
        "operationId": "deleteTransactionControlDocument",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "description": "The documentID of the customer transaction control document to be de-enrolled, Document will be deleted.",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceVoid-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 05:57:55.059",
                      "processingTimeinMs": 67
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1{documentID}/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Enroll a card for transaction control",
        "description": "Enroll an account in Visa Transaction Controls (VTC)",
        "operationId": "registerCard",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionControlRequestType-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlDocument-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 04:56:12.551",
                      "resource": {
                        "documentID": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
                      },
                      "processingTimeinMs": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/merchanttypecontrols/cardinquiry": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Retrieve the list of available merchant type controls for a card",
        "description": "Retrieve the list of the Merchant control types available for a primaryAccountNumber or paymentToken",
        "operationId": "merchantControlTypeEnquiryOnCard",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardInquiryRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceSponsorConfigMerchantTypeCardEnquiryMerchantControlResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-21 04:50:20.098",
                      "resource": {
                        "status": "ELIGIBLE",
                        "availableMerchantTypeRules": [
                          {
                            "name": "MCT_ALCOHOL"
                          },
                          {
                            "name": "MCT_APPAREL_AND_ACCESSORIES"
                          },
                          {
                            "name": "MCT_AUTOMOTIVE"
                          },
                          {
                            "name": "MCT_CAR_RENTAL"
                          },
                          {
                            "name": "MCT_ELECTRONICS"
                          },
                          {
                            "name": "MCT_GAMBLING"
                          },
                          {
                            "name": "MCT_SPORT_AND_RECREATION"
                          },
                          {
                            "name": "MCT_GROCERY"
                          },
                          {
                            "name": "MCT_HOTEL_AND_LODGING"
                          },
                          {
                            "name": "MCT_HOUSEHOLD"
                          },
                          {
                            "name": "MCT_PERSONAL_CARE"
                          },
                          {
                            "name": "MCT_SMOKE_AND_TOBACCO"
                          },
                          {
                            "name": "MCT_GAS_AND_PETROLEUM"
                          }
                        ]
                      },
                      "processingTimeinMs": 9
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1merchanttypecontrols~1cardinquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/inquiries/cardinquiry": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Get Transaction Control Document List by Primary Account Number",
        "description": "Get Transaction Control Document List by a PrimaryAccountNumber or PaymentToken",
        "operationId": "getCTCListByPAN",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardInquiryRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlListResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 21:45:52.42",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "string",
                          "startIndex": "string",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 0,
                          "totalPages": 0,
                          "totalCount": 0
                        },
                        "responseMessage": "string",
                        "controlDocuments": [
                          {
                            "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                            "requestedDocumentID": "string",
                            "userId": "1222",
                            "transactionControlDocument": {
                              "globalControls": [
                                {
                                  "shouldDeclineAll": false,
                                  "declineThreshold": 60,
                                  "isControlEnabled": true,
                                  "userIdentifier": "4991104699359772",
                                  "alertThreshold": 50,
                                  "declineAllNonTokenizeTransactions": true,
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "APP"
                                    ],
                                    "bankingIdentifier": "BI",
                                    "name": "BOA"
                                  },
                                  "transactionLimit": {
                                    "currentTransactionCount": 4,
                                    "maxTransactionCount": 6
                                  },
                                  "shouldAlertOnDecline": true
                                }
                              ],
                              "transactionControls": [
                                {
                                  "shouldDeclineAll": false,
                                  "declineThreshold": 60,
                                  "isControlEnabled": true,
                                  "controlType": "TCT_ATM_WITHDRAW",
                                  "userIdentifier": "4991104699359772",
                                  "alertThreshold": 50,
                                  "declineAllNonTokenizeTransactions": true,
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "APP"
                                    ],
                                    "bankingIdentifier": "BI",
                                    "name": "BOA"
                                  },
                                  "shouldAlertOnDecline": true
                                }
                              ],
                              "shouldDecouple": true,
                              "lastUpdateTimeStamp": "2022-05-25 21:34:21.749",
                              "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                              "createdOnDate": "2022-05-25 21:34:21.749"
                            },
                            "createdOnDate": "2022-05-25 21:34:21.749",
                            "status": "ENROLLED"
                          }
                        ]
                      },
                      "processingTimeinMs": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1inquiries~1cardinquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/{documentID}/controlHistory": {
      "get": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Get a transaction Control Document History by Primary Account Number and Date Range",
        "description": "Get Transaction Control Changes History(Audit) by documentID",
        "operationId": "getTransactionControlHistoryByDocumentID",
        "parameters": [
          {
            "name": "documentID",
            "in": "path",
            "description": "The documentID of the transaction control document to be returned.",
            "required": true,
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlReportsResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 21:45:52.42",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "string",
                          "startIndex": "string",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 0,
                          "totalPages": 0,
                          "totalCount": 0
                        },
                        "responseMessage": "string",
                        "controlDocuments": [
                          {
                            "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                            "requestedDocumentID": "string",
                            "userId": "1222",
                            "transactionControlDocument": {
                              "globalControls": [
                                {
                                  "shouldDeclineAll": false,
                                  "declineThreshold": 60,
                                  "isControlEnabled": true,
                                  "userIdentifier": "4991104699359772",
                                  "alertThreshold": 50,
                                  "declineAllNonTokenizeTransactions": true,
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "APP"
                                    ],
                                    "bankingIdentifier": "BI",
                                    "name": "BOA"
                                  },
                                  "transactionLimit": {
                                    "currentTransactionCount": 4,
                                    "maxTransactionCount": 6
                                  },
                                  "shouldAlertOnDecline": true
                                }
                              ],
                              "transactionControls": [
                                {
                                  "shouldDeclineAll": false,
                                  "declineThreshold": 60,
                                  "isControlEnabled": true,
                                  "controlType": "TCT_ATM_WITHDRAW",
                                  "userIdentifier": "4991104699359772",
                                  "alertThreshold": 50,
                                  "declineAllNonTokenizeTransactions": true,
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "APP"
                                    ],
                                    "bankingIdentifier": "BI",
                                    "name": "BOA"
                                  },
                                  "shouldAlertOnDecline": true
                                }
                              ],
                              "shouldDecouple": true,
                              "lastUpdateTimeStamp": "2022-05-25 21:34:21.749",
                              "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                              "createdOnDate": "2022-05-25 21:34:21.749"
                            },
                            "createdOnDate": "2022-05-25 21:34:21.749",
                            "status": "ENROLLED"
                          }
                        ]
                      },
                      "processingTimeinMs": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1{documentID}~1controlHistory/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/walletservices/accountinquiry": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Set of API resources targeted for Issuers and Third Party Mobile wallet applications",
        "description": "This returns all rules configured and available for a given primaryAccountNumber, paymentToken or documentID",
        "operationId": "cardInquiry",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletServicesAccountInquiryRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumbers": [
                      "4514170000000002"
                    ],
                    "documentIDs": [
                      "ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960",
                      "ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceWalletServicesAccountInquiryResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-06-08 10:08:42.898",
                      "resource": {
                        "accountInquiryResponse": [
                          {
                            "primaryAccountNumber": "4514170XXXXXXX0000",
                            "allAvailableControls": {
                              "ruleCategories": [
                                "PCT_GLOBAL",
                                "PCT_TRANSACTION"
                              ],
                              "merchantTypeRules": [
                                "MCT_GAMBLING",
                                "MCT_APPAREL_AND_ACCESSORIES",
                                "MCT_AIRFARE"
                              ],
                              "transactionTypeRules": [
                                "TCT_ATM_WITHDRAW",
                                "TCT_BRICK_AND_MORTAR",
                                "TCT_AUTO_PAY",
                                "TCT_E_COMMERCE",
                                "TCT_CONTACTLESS"
                              ]
                            },
                            "controlDocuments": [
                              {
                                "lastUpdateTimeStamp": "2017-05-29 21:10:54",
                                "globalControl": {
                                  "shouldDeclineAll": false,
                                  "shouldTargetSpecificCard": true,
                                  "declineThreshold": 8000,
                                  "isControlEnabled": true,
                                  "userIdentifier": "Abhishek",
                                  "alertThreshold": 50,
                                  "cardDetail": {
                                    "nameOnCard": "ca93551fa98ffdcfbf457efc4dd88645",
                                    "sequenceOnCard": "1"
                                  },
                                  "spendLimit": {
                                    "declineThreshold": 2000,
                                    "timeZoneID": "GMT",
                                    "alertThreshold": 1000,
                                    "currentPeriodEnd": "2017-06-05 23:59:59",
                                    "type": "LMT_DAY",
                                    "currentPeriodSpend": 680
                                  },
                                  "shouldAlertOnDecline": true
                                },
                                "documentID": "ctc-ip-d484dc28-ac64-48f9-86f2-468a27e0eec7"
                              },
                              {
                                "lastUpdateTimeStamp": "2017-06-05 10:49:54",
                                "documentID": "ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960"
                              }
                            ],
                            "status": "ENROLLED"
                          },
                          {
                            "documentID": "ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960",
                            "allAvailableControls": {
                              "ruleCategories": [
                                "PCT_GLOBAL",
                                "PCT_TRANSACTION"
                              ],
                              "merchantTypeRules": [
                                "MCT_GAMBLING",
                                "MCT_APPAREL_AND_ACCESSORIES",
                                "MCT_AIRFARE"
                              ],
                              "transactionTypeRules": [
                                "TCT_ATM_WITHDRAW",
                                "TCT_BRICK_AND_MORTAR",
                                "TCT_AUTO_PAY",
                                "TCT_E_COMMERCE",
                                "TCT_CONTACTLESS"
                              ]
                            },
                            "controlDocuments": [
                              {
                                "lastUpdateTimeStamp": "2017-06-05 10:49:54",
                                "documentID": "ctc-ip-98b195ed-138f-49a5-bc4e-cdc986e79960"
                              }
                            ],
                            "status": "ENROLLED"
                          },
                          {
                            "documentID": "ip-98b195ed-138f-49a5-bc4e-cdc986e79960",
                            "controlDocuments": [],
                            "status": "NOT_ENROLLED"
                          }
                        ]
                      },
                      "processingTimeinMs": 28
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1walletservices~1accountinquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/controlHistory": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Get Transaction Control Changes History by documentID",
        "description": "Retrieve a history of changes made to the control document since it was created listed chronologically. Each \"snapshot\" represents the state of a control document after being updated.  A single PrimaryAccountNumber can have multiple control documents in VTC.",
        "operationId": "getCTCControlHistoryByPanOrToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to be returned",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size to be returned",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestModelForTransactionControlsHistoryByTimeRange-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceTransactionControlReportsResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2022-05-25 21:45:52.42",
                      "resource": {
                        "paginationData": {
                          "pageLimit": "string",
                          "startIndex": "string",
                          "lastPage": true,
                          "firstPage": true,
                          "recordCount": 0,
                          "totalPages": 0,
                          "totalCount": 0
                        },
                        "responseMessage": "string",
                        "controlDocuments": [
                          {
                            "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                            "requestedDocumentID": "string",
                            "userId": "1222",
                            "transactionControlDocument": {
                              "globalControls": [
                                {
                                  "shouldDeclineAll": false,
                                  "declineThreshold": 60,
                                  "isControlEnabled": true,
                                  "userIdentifier": "4991104699359772",
                                  "alertThreshold": 50,
                                  "declineAllNonTokenizeTransactions": true,
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "APP"
                                    ],
                                    "bankingIdentifier": "BI",
                                    "name": "BOA"
                                  },
                                  "transactionLimit": {
                                    "currentTransactionCount": 4,
                                    "maxTransactionCount": 6
                                  },
                                  "shouldAlertOnDecline": true
                                }
                              ],
                              "transactionControls": [
                                {
                                  "shouldDeclineAll": false,
                                  "declineThreshold": 60,
                                  "isControlEnabled": true,
                                  "controlType": "TCT_ATM_WITHDRAW",
                                  "userIdentifier": "4991104699359772",
                                  "alertThreshold": 50,
                                  "declineAllNonTokenizeTransactions": true,
                                  "userInformation": {
                                    "applicationDefinedAttributes": [
                                      "APP"
                                    ],
                                    "bankingIdentifier": "BI",
                                    "name": "BOA"
                                  },
                                  "shouldAlertOnDecline": true
                                }
                              ],
                              "shouldDecouple": true,
                              "lastUpdateTimeStamp": "2022-05-25 21:34:21.749",
                              "documentID": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6",
                              "createdOnDate": "2022-05-25 21:34:21.749"
                            },
                            "createdOnDate": "2022-05-25 21:34:21.749",
                            "status": "ENROLLED"
                          }
                        ]
                      },
                      "processingTimeinMs": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1controlHistory/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/applications/configuration": {
      "get": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Retrieve the App's configuration data for notification callback settings",
        "description": "Retrieve an App's Notification callback settings",
        "operationId": "getAppConfigurationCallBackSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceAppConfigurationCallBackSettingsResponseType-1"
                },
                "example": {
                  "resource": {
                    "status": "CONFIGURED",
                    "callBackSettings": {
                      "payloadVersion": "V1",
                      "callBackEndpoint": "https://issuer.api.com/sampleVCTChostprocessor/consumertransactioncontrols/enrollments",
                      "isCallBackDisabled": false,
                      "iscallBackEndpointLocal": false
                    }
                  },
                  "receivedTimestamp": "2023-05-21 03:40:32.847",
                  "processingTimeinMs": 15
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1applications~1configuration/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "put": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Update the App's configuration data for notification callback settings",
        "description": "Update the App's configuration data for notification callback settings",
        "operationId": "updateAppConfigurationCallBackSettings",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppConfigurationCallBackSettingsRequestType-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "callBackSettings": {
                      "callBackEndpoint": "https://myhost.com/notifications",
                      "isCallBackEndpointLocal": true,
                      "isCallBackDisabled": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceAppConfigurationCallBackSettingsResponseType-1"
                },
                "example": {
                  "resource": {
                    "status": "CONFIGURED",
                    "callBackSettings": {
                      "payloadVersion": "V1",
                      "callBackEndpoint": "https://issuer.api.com/sampleVCTChostprocessor/consumertransactioncontrols/enrollments",
                      "isCallBackDisabled": false,
                      "iscallBackEndpointLocal": false
                    }
                  },
                  "receivedTimestamp": "2023-05-21 03:40:32.847",
                  "processingTimeinMs": 15
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1applications~1configuration/put",
            "default": false
          }
        ]
      }
    },
    "/vctc/customerrules/v1/configuration/cardinquiry": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Retrieve list of available payment control types for a card",
        "description": "Retrieve list of available rule categories for a primaryAccountNumber or paymentToken",
        "operationId": "controlTypeEnquiryOnCard",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardInquiryRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "primaryAccountNumber": "4514170000000001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceSponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-04-25 08:43:56.106",
                      "resource": {
                        "availableControlTypes": [
                          {
                            "name": "PCT_GLOBAL"
                          },
                          {
                            "name": "PCT_TRANSACTION"
                          },
                          {
                            "name": "PCT_MERCHANT"
                          }
                        ],
                        "status": "ELIGIBLE"
                      },
                      "processingTimeinMs": 118
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1configuration~1cardinquiry/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/customerrules/v1/consumertransactioncontrols/batch": {
      "post": {
        "tags": [
          "Customer Rules API"
        ],
        "summary": "Batch Enrollment",
        "description": "Enroll a Batch of Accounts in Visa Transaction Controls",
        "operationId": "bulkEnrollment",
        "parameters": [
          {
            "name": "user-ID",
            "in": "header",
            "description": "User ID of the person/system who invokes the service",
            "required": false,
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEnrollmentRequest-1"
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "enrolledCards": [
                      {
                        "accountIdentifier": "4991104699359772"
                      }
                    ],
                    "forceEnrollment": true,
                    "controlRules": {
                      "transactionControls": [
                        {
                          "shouldDeclineAll": false,
                          "declineThreshold": 1000,
                          "controlType": "TCT_E_COMMERCE"
                        }
                      ],
                      "globalControl": {
                        "shouldDeclineAll": false,
                        "declineThreshold": 1000,
                        "declineAllNonTokenizeTransactions": false
                      }
                    },
                    "cardsType": null
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResourceBulkEnrollmentResponse-1"
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2024-08-08 05:19:47.68",
                      "resource": {
                        "status": "SUCCESS"
                      },
                      "processingTimeinMs": 15
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2024-08-08 05:19:47.68",
                      "resource": {
                        "status": "SUCCESS"
                      },
                      "processingTimeinMs": 15
                    }
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partial Success",
            "content": {
              "application/json": {
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2024-08-08 05:19:47.68",
                      "resource": {
                        "status": "SUCCESS"
                      },
                      "processingTimeinMs": 15
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Forbidden Access",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {}
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {}
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {}
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Invalid Data",
            "content": {
              "application/json": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {}
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1customerrules~1v1~1consumertransactioncontrols~1batch/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/programadmin/v1/sponsors/configuration": {
      "get": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Retrieve rule configuration and capabilities allowed for an issuer",
        "description": "Retrieve list of rule categories that issuer has made available to its cardholders",
        "operationId": "Retrieve rule configuration and capabilities allowed for an issuer",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigObject-1"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received.",
                      "example": "2025-08-21 02:54:39.219"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 28
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 10:42:56.841",
                      "resource": {
                        "cardEnrollmentCallbackSettings": {
                          "callBackEndpoint": "https://programadmin.qa.vctc.visa.com:8443/sampleVCTChostprocessor/consumertransactioncontrols/enrollments",
                          "iscallBackEndpointLocal": false,
                          "isCallBackDisabled": true
                        },
                        "cardPrefixes": [
                          {
                            "prefixStartRange": "451417",
                            "cardType": "Credit",
                            "prefixEndRange": "",
                            "cardBrand": "VISA",
                            "callBackSettings": {
                              "callBackEndpoint": "https://programadmin.qa.vctc.visa.com:8443/sampleVCTChostprocessor/consumertransactioncontrols/enrollments",
                              "iscallBackEndpointLocal": false,
                              "isCallBackDisabled": true
                            }
                          },
                          {
                            "prefixStartRange": "451423",
                            "cardType": "Debit",
                            "prefixEndRange": "",
                            "cardBrand": "VISA",
                            "callBackSettings": {
                              "callBackEndpoint": "https://programadmin.qa.vctc.visa.com:8443/sampleVCTChostprocessor/consumertransactioncontrols/enrollments",
                              "iscallBackEndpointLocal": false,
                              "isCallBackDisabled": true
                            }
                          }
                        ],
                        "configuredPaymentRuleTypes": [
                          "PCT_GLOBAL",
                          "PCT_MERCHANT",
                          "PCT_TRANSACTION"
                        ],
                        "status": "CONFIGURED"
                      },
                      "processingTimeinMs": 31
                    }
                  }
                }
              }
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1sponsors~1configuration/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "put": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Modify rule configuration and capabilities allowed for an issuer",
        "description": "Update existing set of rule categories with a new set for use by issuer's cardholders",
        "operationId": "Update rule configuration and capabilities allowed for an issuer",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ruleCategories"
                ],
                "type": "object",
                "properties": {
                  "ruleCategories": {
                    "type": "array",
                    "description": "Allowed rule categories configured for this Sponsor ID.",
                    "example": "PCT_GLOBAL",
                    "items": {
                      "type": "string",
                      "description": "Allowed rule categories configured for this Sponsor ID.",
                      "example": "PCT_GLOBAL",
                      "enum": [
                        "PCT_GLOBAL",
                        "PCT_TRANSACTION",
                        "PCT_MERCHANT"
                      ]
                    }
                  },
                  "isSpendLimitAllowed": {
                    "type": "boolean",
                    "description": "Indicates if spend limit control feature is allowed."
                  },
                  "isFilterByCountryAllowed": {
                    "type": "boolean",
                    "description": "Indicates if the filter by country feature is allowed."
                  },
                  "cardEnrollmentCallbackSettings": {
                    "$ref": "#/components/schemas/CallBackSettings-2"
                  }
                }
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "ruleCategories": [
                      "PCT_MERCHANT"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject-4"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received.",
                      "example": "2025-08-21 03:06:12.629"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 48
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 10:57:28.589",
                      "resource": {
                        "lastUpdateTimeStamp": "2017-03-23 10:57:28"
                      },
                      "processingTimeinMs": 11
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1sponsors~1configuration/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Create rule configuration and capabilities allowed for an issuer",
        "description": "Add new rule categories for use by issuer's cardholders",
        "operationId": "Create rule configuration and capabilities allowed for an issuer",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ruleCategories"
                ],
                "type": "object",
                "properties": {
                  "ruleCategories": {
                    "type": "array",
                    "description": "Allowed rule categories configured for this Sponsor ID.",
                    "example": "PCT_GLOBAL",
                    "items": {
                      "type": "string",
                      "description": "Allowed rule categories configured for this Sponsor ID.",
                      "example": "PCT_GLOBAL",
                      "enum": [
                        "PCT_GLOBAL",
                        "PCT_TRANSACTION",
                        "PCT_MERCHANT"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "ruleCategories": [
                      "PCT_MERCHANT"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received.",
                      "example": "2025-08-21 02:49:27.618"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 83
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 10:56:12.475",
                      "resource": {
                        "lastUpdateTimeStamp": "2017-03-23 10:56:12"
                      },
                      "processingTimeinMs": 57
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1sponsors~1configuration/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Delete rule configuration and capabilities allowed for an issuer",
        "description": "Delete the consumer transaction controls that the issuer has made avaiable to its cardholders",
        "operationId": "Delete rule configuration and capabilities allowed for an issuer",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ruleCategories"
                ],
                "type": "object",
                "properties": {
                  "ruleCategories": {
                    "type": "array",
                    "description": "Allowed rule categories configured for this Sponsor ID.",
                    "items": {
                      "type": "string",
                      "description": "Allowed rule categories configured for this Sponsor ID.",
                      "enum": [
                        "PCT_GLOBAL, PCT_TRANSACTION, PCT_MERCHANT"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "ruleCategories": [
                      "PCT_MERCHANT"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject-1"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received. Format: yyyy-MM-dd HH:mm:ss.SSS",
                      "example": "2025-08-18 04:35:39.801"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 15
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 10:54:28.524",
                      "resource": {
                        "lastUpdateTimeStamp": "2017-03-23 10:54:28"
                      },
                      "processingTimeinMs": 348
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1sponsors~1configuration/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/vctc/programadmin/v1/configuration/transactiontypecontrols": {
      "get": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Retrieve transaction controls allowed for an issuer",
        "description": "Retrieve the list of transaction type controls that the issuer has made available to its cardholders",
        "operationId": "Retrieve transaction controls allowed for an issuer",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject-3"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received. Format: yyyy-MM-dd HH:mm:ss.SSS",
                      "example": "2025-08-18 04:28:20.994"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 814
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 11:49:07.673",
                      "resource": {
                        "configuredTransactionTypeRules": [
                          "TCT_ATM_WITHDRAW"
                        ],
                        "availableTransactionTypeRules": [
                          "TCT_AUTO_PAY",
                          "TCT_BRICK_AND_MORTAR",
                          "TCT_CROSS_BORDER",
                          "TCT_E_COMMERCE",
                          "TCT_FUNDS_TRANSFER",
                          "TCT_CONTACTLESS"
                        ],
                        "status": "CONFIGURED"
                      },
                      "processingTimeinMs": 7
                    }
                  }
                }
              }
            }
          }
        },
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1configuration~1transactiontypecontrols/get",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "put": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Modify transaction controls allowed for an issuer",
        "description": "Update existing set of transaction type controls with a new set for the issuer's cardholders",
        "operationId": "Modify transaction controls allowed for an issuer",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "transactionTypeRules"
                ],
                "type": "object",
                "properties": {
                  "transactionTypeRules": {
                    "type": "array",
                    "description": "Transaction control types enabled for the Sponsor/Issuer.",
                    "example": "TCT_ATM_WITHDRAW",
                    "items": {
                      "type": "string",
                      "description": "Transaction control types enabled for the Sponsor/Issuer.",
                      "example": "TCT_ATM_WITHDRAW",
                      "enum": [
                        "TCT_ATM_WITHDRAW",
                        "TCT_AUTO_PAY",
                        "TCT_BRICK_AND_MORTAR",
                        "TCT_CROSS_BORDER",
                        "TCT_E_COMMERCE",
                        "TCT_CONTACTLESS",
                        "TCT_PURCHASE_RETURN",
                        "TCT_OCT"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "transactionTypeRules": [
                      "TCT_ATM_WITHDRAW"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject-2"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received.",
                      "example": "2025-08-21 02:51:43.659"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 62
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 11:55:23.659",
                      "resource": {
                        "lastUpdateTimeStamp": "2017-03-23 11:55:23"
                      },
                      "processingTimeinMs": 8
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1configuration~1transactiontypecontrols/put",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "post": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Create transaction controls allowed for an issuer",
        "description": "Add new transaction type controls for the issuer's cardholders",
        "operationId": "Create transaction controls allowed for an issuer",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "transactionTypeRules"
                ],
                "type": "object",
                "properties": {
                  "transactionTypeRules": {
                    "type": "array",
                    "description": "Transaction control types enabled for the Sponsor/Issuer.",
                    "example": "TCT_ATM_WITHDRAW",
                    "items": {
                      "type": "string",
                      "description": "Transaction control types enabled for the Sponsor/Issuer.",
                      "example": "TCT_ATM_WITHDRAW",
                      "enum": [
                        "TCT_ATM_WITHDRAW",
                        "TCT_AUTO_PAY",
                        "TCT_BRICK_AND_MORTAR",
                        "TCT_CROSS_BORDER",
                        "TCT_E_COMMERCE",
                        "TCT_CONTACTLESS",
                        "TCT_PURCHASE_RETURN",
                        "TCT_OCT"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "transactionTypeRules": [
                      "TCT_ATM_WITHDRAW"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject-6"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received.",
                      "example": "2025-08-21 02:40:48.187"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 82
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 11:48:50.0",
                      "resource": {
                        "lastUpdateTimeStamp": "2017-03-23 11:48:50"
                      },
                      "processingTimeinMs": 288
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1configuration~1transactiontypecontrols/post",
            "default": false
          }
        ],
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Program Administration API"
        ],
        "summary": "Delete transaction controls allowed for an issuer",
        "description": "Delete transaction type controls that the issuer has made available to its cardholders",
        "operationId": "Delete transaction controls allowed for an issuer",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "transactionTypeRules"
                ],
                "type": "object",
                "properties": {
                  "transactionTypeRules": {
                    "type": "array",
                    "description": "Transaction control types enabled for the Sponsor/Issuer.",
                    "example": "TCT_ATM_WITHDRAW",
                    "items": {
                      "type": "string",
                      "description": "Transaction control types enabled for the Sponsor/Issuer.",
                      "example": "TCT_ATM_WITHDRAW",
                      "enum": [
                        "TCT_ATM_WITHDRAW",
                        "TCT_AUTO_PAY",
                        "TCT_BRICK_AND_MORTAR",
                        "TCT_CROSS_BORDER",
                        "TCT_E_COMMERCE",
                        "TCT_CONTACTLESS",
                        "TCT_PURCHASE_RETURN",
                        "TCT_OCT"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Default": {
                  "summary": "Default",
                  "value": {
                    "transactionTypeRules": [
                      "TCT_ATM_WITHDRAW"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/SponsorConfigControlTypeObject-5"
                    },
                    "receivedTimestamp": {
                      "type": "string",
                      "description": "Time, in UTC, the request is received. Format: yyyy-MM-dd HH:mm:ss.SSS",
                      "example": "2025-08-18 04:33:10.403"
                    },
                    "processingTimeinMs": {
                      "type": "integer",
                      "description": "Processing time in milliseconds.",
                      "format": "int64",
                      "example": 15
                    }
                  }
                },
                "examples": {
                  "Default": {
                    "summary": "Default",
                    "value": {
                      "receivedTimestamp": "2017-03-23 11:48:50.0",
                      "resource": {
                        "lastUpdateTimeStamp": "2017-03-23 11:48:50"
                      },
                      "processingTimeinMs": 288
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1vctc~1programadmin~1v1~1configuration~1transactiontypecontrols/delete",
            "default": false
          }
        ],
        "x-hideTryIt": true
      }
    },
    "/ConsumerTransactionControls/v1/enrollments": {
      "post": {
        "tags": [
          "Enrollment Callback API"
        ],
        "summary": "Enroll a card",
        "description": "Enroll a card",
        "operationId": "Enroll a card",
        "requestBody": {
          "description": "payload",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "bankAccountNumber",
                  "paymentToken",
                  "primaryAccountNumber"
                ],
                "type": "object",
                "properties": {
                  "paymentToken": {
                    "type": "string",
                    "description": "Masked payment Token Number, with only the last 4 digits provided"
                  },
                  "bankAccountNumber": {
                    "type": "string",
                    "description": "Masked bank account number, with only the last 4 digits provided"
                  },
                  "primaryAccountNumber": {
                    "type": "string",
                    "description": "The card number for which the enrollment/de-enrollment is to be made."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden Access",
            "content": {}
          },
          "404": {
            "description": "Resource Not Found",
            "content": {}
          },
          "422": {
            "description": "Invalid Data",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          },
          "503": {
            "description": "Service Maintenance",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "payload",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1ConsumerTransactionControls~1v1~1enrollments/post",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      },
      "delete": {
        "tags": [
          "Enrollment Callback API"
        ],
        "summary": "De-enroll a card",
        "description": "De-enroll a card",
        "operationId": "De-enroll a card",
        "requestBody": {
          "description": "payload",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "bankAccountNumber",
                  "paymentToken",
                  "primaryAccountNumber"
                ],
                "type": "object",
                "properties": {
                  "paymentToken": {
                    "type": "string",
                    "description": "Masked payment Token Number, with only the last 4 digits provided"
                  },
                  "bankAccountNumber": {
                    "type": "string",
                    "description": "Masked bank account number, with only the last 4 digits provided"
                  },
                  "primaryAccountNumber": {
                    "type": "string",
                    "description": "The card number for which the enrollment/de-enrollment is to be made."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden Access",
            "content": {}
          },
          "404": {
            "description": "Resource Not Found",
            "content": {}
          },
          "422": {
            "description": "Invalid Data",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          },
          "503": {
            "description": "Service Maintenance",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "payload",
        "x-operationVersions": [
          {
            "label": "v1 - Latest",
            "operationPointer": "#/paths/~1ConsumerTransactionControls~1v1~1enrollments/delete",
            "default": false
          }
        ],
        "x-hideSample": true,
        "x-hideTryIt": true
      }
    }
  },
  "components": {
    "schemas": {
      "BalanceInfo": {
        "title": "BalanceInfo",
        "required": [
          "balanceAccountType",
          "balanceAmount",
          "balanceAmountType",
          "balanceTransactionCurrencyCode",
          "sign"
        ],
        "type": "object",
        "properties": {
          "sign": {
            "type": "string",
            "description": "The sign for balance amount, either positive (C) or negative (D).",
            "enum": [
              "C",
              "D"
            ]
          },
          "balanceAmount": {
            "type": "number",
            "description": "The balance remaining on the card after the transaction occurs. Can be up to 12 digits long with up to three decimal points.",
            "format": "double"
          },
          "balanceAmountType": {
            "type": "string",
            "description": "A two digit code that identifies the amount type. Balance account type 00 = code for payment transactions."
          },
          "balanceAccountType": {
            "type": "string",
            "description": "A two digit code that identifies the account type. Balance account type 28 = prepaid load trx, 72 = prepaid activation transaction."
          },
          "balanceTransactionCurrencyCode": {
            "type": "string",
            "description": "Three digit code that identifies what currency was used for the transaction."
          }
        }
      },
      "CollectionResourceOfGetDecisionDocument-4": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-4"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "The time the request is received. Value is in UTC time"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "The processing time in milliseconds",
            "format": "int64"
          }
        }
      },
      "CollectionResourceOfGetDecisionDocument-3": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-3"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "PreEvalDecisionRequest-6": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "CollectionResourceOfGetDecisionDocument-6": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-6"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "SponsorConfigurationDocument": {
        "required": [
          "appID",
          "cardPrefixes",
          "primaryCluster",
          "sponsorID",
          "sponsorName",
          "transactionControlsConfiguration"
        ],
        "type": "object",
        "properties": {
          "appID": {
            "type": "string",
            "description": "Identifier for the application requesting to be enabled by the Sponsor/Issuer."
          },
          "region": {
            "type": "string",
            "description": "Two or three letter state or region code.",
            "example": "US",
            "enum": [
              "AP",
              "CAN",
              "CEMEA",
              "VE",
              "LAC",
              "US"
            ]
          },
          "sponsorID": {
            "type": "string",
            "description": "Identifier assigned to sponsor."
          },
          "appGroupID": {
            "type": "string",
            "description": "Group ID for the applications managing transaction controls."
          },
          "sponsorBID": {
            "type": "string",
            "description": "Identifier assigned to sponsor's business identity."
          },
          "sponsorName": {
            "type": "string",
            "description": "Name of sponsor being configured."
          },
          "appWhiteList": {
            "type": "array",
            "description": "List of app IDs enabled in the allowlist.",
            "items": {
              "$ref": "#/components/schemas/AppWhiteList"
            }
          },
          "cardPrefixes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardPrefix"
            }
          },
          "shardEnabled": {
            "type": "boolean",
            "description": "Indicates if data sharding is enabled.",
            "example": true
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "format": "date-time"
          },
          "destinationBIN": {
            "type": "string"
          },
          "isDeclineOnAFT": {
            "type": "boolean",
            "description": "Indicates if a decline is enabled on AFT.",
            "example": true
          },
          "migrationStage": {
            "type": "string",
            "description": "The stage of sharding migration for the sponsor level.",
            "example": "SHARD_ONLY",
            "enum": [
              "REPLICA_ONLY",
              "BEFORE_MIGRATION",
              "DURING_MIGRATION",
              "AFTER_MIGRATION",
              "SHARD_ONLY"
            ]
          },
          "primaryCluster": {
            "type": "string",
            "description": "Database cluster designated to handle primary operations for sponsor's configuration.",
            "example": "VDP"
          },
          "isAlertPreferenceV1": {
            "type": "boolean",
            "description": "Indicates if the sponsor has enabled the v1 alert preferences response.",
            "readOnly": true
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2023-03-21T04:56:20.000Z"
          },
          "registeredApplication": {
            "type": "string",
            "description": "Details of an application that is registered to interact with sponsor's configuration."
          },
          "transactionControlsConfiguration": {
            "$ref": "#/components/schemas/TransactionControlsConfiguration"
          }
        },
        "description": "Configuration settings for sponsors."
      },
      "PreEvalDecisionRequest-5": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "CollectionResourceOfGetDecisionDocument-5": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-5"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "PreEvalDecisionRequest-4": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "PreEvalDecisionRequest-3": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "PaginationData-1": {
        "title": "PaginationData",
        "required": [
          "firstPage",
          "lastPage",
          "pageLimit",
          "recordCount",
          "startIndex",
          "totalCount",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "lastPage": {
            "type": "boolean",
            "description": "Indicates if this is the last page within the paginationData."
          },
          "firstPage": {
            "type": "boolean",
            "description": "Indicates if this is the first page within the paginationData."
          },
          "pageLimit": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Maximum number of pages to return. Numeric, between 1 and 100.",
            "example": "50"
          },
          "startIndex": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Page start location. Must be numeric.",
            "example": "1"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of decisions available.",
            "format": "int64",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for the result set, based on pageLimit provided.",
            "format": "int32",
            "example": 1
          },
          "recordCount": {
            "type": "integer",
            "description": "Total number of decisions returned in the response.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Pagination details for this request."
      },
      "PreEvalDecisionRequest-2": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "PreEvalDecisionRequest-1": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "AlertTransactionOutcome-1": {
        "required": [
          "alertDetails",
          "decisionID",
          "decisionResponseTimeStamp",
          "notificationID",
          "transactionApproved"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "Decision ID corresponding to the alerts.",
            "example": "v-304-f1f11166-f3b3-4465-b995-61edb244c178"
          },
          "documentID": {
            "type": "string",
            "description": "Uniquely identifies the control document that triggered the notification.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "alertDetails": {
            "type": "array",
            "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present.",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-8"
            }
          },
          "notificationID": {
            "type": "string",
            "description": "Unique notification detail identifier.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-2"
          },
          "declineResponseCode": {
            "type": "string",
            "description": "Response code indicating why the transaction was declined.",
            "example": "50"
          },
          "transactionApproved": {
            "type": "string",
            "description": "Indicates if transaction was approved.",
            "example": "APPROVED",
            "enum": [
              "APPROVED",
              "DECLINED"
            ]
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was returned in UTC.",
            "example": "2023-05-25T18:45:55.000Z"
          }
        },
        "description": "Outcome of the transaction."
      },
      "PaginationData-2": {
        "required": [
          "firstPage",
          "lastPage",
          "pageLimit",
          "recordCount",
          "startIndex",
          "totalCount",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "lastPage": {
            "type": "boolean",
            "description": "Indicates if this is the last page within the paginationData."
          },
          "firstPage": {
            "type": "boolean",
            "description": "Indicates if this is the first page within the paginationData."
          },
          "pageLimit": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Maximum number of pages to return. Numeric, between 1 and 100.",
            "example": "50"
          },
          "startIndex": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Page start location. Must be numeric.",
            "example": "1"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of decisions available.",
            "format": "int64",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for the result set, based on pageLimit provided.",
            "format": "int32",
            "example": 1
          },
          "recordCount": {
            "type": "integer",
            "description": "Total number of decisions returned in the response.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Pagination details for this request."
      },
      "DecisionDocument-3": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody-3"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse-3"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "DateTimeRange-1": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "End time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using YYYY-MM-DD hh:mm:ss format.",
            "example": "2023-03-21T04:56:56.000Z"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using YYYY-MM-DD hh:mm:ss format.",
            "example": "2023-03-21T04:56:56.000Z"
          }
        },
        "description": "When provided, control will only be triggered when transaction takes place within the provided time range. Time data is stored in UTC: the application must first convert it from the cardholder's local time."
      },
      "DecisionDocument-2": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody-2"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse-2"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "MerchantOverrideableControl": {
        "required": [
          "controlType",
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". When alertType is DECLINE_BY_ISSUER, the only valid controlType value is ALL.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry"
          },
          "impulseDelayEnd": {
            "type": "string",
            "description": "Time in UTC when impulseDelayPeriod expires. Value is calculated by adding the impulseDelayPeriod value to the impulseDelayStart value.",
            "readOnly": true,
            "example": "1319"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "impulseDelayStart": {
            "type": "string",
            "description": "Time in UTC the initial impulseDelayPeriod was received on a merchant control.",
            "readOnly": true,
            "example": "1319"
          },
          "impulseDelayPeriod": {
            "type": "string",
            "description": "Indicates the time merchantControls should be inactive. When autoRemoval is set to false, controls will continue to block transactions until impulse delay is removed. When autoRemoval is set to true, impulse is expired. No action is needed to unblock.",
            "example": "1439"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "impulseDelayRemaining": {
            "type": "string",
            "description": "Time remaining before the impulseDelayPeriod expires.",
            "readOnly": true,
            "example": "719"
          },
          "shouldTargetSpecificCard": {
            "type": "boolean",
            "description": "Indicates if card details are required. Card details will be used to locate a transaction control.",
            "readOnly": true
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        },
        "description": "List of merchant controls configured for the card."
      },
      "DecisionDocument-5": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody-5"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse-5"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "DecisionDocument-4": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody-4"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse-4"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "DecisionDocument-1": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody-1"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse-1"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "CollectionResourceTransactionControlReportsResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/TransactionControlReportsResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceSponsorConfigTransactionTypeCardEnquiryTransactionControlResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigTransactionTypeCardEnquiryTransactionControlResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceStatusResponseType-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/StatusResponseType-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "TransactionControlsConfiguration": {
        "required": [
          "countryCode",
          "currencyCode",
          "enrollmentNotificationCallBackSettings",
          "ruleCategories"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "ruleCategories": {
            "type": "array",
            "description": "Rule categories enabled for the Sponsor ID.",
            "items": {
              "type": "string",
              "description": "Rule categories enabled for the Sponsor ID.",
              "enum": [
                "PCT_GLOBAL",
                "PCT_TRANSACTION",
                "PCT_MERCHANT",
                "PCT_GEO",
                "PCT_GLOBAL",
                "PCT_MERCHANT",
                "PCT_TRANSACTION"
              ]
            }
          },
          "isFxAlertsAllowed": {
            "type": "boolean",
            "description": "Indicates if fx alerts feature is allowed.",
            "example": true
          },
          "isCardGroupAllowed": {
            "type": "boolean",
            "description": "Indicates if the issuer has subscribed (true) or not subscribed (false) for group control feature.",
            "example": true
          },
          "isTimeDelayAllowed": {
            "type": "boolean",
            "description": "Indicates if time delay feature is allowed.",
            "example": true
          },
          "isSpendLimitAllowed": {
            "type": "boolean",
            "description": "Indicates if spend limit control feature is allowed.",
            "example": true
          },
          "merchantControlTypes": {
            "type": "array",
            "description": "Types of controls enabled on merchant transactions.",
            "items": {
              "type": "string",
              "description": "Types of controls enabled on merchant transactions.",
              "enum": [
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_GAMBLING",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO",
                "MCT_DINING"
              ]
            }
          },
          "blackListForSpendLimit": {
            "type": "array",
            "description": "List of control types disabled for global spend limit in the deny list.",
            "items": {
              "type": "string",
              "description": "List of control types disabled for global spend limit in the deny list.",
              "enum": [
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CROSS_BORDER",
                "TCT_ATM_WITHDRAW",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR",
                "TCT_AFT",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT",
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_GAMBLING",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO",
                "MCT_DINING"
              ]
            }
          },
          "isMultiCurrencyAllowed": {
            "type": "boolean",
            "description": "Indicates if multi-currency control feature is allowed.",
            "example": true
          },
          "isDetokenizationAllowed": {
            "type": "boolean",
            "description": "Indicates if the PAN should be found (true) or not (false) from the Token.",
            "example": true
          },
          "isFlexMITRoutingEnabled": {
            "type": "boolean",
            "description": "Determines if the sponsor has enabled for VTC Flex MIT routing"
          },
          "transactionControlTypes": {
            "type": "array",
            "description": "Types of controls enabled on transactions.",
            "items": {
              "type": "string",
              "description": "Types of controls enabled on transactions.",
              "enum": [
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CROSS_BORDER",
                "TCT_ATM_WITHDRAW",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR",
                "TCT_AFT",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          },
          "isAlertOnReversalAllowed": {
            "type": "boolean",
            "description": "Indicates if the sponsor is enrolled in VTC alert on reversal.",
            "example": true
          },
          "isFilterByCountryAllowed": {
            "type": "boolean",
            "description": "Indicates if the filter by country feature is allowed.",
            "example": true
          },
          "isTokenDecouplingAllowed": {
            "type": "boolean",
            "description": "Indicates if the Token can be decoupled from the PAN."
          },
          "isLastMileDeliveryAllowed": {
            "type": "boolean",
            "description": "Indicates if sponsor is enrolled in Visa Transaction Alerts (VTA) last mile delivery program.",
            "example": true
          },
          "customMerchantControlTypes": {
            "type": "array",
            "description": "Types of custom controls enabled on merchant transactions.",
            "items": {
              "type": "string",
              "description": "Types of custom controls enabled on merchant transactions."
            }
          },
          "customAlertsPayloadSettings": {
            "$ref": "#/components/schemas/CustomAlertsPayloadSettings"
          },
          "isTimeDelayAutoRemovalAllowed": {
            "type": "boolean",
            "description": "Indicates if autoremoval of time delay feature is allowed.",
            "example": true
          },
          "enrollmentNotificationCallBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings-2"
          },
          "deEnrollmentNotificationCallBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings-2"
          }
        },
        "description": "Settings for transaction controls."
      },
      "NotificationDetailsContactPreferenceDetails-2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"Inactive\", default contact preferences will deliver last mile alerts to cardholder.",
            "example": "Active"
          },
          "message": {
            "type": "string",
            "description": "Transaction information sent to the cardholder as SMS, email, or push notification. ",
            "example": "No controls found for given time range."
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates if contact type has been verified by issuer. Contacts mapped to cardholder must be verified. Currently, VISA only supports the double opt in verification for SMS-type contacts if field is set to false. For any other contact type, Visa will not conduct additional verification. Issuer should only allow verified contacts to be used as contact preferences. Double opt in feature is not supported in sandbox. For last mile alert delivery testing in sandbox this field must be set to true.",
            "example": true
          },
          "contactType": {
            "type": "string",
            "description": "Channel to deliver alert message. Supported channels include SMS, Push, Email. (Only email is supported in sandbox.)",
            "example": "Email"
          },
          "contactValue": {
            "type": "string",
            "description": "Email address, phone number or device ID associated with contactType.",
            "example": "alexmiller@example.com"
          }
        },
        "description": "List of contacts associated with alert preference."
      },
      "NotificationDetailsContactPreferenceDetails-1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"InActive\", default contact preferences will deliver last mile alerts to cardholder.",
            "example": "Active"
          },
          "message": {
            "type": "string",
            "description": "Transaction information sent to the cardholder as SMS, email, or push notification. ",
            "example": "No controls found for given time range."
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates if contact type has been verified by issuer. Contacts mapped to cardholder must be verified. Currently, VISA only supports the double opt in verification for SMS-type contacts if field is set to false. For any other contact type, Visa will not conduct additional verification. Issuer should only allow verified contacts to be used as contact preferences. Double opt in feature is not supported in sandbox. For last mile alert delivery testing in sandbox this field must be set to true.",
            "example": true
          },
          "contactType": {
            "type": "string",
            "description": "Channel to deliver alert message. Supported channels include SMS, Push, Email. (Only email is supported in sandbox.)",
            "example": "Email"
          },
          "contactValue": {
            "type": "string",
            "description": "Email address, phone number or device ID associated with contactType.",
            "example": "alexmiller@example.com"
          }
        },
        "description": "List of contacts associated with alert preference."
      },
      "CollectionResourceOfGetDecisionDocument-2": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-2"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CreatedCustomerProfileDocument": {
        "required": [
          "createdOnDate",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC."
          },
          "userIdentifier": {
            "type": "string",
            "description": "Unique identifier for the cardholder"
          }
        }
      },
      "CollectionResourceStatusResponseType": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/StatusResponseType"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfGetDecisionDocument-1": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "DecisionHistoryResponse-6": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-6"
            }
          }
        }
      },
      "DecisionHistoryResponse-5": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-5"
            }
          }
        }
      },
      "DecisionHistoryResponse-4": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-4"
            }
          }
        }
      },
      "EnrolledCard-1": {
        "required": [
          "accountIdentifier"
        ],
        "type": "object",
        "properties": {
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "accountIdentifier": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card number to be enrolled in VTC. Can be PAN, bank account number or token.",
            "example": "4000123456789010"
          }
        },
        "description": "List of valid cards added to be enrolled."
      },
      "CollectionResourceCreatedCustomerProfileDocument": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CreatedCustomerProfileDocument"
          },
          "receivedTimestamp": {
            "type": "string"
          },
          "processingTimeinMs": {
            "type": "integer"
          }
        }
      },
      "CardInquiryRequest": {
        "required": [
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card account number for which the control details are to be returned.",
            "example": "4000123456789010"
          }
        }
      },
      "SummaryInquiryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of control document.",
            "example": "ACTIVE"
          },
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token (first and last four digit unmasked) for which list of the transaction control documents have been retrieved.",
            "example": "4000-xxxx-xxxx-9010"
          },
          "controlDocuments": {
            "type": "array",
            "description": "List of transaction control documents.",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument"
            }
          },
          "allAvailableControls": {
            "$ref": "#/components/schemas/AllAvailableControls"
          },
          "primaryAccountNumber": {
            "type": "string",
            "description": "Primary account number (first digit and last four digits unmasked) for which list of the transaction control documents have been retrieved.",
            "example": "4000-xxxx-xxxx-9010"
          }
        },
        "description": "List of controls and alerts configured/available for a given PAN, token, or documentID."
      },
      "ExchangeRateDetails-1": {
        "type": "object",
        "properties": {
          "fxStatus": {
            "type": "string",
            "description": "Indicates if FX_ALERT was complete.",
            "example": "COMPLETE"
          },
          "pfxIndicator": {
            "type": "string",
            "description": "Indicates if transaction is eligible for the exchange rate to persist from processing to clearing or if a rate was applied for a full financial transaction (0220/0420).",
            "readOnly": true,
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE",
              "APPLIED"
            ]
          },
          "visaExchangeRate": {
            "type": "number",
            "description": "Exchange rate provided by VIP in the authorization message.",
            "format": "double",
            "example": 0.05
          },
          "billerCurrencyCode": {
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "readOnly": true,
            "example": "840"
          },
          "exchangeRateMarkUp": {
            "type": "number",
            "description": "Calculated exchange rate mark up.",
            "format": "double",
            "example": 0.58
          },
          "ecbExchangeRateInfo": {
            "$ref": "#/components/schemas/EcbExchangeRateInfo-1"
          },
          "fxRateTableIdentifier": {
            "type": "string",
            "description": "5-byte Rate Table ID performing all required multi-currency processing (format 1-alpha, 4-numeric).",
            "readOnly": true,
            "example": "a0000"
          }
        },
        "description": "Exchange rate details provided in the notification payload for a cross-currency transaction when Issuer has configured FX Alerts."
      },
      "BulkEnrollmentResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the call: Success, Partial_Success or Failure.",
            "example": "SUCCESS"
          },
          "disqualifyingCards": {
            "type": "array",
            "description": "List of disqualifying cards. These cards were not eligible to be added to the group, and will be returned in the response with partial success. HTTP status code will be 207. DisqualifyingCards will not be visible when HTTP status code is 200.",
            "items": {
              "$ref": "#/components/schemas/CardListDescription"
            }
          }
        }
      },
      "ContactPreferenceDetails": {
        "required": [
          "contactType",
          "contactValue"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. Valid values are \"Active\" and \"InActive\". If set to \"InActive\", default contact preferences will deliver last mile alerts to the cardholder.",
            "example": "Active"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates if the contact type has been verified by the issuer. Contacts mapped to cardholder must be verified. For SMS-type contacts, VISA only supports double opt-in verification if this field is set to false. For other contact types, Visa will not conduct additional verification. Issuers should only allow verified contacts to be used as contact preferences. The double opt-in feature is not supported in sandbox. For last mile alert delivery testing in sandbox, this field must be set to true.",
            "example": true
          },
          "callingCode": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "\\d{1,3}",
            "type": "string",
            "description": "Code for SMS contact types. If not set for an SMS contact, default value is \"1\".",
            "example": "52"
          },
          "contactType": {
            "type": "string",
            "description": "Channel to deliver alert message. Supported channels include SMS, Push, Email. (Only email is supported in sandbox.)",
            "example": "Email"
          },
          "contactValue": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "Email address, phone number or device ID associated with contactType.",
            "example": "alexmiller@example.com"
          },
          "preferredEmailFormat": {
            "type": "string",
            "description": "Preferred email format for email contact types. If not provided for an email contact, default value is set to \"Plain\".",
            "example": "Plain",
            "enum": [
              "Plain",
              "RichText",
              "Html"
            ]
          }
        },
        "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact."
      },
      "CollectionResourceCustomerProfileDocument": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CustomerProfileDocument"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "WhiteListAppTransactionControlsConfiguration": {
        "required": [
          "rulesConfiguration"
        ],
        "type": "object",
        "properties": {
          "isFxAlertsAllowed": {
            "type": "boolean",
            "description": "Indicates if fx alerts feature is allowed.",
            "example": true
          },
          "isCardGroupAllowed": {
            "type": "boolean",
            "description": "Indicates if the issuer has subscribed (true) or not subscribed (false) for group control feature.",
            "example": true
          },
          "isTimeDelayAllowed": {
            "type": "boolean",
            "description": "Indicates if time delay feature is allowed.",
            "example": true
          },
          "rulesConfiguration": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RulesConfiguration"
            }
          },
          "isSpendLimitAllowed": {
            "type": "boolean",
            "description": "Indicates if spend limit control feature is allowed.",
            "example": true
          },
          "merchantControlTypes": {
            "type": "array",
            "description": "Types of controls enabled on merchant transactions.",
            "items": {
              "type": "string",
              "description": "Types of controls enabled on merchant transactions.",
              "enum": [
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_GAMBLING",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO",
                "MCT_DINING"
              ]
            }
          },
          "blackListForSpendLimit": {
            "type": "array",
            "description": "List of control types disabled for global spend limit in the deny list.",
            "items": {
              "type": "string",
              "description": "List of control types disabled for global spend limit in the deny list.",
              "enum": [
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CROSS_BORDER",
                "TCT_ATM_WITHDRAW",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR",
                "TCT_AFT",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT",
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_GAMBLING",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO",
                "MCT_DINING"
              ]
            }
          },
          "isMultiCurrencyAllowed": {
            "type": "boolean",
            "description": "Indicates if multi-currency control feature is allowed.",
            "example": true
          },
          "isDetokenizationAllowed": {
            "type": "boolean",
            "description": "Indicates if the PAN should be found (true) or not (false) from the Token.",
            "example": true
          },
          "isFlexMITRoutingEnabled": {
            "type": "boolean",
            "description": "Determines if the sponsor has enabled for VTC Flex MIT routing"
          },
          "transactionControlTypes": {
            "type": "array",
            "description": "Types of controls enabled on transactions.",
            "items": {
              "type": "string",
              "description": "Types of controls enabled on transactions.",
              "enum": [
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CROSS_BORDER",
                "TCT_ATM_WITHDRAW",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR",
                "TCT_AFT",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          },
          "isAlertOnReversalAllowed": {
            "type": "boolean",
            "description": "Indicates if the sponsor is enrolled in VTC alert on reversal.",
            "example": true
          },
          "isFilterByCountryAllowed": {
            "type": "boolean",
            "description": "Indicates if the filter by country feature is allowed.",
            "example": true
          },
          "isTokenDecouplingAllowed": {
            "type": "boolean",
            "description": "Indicates if the Token can be decoupled from the PAN."
          },
          "isLastMileDeliveryAllowed": {
            "type": "boolean",
            "description": "Indicates if sponsor is enrolled in Visa Transaction Alerts (VTA) last mile delivery program.",
            "example": true
          },
          "customMerchantControlTypes": {
            "type": "array",
            "description": "Types of custom controls enabled on merchant transactions.",
            "items": {
              "type": "string",
              "description": "Types of custom controls enabled on merchant transactions."
            }
          },
          "customAlertsPayloadSettings": {
            "$ref": "#/components/schemas/CustomAlertsPayloadSettings"
          },
          "isTimeDelayAutoRemovalAllowed": {
            "type": "boolean",
            "description": "Indicates if autoremoval of time delay feature is allowed.",
            "example": true
          }
        },
        "description": "Default settings for the allowlist."
      },
      "TypedGroupControl-1": {
        "required": [
          "controlType"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-2"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-2"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAWAL",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-2"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-2"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          }
        },
        "description": "List of transaction controls configured for the card."
      },
      "AppConfigurationCallBackSettingsResponseType": {
        "required": [
          "callBackSettings",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of callback configuration.",
            "example": "CONFIGURED",
            "enum": [
              "NOT_CONFIGURED",
              "CONFIGURED"
            ]
          },
          "callBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "AllAvailableControls": {
        "type": "object",
        "properties": {
          "ruleCategories": {
            "type": "array",
            "description": "Allowed rule categories configured for this Sponsor ID.",
            "example": "PCT_GLOBAL",
            "items": {
              "type": "string",
              "description": "Allowed rule categories configured for this Sponsor ID.",
              "example": "PCT_GLOBAL",
              "enum": [
                "PCT_GLOBAL",
                "PCT_TRANSACTION",
                "PCT_MERCHANT"
              ]
            }
          },
          "merchantTypeRules": {
            "type": "array",
            "description": "Allowed merchant control types configured for this Sponsor ID.",
            "example": "MCT_AIRFARE",
            "items": {
              "type": "string",
              "description": "Allowed merchant control types configured for this Sponsor ID.",
              "example": "MCT_AIRFARE",
              "enum": [
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAMBLING",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO",
                "MCT_DINING"
              ]
            }
          },
          "transactionTypeRules": {
            "type": "array",
            "description": "Allowed merchant control types configured for this Sponsor ID.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Allowed merchant control types configured for this Sponsor ID.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT",
                "TCT_AFT"
              ]
            }
          }
        },
        "description": "List of all rules and control types available for the given primaryAccountNumber or documentID."
      },
      "NotificationDetailsV2-1": {
        "required": [
          "notificationDetails"
        ],
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-2"
          },
          "notificationDetails": {
            "type": "array",
            "description": "List of notification details found for this request.",
            "items": {
              "$ref": "#/components/schemas/NotificationDetailsFound-1"
            }
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "CallBackSettings-1": {
        "required": [
          "callBackEndpoint",
          "isCallBackDisabled"
        ],
        "type": "object",
        "properties": {
          "payloadVersion": {
            "type": "string",
            "description": "Payload version to generate for this callback endpoint. Valid values are V1 or V3.",
            "example": "V1"
          },
          "callBackEndpoint": {
            "maxLength": 150,
            "minLength": 6,
            "type": "string",
            "description": "Alert notification callback URL.",
            "example": "https://issuer.api.com/sampleVCTChostprocessor/consumertransactioncontrols/enrollments"
          },
          "isCallBackDisabled": {
            "type": "boolean",
            "description": "Indicates if callback is turned on (false) or off (true)."
          },
          "iscallBackEndpointLocal": {
            "type": "boolean",
            "description": "Indicates if callback URL is on a local network. Default value is false. Sent via WSI."
          }
        },
        "description": "URL posted following card enrollment or de-enrollment."
      },
      "DecisionDocument-6": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody-6"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse-6"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "CallBackSettings-2": {
        "required": [
          "callBackEndpoint",
          "isCallBackDisabled"
        ],
        "type": "object",
        "properties": {
          "payloadVersion": {
            "type": "string",
            "description": "Payload version to generate for this callback endpoint. Valid values are V1 or V3.",
            "example": "V1"
          },
          "callBackEndpoint": {
            "maxLength": 150,
            "minLength": 6,
            "type": "string",
            "description": "Alert notification callback URL.",
            "example": "https://issuer.api.com/sampleVCTChostprocessor/consumertransactioncontrols/enrollments"
          },
          "isCallBackDisabled": {
            "type": "boolean",
            "description": "Indicates if callback is turned on (false) or off (true)."
          },
          "iscallBackEndpointLocal": {
            "type": "boolean",
            "description": "Indicates if callback URL is on a local network. Default value is false. Sent via WSI."
          }
        },
        "description": "URL posted following card enrollment or de-enrollment."
      },
      "DecoupleTokenRequest": {
        "required": [
          "shouldDecouple"
        ],
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control is to be established.",
            "example": "4000123456789010"
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to 'true' on an enrolled paymentToken the token will operate independently of the PAN's card controls. If set to 'true' on a primaryAccountNumber all related token transactions will be ignored by the PAN's card controls."
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number for which the control is to be established.",
            "example": "4000123456789010"
          }
        },
        "description": "Object indicating if the PAN or token should be decoupled.  Either the primaryAccountNumber or paymentToken field must be set."
      },
      "BulkEnrollmentResponse-1": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the call: Success, Partial_Success or Failure.",
            "example": "SUCCESS"
          },
          "disqualifyingCards": {
            "type": "array",
            "description": "List of disqualifying cards. These cards were not eligible to be added to the group, and will be returned in the response with partial success. HTTP status code will be 207. DisqualifyingCards will not be visible when HTTP status code is 200.",
            "items": {
              "$ref": "#/components/schemas/CardListDescription-1"
            }
          }
        }
      },
      "AlertOutboundCallDetailsV2-1": {
        "type": "object",
        "properties": {
          "errorDetails": {
            "type": "array",
            "description": "List of error details that occurred during request processing. Includes error codes and messages.",
            "items": {
              "$ref": "#/components/schemas/Error-1"
            }
          },
          "alertPreferences": {
            "$ref": "#/components/schemas/NotificationDetailsAlertPreferences-1"
          }
        },
        "description": "Outbound call details."
      },
      "AppConfigurationCallBackSettingsRequestType": {
        "required": [
          "callBackSettings"
        ],
        "type": "object",
        "properties": {
          "callBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings"
          },
          "fxCallBackSettings": {
            "$ref": "#/components/schemas/FxCallBackSettings"
          }
        }
      },
      "PaymentToken": {
        "title": "PaymentToken",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The token number for which the decision is to be made, must be between 13 and 19 numeric digits."
          },
          "tokenType": {
            "type": "string",
            "description": "The type of the token. Valid values are: 01, 02, 03, 04, 05, 06"
          },
          "requestorID": {
            "type": "string",
            "description": "The requestor id associated to the token."
          },
          "assuranceLevel": {
            "type": "string",
            "description": "The value that indicates the confidence level of the token to PAN/cardholder binding Maximum of 2 digits."
          },
          "expirationDate": {
            "type": "string",
            "description": "The token expiration date in yyyymm format. Maximum of 6 characters"
          }
        }
      },
      "TransactionControlDocument4CardInq-1": {
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC",
            "example": "2023-03-21 04:56:12.561"
          },
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl-8"
            }
          },
          "requestedAppID": {
            "type": "string",
            "description": "The requested App ID"
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-8"
            }
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl-8"
            }
          },
          "customMerchantControls": {
            "type": "array",
            "description": "List of custom merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-8"
            }
          }
        },
        "description": "Adding AppId to  Transaction Control Document for Card Inquiry API"
      },
      "AlertTransactionDetailsV2-1": {
        "required": [
          "billerCurrencyCode",
          "cardholderBillAmount",
          "nameOnCard",
          "requestReceivedTimeStamp"
        ],
        "type": "object",
        "properties": {
          "nameOnCard": {
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-2"
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "exchangeRateDetails": {
            "$ref": "#/components/schemas/ExchangeRateDetails-1"
          },
          "cardholderBillAmount": {
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "requestReceivedTimeStamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "'2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "maxLength": 72,
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Details of the transaction."
      },
      "MerchantInfo-3": {
        "required": [
          "countryCode",
          "currencyCode",
          "merchantCategoryCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "City where the merchant is located.",
            "example": "San Francisco"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Name of the merchant's business.",
            "example": "Alex Miller Bakery"
          },
          "region": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Two or three letter state or region code.",
            "example": "US"
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Five to nine digit postal/zip code for the merchant.",
            "example": "94105"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "addressLines": {
            "type": "array",
            "description": "Address of the merchant.",
            "example": "1000 Main Street San Francisco, CA 94105",
            "items": {
              "type": "string",
              "description": "Address of the merchant.",
              "example": "1000 Main Street San Francisco, CA 94105"
            }
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "acceptorTaxId": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "Merchant's Acceptor Tax ID.",
            "example": "123456789"
          },
          "anticipatedAmount": {
            "type": "number",
            "description": "The anticipated amount refers to the expected or estimated amount of money involved in a transaction",
            "example": 200
          },
          "transactionAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total transaction amount in local merchant currency.",
            "example": 200
          },
          "merchantAcquirerID": {
            "type": "string",
            "description": "The Merchant Acquirer ID is a unique identifier assigned to an acquiring bank or financial institution by Visa. This ID is used to identify the acquiring bank in the payment processing system, allowing for the routing and processing of transactions. ",
            "example": "45678"
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO 8583 four-digit merchant classification code identifying the merchant by their business line.",
            "example": "5542"
          },
          "cardAcceptorTerminalID": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "Terminal ID of the card acceptor.",
            "example": "45678"
          },
          "cardAcceptorIdentificationCode": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "Merchant card acceptor ID.",
            "example": "123456789"
          }
        },
        "description": "Merchant details."
      },
      "CollectionResourceSponsorConfigurationDocument": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigurationDocument"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21T04:56:12.551Z"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "PaginationData": {
        "required": [
          "firstPage",
          "lastPage",
          "pageLimit",
          "recordCount",
          "startIndex",
          "totalCount",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "lastPage": {
            "type": "boolean",
            "description": "Indicates if this is the last page within the paginationData."
          },
          "firstPage": {
            "type": "boolean",
            "description": "Indicates if this is the first page within the paginationData."
          },
          "pageLimit": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Maximum number of pages to return. Numeric, between 1 and 100.",
            "example": "50"
          },
          "startIndex": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Page start location. Must be numeric.",
            "example": "1"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of decisions available.",
            "format": "int64",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages for the result set, based on pageLimit provided.",
            "format": "int32",
            "example": 1
          },
          "recordCount": {
            "type": "integer",
            "description": "Total number of decisions returned in the response.",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Pagination details for this request."
      },
      "TypedGroupControl": {
        "required": [
          "controlType"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          }
        },
        "description": "List of transaction controls configured for the card."
      },
      "CollectionResourceOfRate": {
        "title": "CollectionResourceOfRate",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Rate"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "The time the request is received. Value is in UTC time"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "The processing time in milliseconds",
            "format": "int64"
          }
        }
      },
      "PagingControlInformation": {
        "required": [
          "pageLimit",
          "startIndex"
        ],
        "type": "object",
        "properties": {
          "pageLimit": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Maximum number of pages to return. Numeric, between 1 and 100.",
            "example": "50"
          },
          "startIndex": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Page start location. Must be numeric.",
            "example": "1"
          }
        },
        "description": "Paging control information."
      },
      "MerchantInfo-1": {
        "title": "MerchantInfo",
        "required": [
          "countryCode",
          "currencyCode",
          "merchantCategoryCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "City where the merchant is located.",
            "example": "San Francisco"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Name of the merchant's business.",
            "example": "Alex Miller Bakery"
          },
          "region": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Two or three letter state or region code.",
            "example": "US"
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Five to nine digit postal/zip code for the merchant.",
            "example": "94105"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "addressLines": {
            "type": "array",
            "description": "Address of the merchant.",
            "example": "1000 Main Street San Francisco, CA 94105",
            "items": {
              "type": "string",
              "description": "Address of the merchant.",
              "example": "1000 Main Street San Francisco, CA 94105"
            }
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "transactionAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total transaction amount in local merchant currency.",
            "example": 200
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO 8583 four-digit merchant classification code identifying the merchant by their business line.",
            "example": "5542"
          },
          "cardAcceptorTerminalID": {
            "minLength": 1,
            "type": "string",
            "description": "Terminal ID of the card acceptor.",
            "example": "45678"
          }
        }
      },
      "MerchantInfo-2": {
        "required": [
          "countryCode",
          "currencyCode",
          "merchantCategoryCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "City where the merchant is located.",
            "example": "San Francisco"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Name of the merchant's business.",
            "example": "Alex Miller Bakery"
          },
          "region": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Two or three letter state or region code.",
            "example": "US"
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Five to nine digit postal/zip code for the merchant.",
            "example": "94105"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "addressLines": {
            "type": "array",
            "description": "Address of the merchant.",
            "example": "1000 Main Street San Francisco, CA 94105",
            "items": {
              "type": "string",
              "description": "Address of the merchant.",
              "example": "1000 Main Street San Francisco, CA 94105"
            }
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "acceptorTaxId": {
            "minLength": 1,
            "type": "string",
            "description": "Merchant's Acceptor Tax ID.",
            "example": "123456789"
          },
          "anticipatedAmount": {
            "type": "number",
            "description": "The anticipated amount refers to the expected or estimated amount of money involved in a transaction",
            "example": 200
          },
          "transactionAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total transaction amount in local merchant currency.",
            "example": 200
          },
          "merchantAcquirerID": {
            "type": "string",
            "description": "The Merchant Acquirer ID is a unique identifier assigned to an acquiring bank or financial institution by Visa. This ID is used to identify the acquiring bank in the payment processing system, allowing for the routing and processing of transactions. ",
            "example": "45678"
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO 8583 four-digit merchant classification code identifying the merchant by their business line.",
            "example": "5542"
          },
          "cardAcceptorTerminalID": {
            "minLength": 1,
            "type": "string",
            "description": "Terminal ID of the card acceptor.",
            "example": "45678"
          },
          "cardAcceptorIdentificationCode": {
            "minLength": 1,
            "type": "string",
            "description": "Merchant card acceptor ID.",
            "example": "123456789"
          }
        },
        "description": "Merchant details."
      },
      "UserInformation": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9 ._-]*$",
            "type": "string",
            "description": "Name of the user who configured the control. Required if userInformation is present.",
            "example": "Alex Miller"
          },
          "bankingIdentifier": {
            "type": "string",
            "description": "Identifier for the issuer to map the username.",
            "example": "BI"
          },
          "applicationDefinedAttributes": {
            "type": "array",
            "description": "Application attributes defined by the issuer.",
            "example": "APP",
            "items": {
              "type": "string",
              "description": "Application attributes defined by the issuer.",
              "example": "APP"
            }
          }
        },
        "description": "Optional object to provide the ability to carry additional information about the user that defined the control"
      },
      "CustomerProfilePatchRequest-13": {
        "required": [
          "countryCode",
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredLanguage"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "enum": [
              true,
              false
            ]
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-2"
            }
          }
        }
      },
      "WalletServicesAccountInquiryRequest-1": {
        "type": "object",
        "properties": {
          "documentIDs": {
            "maxLength": 25,
            "uniqueItems": true,
            "type": "array",
            "description": "List of available transaction control documentIDs where configured rules are required.",
            "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]",
            "items": {
              "maxLength": 25,
              "type": "string",
              "description": "List of available transaction control documentIDs where configured rules are required.",
              "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]"
            }
          },
          "paymentTokens": {
            "maxLength": 19,
            "minLength": 13,
            "uniqueItems": true,
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "example": [
              "4000123456789010",
              "4000123456789011"
            ],
            "items": {
              "maxLength": 19,
              "minLength": 13,
              "type": "string",
              "description": "List of payment tokens with associated contact details.",
              "example": "[\"4000123456789010\",\"4000123456789011\"]"
            }
          },
          "primaryAccountNumbers": {
            "maxLength": 25,
            "uniqueItems": true,
            "type": "array",
            "description": "List of available primary account numbers where configured rules are required.",
            "example": [
              "4000123456789010",
              "4000123456789011"
            ],
            "items": {
              "maxLength": 25,
              "type": "string",
              "description": "List of available primary account numbers where configured rules are required.",
              "example": "[\"4000123456789010\",\"4000123456789011\"]"
            }
          }
        }
      },
      "CardContactInformation": {
        "required": [
          "alertsPreferences",
          "documentID",
          "isProfileActive"
        ],
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "readOnly": true,
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "readOnly": true
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences"
            }
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          }
        },
        "description": "List of payment tokens with associated contact details."
      },
      "CardEnquiryMerchantControlResponse-1": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Names of all merchant control types available for this card.",
            "example": "MCT_AIRFARE",
            "enum": [
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO"
            ]
          }
        },
        "description": "List of merchant control types available for this card.",
        "enum": [
          "MCT_ADULT_ENTERTAINMENT",
          "MCT_AIRFARE",
          "MCT_ALCOHOL",
          "MCT_APPAREL_AND_ACCESSORIES",
          "MCT_AUTOMOTIVE",
          "MCT_CAR_RENTAL",
          "MCT_ELECTRONICS",
          "MCT_SPORT_AND_RECREATION",
          "MCT_GAMBLING",
          "MCT_GAS_AND_PETROLEUM",
          "MCT_GROCERY",
          "MCT_HOTEL_AND_LODGING",
          "MCT_HOUSEHOLD",
          "MCT_PERSONAL_CARE",
          "MCT_SMOKE_AND_TOBACCO"
        ]
      },
      "TransactionControlReportsResponse-1": {
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-2"
          },
          "responseMessage": {
            "type": "string",
            "description": "Details relating to the management and outcome of the response message.",
            "example": "No controls found for given time range."
          },
          "controlDocuments": {
            "type": "array",
            "description": "List of transaction control documents.",
            "items": {
              "$ref": "#/components/schemas/TransactionControlReportsDocument-1"
            }
          }
        },
        "description": "Transaction control document being returned."
      },
      "AlertOutboundCallDetails-13": {
        "required": [
          "httpResponseCode",
          "httpVerb"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request.",
            "example": "SUCCESS"
          },
          "message": {
            "type": "string",
            "description": "Transaction information sent to the cardholder as SMS, email, or push notification. ",
            "example": "No controls found for given time range."
          },
          "httpVerb": {
            "type": "string",
            "description": "HTTP method used.",
            "example": "POST"
          },
          "errorDetails": {
            "type": "array",
            "description": "List of error details that occurred during request processing. Includes error codes and messages.",
            "items": {
              "$ref": "#/components/schemas/Error-1"
            }
          },
          "alertPreferences": {
            "$ref": "#/components/schemas/NotificationDetailsAlertPreferences-13"
          },
          "httpResponseCode": {
            "type": "integer",
            "description": "Three-digit HTTP code that provides information about request results.",
            "format": "int32",
            "example": 200
          }
        },
        "description": "Outbound call details."
      },
      "CreateTransactionControlRequestType": {
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          },
          "alertsEnrollmentDetails": {
            "$ref": "#/components/schemas/CustomerProfile"
          }
        }
      },
      "TimeRange-2": {
        "required": [
          "endTime",
          "startTime",
          "timeZoneID"
        ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "End time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using HH:MM format.",
            "example": "04:56"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. Formatted in 24hr time using HH:MM format.",
            "example": "04:56"
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time zone to be applied to related object in Area/Location format. For example: 'America/Denver' is in United States MST. If not provided, assumed to be UTC. timeZoneID can be applied within timeRange and spendLimit fields to affect endDateTime, startDateTime, endTime, and startTime fields.",
            "example": "UTC"
          }
        },
        "description": "When provided, control will only be triggered when transaction takes place within the provided time range. Time data is stored in UTC: the application must first convert it from the cardholder's local time."
      },
      "CollectionResourceTransactionControlListResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/TransactionControlListResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "TimeRange-1": {
        "title": "TimeRange",
        "required": [
          "endTime",
          "startTime",
          "timeZoneID"
        ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "End time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using HH:MM format.",
            "example": "04:56"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. Formatted in 24hr time using HH:MM format.",
            "example": "04:56"
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time zone to be applied to related object in Area/Location format. For example: 'America/Denver' is in United States MST. If not provided, assumed to be UTC. timeZoneID can be applied within timeRange and spendLimit fields to affect endDateTime, startDateTime, endTime, and startTime fields.",
            "example": "UTC"
          }
        }
      },
      "AlertTransactionDetails-2": {
        "required": [
          "billerCurrencyCode",
          "cardholderBillAmount",
          "nameOnCard",
          "requestReceivedTimeStamp"
        ],
        "type": "object",
        "properties": {
          "nameOnCard": {
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-3"
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "exchangeRateDetails": {
            "$ref": "#/components/schemas/ExchangeRateDetails-1"
          },
          "cardholderBillAmount": {
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "requestReceivedTimeStamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "'2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "maxLength": 72,
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Details of the transaction."
      },
      "AlertTransactionDetails-1": {
        "required": [
          "billerCurrencyCode",
          "cardholderBillAmount",
          "nameOnCard",
          "requestReceivedTimeStamp"
        ],
        "type": "object",
        "properties": {
          "nameOnCard": {
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-2"
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "exchangeRateDetails": {
            "$ref": "#/components/schemas/ExchangeRateDetails-1"
          },
          "cardholderBillAmount": {
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "requestReceivedTimeStamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "'2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "maxLength": 72,
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Details of the transaction."
      },
      "TransactionControlDocument4CardInq": {
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC",
            "example": "2023-03-21 04:56:12.561"
          },
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl"
            }
          },
          "requestedAppID": {
            "type": "string",
            "description": "The requested App ID"
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl"
            }
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl"
            }
          },
          "customMerchantControls": {
            "type": "array",
            "description": "List of custom merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl"
            }
          }
        },
        "description": "Adding AppId to  Transaction Control Document for Card Inquiry API"
      },
      "CollectionResourceNotificationDetailsV2": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/NotificationDetailsV2"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CTCSupportedEntitiesRequest-1": {
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          }
        }
      },
      "SummaryInquiryResponse-1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of control document.",
            "example": "ACTIVE"
          },
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token (first and last four digit unmasked) for which list of the transaction control documents have been retrieved.",
            "example": "4000-xxxx-xxxx-9010"
          },
          "controlDocuments": {
            "type": "array",
            "description": "List of transaction control documents.",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-8"
            }
          },
          "allAvailableControls": {
            "$ref": "#/components/schemas/AllAvailableControls-1"
          },
          "primaryAccountNumber": {
            "type": "string",
            "description": "Primary account number (first digit and last four digits unmasked) for which list of the transaction control documents have been retrieved.",
            "example": "4000-xxxx-xxxx-9010"
          }
        },
        "description": "List of controls and alerts configured/available for a given PAN, token, or documentID."
      },
      "CollectionResourceAccountUpdateResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/AccountUpdateResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received",
            "example": "2025-05-27 05:13:30.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "DecisionHistoryResponse-3": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-3"
            }
          }
        }
      },
      "DecisionHistoryResponse-2": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-2"
            }
          }
        }
      },
      "DecisionHistoryResponse-1": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-1"
            }
          }
        }
      },
      "NotificationDetailsFound": {
        "required": [
          "notificationId",
          "notificationStatus",
          "outBoundAlertsNotificationPayload"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string",
            "description": "Unique notification detail identifier.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "notificationStatus": {
            "type": "string",
            "description": "Notification status.",
            "example": "SUCCESSFULLY_SENT",
            "enum": [
              "SUCCESSFULLY_SENT",
              "CLIENT_ERROR",
              "SYSTEM_ERROR",
              "CONFIRMATION_PENDING"
            ]
          },
          "outboundCallDetails": {
            "$ref": "#/components/schemas/AlertOutboundCallDetailsV2"
          },
          "outBoundAlertsNotificationPayload": {
            "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayloadV2"
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "DecisionUpdateRequest": {
        "title": "DecisionUpdateRequest",
        "required": [
          "decisionType",
          "transactionApproved"
        ],
        "type": "object",
        "properties": {
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type",
            "enum": [
              "COMPLETE"
            ]
          },
          "transactionApproved": {
            "type": "string",
            "description": "The decision for the completed transaction",
            "enum": [
              "APPROVED",
              "DECLINED"
            ]
          },
          "isDeclineResultOfTransactionControl": {
            "type": "boolean",
            "description": "Indicates whether the decline decision is the result of the transaction control recommendation.  If not present true will be assumed"
          }
        }
      },
      "BaseControl": {
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase (cardholderBillAmount) for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase (cardholderBillAmount) for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          }
        },
        "description": "Used to set rules that apply to all transactions performed with this account."
      },
      "BaseControl-1": {
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-2"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-2"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-2"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-2"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          }
        },
        "description": "Used to set rules that apply to all transactions performed with this account."
      },
      "DecisionResponse": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "AlertPreferencesRequest-1": {
        "required": [
          "alertPreferences"
        ],
        "type": "object",
        "properties": {
          "alertPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-1"
            }
          }
        }
      },
      "WalletServicesAccountInquiryResponse": {
        "type": "object",
        "properties": {
          "accountInquiryResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryInquiryResponse"
            }
          }
        }
      },
      "EcbExchangeRateInfo-1": {
        "type": "object",
        "properties": {
          "exchangeRate": {
            "type": "number",
            "description": "ECB rate from the ECB table.",
            "format": "double",
            "example": 123.456
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC. Effective from the ECB table (batch date).",
            "example": "2023-05-25T18:45:55.000Z"
          }
        },
        "description": "ECB exchange rates and effective dates."
      },
      "DecisionRequest-1": {
        "title": "DecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "RuleDetailV2-1": {
        "required": [
          "appID",
          "controlTargetType",
          "ruleCategory",
          "ruleType"
        ],
        "type": "object",
        "properties": {
          "appID": {
            "type": "string",
            "description": "App ID for the control that triggered the alert/decline.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "appName": {
            "type": "string",
            "description": "App name for the control that triggered the alert/decline.",
            "example": "Issuer App"
          },
          "ruleType": {
            "type": "string",
            "description": "Rule type for the control that triggered the alert/decline.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "alertReason": {
            "type": "string",
            "description": "Reason for the alert. Only present in alertDetails.",
            "example": "DECLINE_TRANS_LIMIT",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_TRANS_LIMIT",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_ISSUER",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND"
            ]
          },
          "ruleCategory": {
            "type": "string",
            "description": "Rule category for the control that triggered the alert/decline.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "thresholdAmount": {
            "type": "number",
            "description": "Threshold amount for the control that triggered the alert/decline. Only present if thresholdAmount breach caused the trigger.",
            "format": "double",
            "example": 1000
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "controlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          }
        },
        "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present."
      },
      "SponsorConfigObject": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "The time the sponsor configuration was updated. Value is in UTC time"
          },
          "availableControlTypes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "isDetokenizationAllowed": {
            "type": "boolean",
            "description": "isDetokenizationAllowed determines if the Token needs to be deTokenized or not. If it's set to true, then in future we will call VTS to de-Tokenize the Token"
          },
          "isTokenDecouplingAllowed": {
            "type": "boolean",
            "description": "isDecouplingAllowed determines if the Token can be decoupled from a PAN or not."
          },
          "availablePaymentRuleTypes": {
            "type": "array",
            "description": "Control types available for the Sponsor/Issuer.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Control types available for the Sponsor/Issuer."
            }
          },
          "availableMerchantTypeRules": {
            "type": "array",
            "description": "List of merchant control types available for this card.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "List of merchant control types available for this card."
            }
          },
          "configuredPaymentRuleTypes": {
            "type": "array",
            "description": "Rule categories assigned to this card",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Rule categories assigned to this card"
            }
          },
          "configuredMerchantTypeRules": {
            "type": "array",
            "description": "Merchant control types assigned to the Sponsor/Issuer.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Merchant control types assigned to the Sponsor/Issuer."
            }
          },
          "availableTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types available for the Sponsor/Issuer.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Transaction control types available for the Sponsor/Issuer."
            }
          },
          "configuredTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types assigned to the Sponsor/Issuer.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Transaction control types assigned to the Sponsor/Issuer."
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "RuleDetailV2": {
        "required": [
          "controlTargetType",
          "ruleCategory",
          "ruleType",
          "triggeringAppID"
        ],
        "type": "object",
        "properties": {
          "appName": {
            "type": "string",
            "description": "App name for the control that triggered the alert/decline.",
            "example": "Issuer App"
          },
          "ruleType": {
            "type": "string",
            "description": "Rule type for the control that triggered the alert/decline.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "NONE"
            ]
          },
          "alertReason": {
            "type": "string",
            "description": "Reason for the alert. Only present in alertDetails.",
            "example": "DECLINE_TRANS_LIMIT",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_TRANS_LIMIT",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_ISSUER",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "NONE"
            ]
          },
          "ruleCategory": {
            "type": "string",
            "description": "Rule category for the control that triggered the alert/decline.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "thresholdAmount": {
            "type": "number",
            "description": "Threshold amount for the control that triggered the alert/decline. Only present if thresholdAmount breach caused the trigger.",
            "format": "double",
            "example": 1000
          },
          "triggeringAppID": {
            "type": "string",
            "description": "App ID for the control that triggered the alert/decline.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "controlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          }
        },
        "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present."
      },
      "CardEnquiryTransactionControlResponse": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Names of all control types available for this card.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          }
        },
        "description": "Transaction control types available for this card.",
        "enum": [
          "TCT_ATM_WITHDRAW",
          "TCT_AUTO_PAY",
          "TCT_BRICK_AND_MORTAR",
          "TCT_CROSS_BORDER",
          "TCT_E_COMMERCE",
          "TCT_CONTACTLESS",
          "TCT_PURCHASE_RETURN",
          "TCT_OCT"
        ]
      },
      "CollectionResourceTransactionControlDocument": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/TransactionControlDocument"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "SponsorMerchantControlsRequestType": {
        "required": [
          "merchantTypeRules"
        ],
        "type": "object",
        "properties": {
          "merchantTypeRules": {
            "type": "array",
            "description": "Merchant control types enabled for the Sponsor/Issuer.",
            "example": "[MCT_AIRFARE, MCT_GROCERY]",
            "items": {
              "type": "string",
              "description": "Merchant control types enabled for the Sponsor/Issuer.",
              "example": "[MCT_AIRFARE, MCT_GROCERY]",
              "enum": [
                "MCT_ADULT_ENTERTAINMENT, MCT_AIRFARE, MCT_ALCOHOL, MCT_APPAREL_AND_ACCESSORIES, MCT_AUTOMOTIVE, MCT_CAR_RENTAL, MCT_ELECTRONICS, MCT_SPORT_AND_RECREATION, MCT_GAMBLING, MCT_GAS_AND_PETROLEUM, MCT_GROCERY, MCT_HOTEL_AND_LODGING, MCT_HOUSEHOLD, MCT_PERSONAL_CARE, MCT_SMOKE_AND_TOBACCO, MCT_DINING"
              ]
            }
          }
        }
      },
      "SponsorConfigObject-1": {
        "required": [
          "availablePaymentRuleTypes",
          "cardEnrollmentCallbackSettings",
          "cardPrefixes",
          "configuredPaymentRuleTypes",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Configuration status."
          },
          "cardPrefixes": {
            "type": "array",
            "description": "List of card prefixes configured for this Sponsor ID",
            "items": {
              "required": [
                "cardProgramIdentifier",
                "cardType",
                "isVTCAllowed",
                "prefixRangeIdentifier",
                "prefixStartRange"
              ],
              "type": "object",
              "properties": {
                "cardType": {
                  "type": "string",
                  "description": "cardType required field."
                },
                "cardBrand": {
                  "type": "string",
                  "description": "Payment Network/Brand of the BIN or Card Range."
                },
                "isVTCAllowed": {
                  "type": "boolean",
                  "description": "Indicates if BINs are allowed to use VTC."
                },
                "prefixEndRange": {
                  "type": "string",
                  "description": "prefixEndRange not mandatory field between 4 to 12 digits. If provided must be of the same length as prefixStartRange"
                },
                "callBackSettings": {
                  "required": [
                    "callBackEndpoint",
                    "isCallBackDisabled"
                  ],
                  "type": "object",
                  "properties": {
                    "callBackEndpoint": {
                      "type": "string",
                      "description": "The alert notification callback URL, must be minimum 6, maximum of 150 charcters long"
                    },
                    "isCallBackDisabled": {
                      "type": "boolean",
                      "description": "This value indicates whether callback is turned on(false), or off(true)"
                    },
                    "iscallBackEndpointLocal": {
                      "type": "boolean",
                      "description": "This value indicates whether callback URL is on a local network, Default is false will be send via WSI"
                    }
                  },
                  "description": "URL of the card enrollment service that will be posted when a new card is enrolled or de-enrolled"
                },
                "prefixStartRange": {
                  "type": "string",
                  "description": "prefixStartRange required field between 4 to 12 digits"
                },
                "cardProgramIdentifier": {
                  "type": "string",
                  "description": "BIN or Card Range enabled by the Sponsor/Issuer."
                },
                "prefixRangeIdentifier": {
                  "type": "string",
                  "description": "prefixRangeIdentifier required field."
                }
              }
            }
          },
          "availablePaymentRuleTypes": {
            "type": "array",
            "description": "Available Rule categories configured for this Sponsor ID",
            "items": {
              "type": "string",
              "enum": [
                "PCT_GLOBAL",
                "PCT_TRANSACTION",
                "PCT_MERCHANT",
                "PCT_AGENT"
              ]
            }
          },
          "configuredPaymentRuleTypes": {
            "type": "array",
            "description": "Configured Rule categories configured for this Sponsor ID",
            "items": {
              "type": "string",
              "enum": [
                "PCT_GLOBAL",
                "PCT_TRANSACTION",
                "PCT_MERCHANT"
              ]
            }
          },
          "cardEnrollmentCallbackSettings": {
            "required": [
              "callBackEndpoint",
              "isCallBackDisabled"
            ],
            "type": "object",
            "properties": {
              "payloadVersion": {
                "type": "string",
                "description": "Payload version to generate for this callback endpoint. Valid values are V1 or V3."
              },
              "callBackEndpoint": {
                "type": "string",
                "description": "The alert notification callback URL, must be minimum 6, maximum of 150 charcters long"
              },
              "isCallBackDisabled": {
                "type": "boolean",
                "description": "This value indicates whether callback is turned on(false), or off(true)"
              },
              "iscallBackEndpointLocal": {
                "type": "boolean",
                "description": "This value indicates whether callback URL is on a local network, Default is false will be send via WSI"
              }
            },
            "description": "URL of the card enrollment service that will be posted when a new card is enrolled or de-enrolled"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "AllAvailableControls-1": {
        "type": "object",
        "properties": {
          "ruleCategories": {
            "type": "array",
            "description": "Allowed rule categories configured for this Sponsor ID.",
            "example": "PCT_GLOBAL",
            "items": {
              "type": "string",
              "description": "Allowed rule categories configured for this Sponsor ID.",
              "example": "PCT_GLOBAL",
              "enum": [
                "PCT_GLOBAL",
                "PCT_TRANSACTION",
                "PCT_MERCHANT"
              ]
            },
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "merchantTypeRules": {
            "type": "array",
            "description": "Allowed merchant control types configured for this Sponsor ID.",
            "example": "MCT_AIRFARE",
            "items": {
              "type": "string",
              "description": "Allowed merchant control types configured for this Sponsor ID.",
              "example": "MCT_AIRFARE",
              "enum": [
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAMBLING",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO",
                "MCT_DINING",
                "MCT_ADULT_ENTERTAINMENT",
                "MCT_AIRFARE",
                "MCT_ALCOHOL",
                "MCT_APPAREL_AND_ACCESSORIES",
                "MCT_AUTOMOTIVE",
                "MCT_CAR_RENTAL",
                "MCT_ELECTRONICS",
                "MCT_SPORT_AND_RECREATION",
                "MCT_GAMBLING",
                "MCT_GAS_AND_PETROLEUM",
                "MCT_GROCERY",
                "MCT_HOTEL_AND_LODGING",
                "MCT_HOUSEHOLD",
                "MCT_PERSONAL_CARE",
                "MCT_SMOKE_AND_TOBACCO"
              ]
            },
            "enum": [
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO"
            ]
          },
          "transactionTypeRules": {
            "type": "array",
            "description": "Allowed merchant control types configured for this Sponsor ID.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Allowed merchant control types configured for this Sponsor ID.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CROSS_BORDER",
                "TCT_ATM_WITHDRAW",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR",
                "TCT_AFT",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT",
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            },
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          }
        },
        "description": "List of all rules and control types available for the given primaryAccountNumber or documentID."
      },
      "MerchantInfo": {
        "required": [
          "countryCode",
          "currencyCode",
          "merchantCategoryCode"
        ],
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "City where the merchant is located.",
            "example": "San Francisco"
          },
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Name of the merchant's business.",
            "example": "Alex Miller Bakery"
          },
          "region": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Two or three letter state or region code.",
            "example": "US"
          },
          "postalCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Five to nine digit postal/zip code for the merchant.",
            "example": "94105"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "addressLines": {
            "type": "array",
            "description": "Address of the merchant.",
            "example": "1000 Main Street San Francisco, CA 94105",
            "items": {
              "type": "string",
              "description": "Address of the merchant.",
              "example": "1000 Main Street San Francisco, CA 94105"
            }
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "acceptorTaxId": {
            "minLength": 1,
            "type": "string",
            "description": "Merchant's Acceptor Tax ID.",
            "example": "123456789"
          },
          "anticipatedAmount": {
            "type": "number",
            "description": "The anticipated amount refers to the expected or estimated amount of money involved in a transaction",
            "example": 200
          },
          "transactionAmount": {
            "type": "object",
            "description": "Total transaction amount in local merchant currency.",
            "example": "0.62"
          },
          "merchantAcquirerID": {
            "type": "string",
            "description": "The Merchant Acquirer ID is a unique identifier assigned to an acquiring bank or financial institution by Visa. This ID is used to identify the acquiring bank in the payment processing system, allowing for the routing and processing of transactions. ",
            "example": "45678"
          },
          "merchantCategoryCode": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO 8583 four-digit merchant classification code identifying the merchant by their business line.",
            "example": "5542"
          },
          "cardAcceptorTerminalID": {
            "minLength": 1,
            "type": "string",
            "description": "Terminal ID of the card acceptor.",
            "example": "45678"
          },
          "cardAcceptorIdentificationCode": {
            "minLength": 1,
            "type": "string",
            "description": "Merchant card acceptor ID.",
            "example": "123456789"
          }
        },
        "description": "Merchant details."
      },
      "TransactionControlListResponse": {
        "type": "object",
        "properties": {
          "controlDocuments": {
            "type": "array",
            "description": "List of transaction control documents.",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument4CardInq"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CreateTransactionControlRequestType-1": {
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          },
          "alertsEnrollmentDetails": {
            "$ref": "#/components/schemas/CustomerProfile-1"
          }
        }
      },
      "DecisionUpdateModel": {
        "title": "DecisionUpdateModel",
        "required": [
          "decisionType",
          "lastUpdateTimeStamp",
          "transactionApproved"
        ],
        "type": "object",
        "properties": {
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type",
            "enum": [
              "COMPLETE"
            ]
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This field will be set automatically when the decision update is received. Value is in UTC time."
          },
          "transactionApproved": {
            "type": "string",
            "description": "The decision for the completed transaction",
            "enum": [
              "APPROVED",
              "DECLINED"
            ]
          },
          "isDeclineResultOfTransactionControl": {
            "type": "boolean",
            "description": "Indicates whether the decline decision is the result of the transaction control recommendation.  If not present true will be assumed"
          }
        }
      },
      "AlertNotificationDeliveryCallbackPayloadV2-1": {
        "required": [
          "transactionDetails",
          "transactionOutcome",
          "transactionTypes"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "Enum for the type of transaction.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Enum for the type of transaction.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            },
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/AlertTransactionDetailsV2-1"
          },
          "transactionOutcome": {
            "$ref": "#/components/schemas/AlertTransactionOutcomeV2-1"
          }
        },
        "description": "Outbound alerts notification payload."
      },
      "NotificationDetailsFound-1": {
        "required": [
          "notificationId",
          "notificationStatus",
          "outBoundAlertsNotificationPayload"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string",
            "description": "Unique notification detail identifier.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "notificationStatus": {
            "type": "string",
            "description": "Notification status.",
            "example": "SUCCESSFULLY_SENT",
            "enum": [
              "SUCCESSFULLY_SENT",
              "CLIENT_ERROR",
              "SYSTEM_ERROR",
              "CONFIRMATION_PENDING"
            ]
          },
          "outboundCallDetails": {
            "$ref": "#/components/schemas/AlertOutboundCallDetailsV2-1"
          },
          "outBoundAlertsNotificationPayload": {
            "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayloadV2-1"
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "AppWhiteList": {
        "required": [
          "appID",
          "applicationName",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of application requesting to be enabled by the Sponsor/Issuer.",
            "example": "ISSUER"
          },
          "appID": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Identifier for the application requesting to be enabled by the Sponsor/Issuer.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "appType": {
            "type": "string"
          },
          "cardPrefixes": {
            "type": "array",
            "description": "List of card prefixes enabled for the Whitelisted App ID.",
            "items": {
              "$ref": "#/components/schemas/CardPrefixAppWhiteList"
            }
          },
          "applicationName": {
            "type": "string",
            "description": "Name of the application requesting to be enabled by the Sponsor/Issuer.",
            "example": "Visa Mobile App"
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2023-03-21T04:56:20.000Z"
          },
          "defaultWhiteListConfiguration": {
            "$ref": "#/components/schemas/WhiteListAppTransactionControlsConfiguration"
          }
        },
        "description": "List of app IDs enabled in the allowlist."
      },
      "AlertOutboundCallDetails": {
        "required": [
          "httpResponseCode",
          "httpVerb"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request.",
            "example": "SUCCESS"
          },
          "message": {
            "type": "string",
            "description": "Transaction information sent to the cardholder as SMS, email, or push notification. ",
            "example": "No controls found for given time range."
          },
          "httpVerb": {
            "type": "string",
            "description": "HTTP method used.",
            "example": "POST"
          },
          "errorDetails": {
            "type": "array",
            "description": "List of error details that occurred during request processing. Includes error codes and messages.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "alertPreferences": {
            "$ref": "#/components/schemas/NotificationDetailsAlertPreferences"
          },
          "httpResponseCode": {
            "type": "integer",
            "description": "Three-digit HTTP code that provides information about request results.",
            "format": "int32",
            "example": 200
          }
        },
        "description": "Outbound call details."
      },
      "CustomerProfileDocument-13": {
        "required": [
          "alertsPreferences",
          "cards",
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredCountryCode",
          "preferredLanguage",
          "tokens",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of PANs with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation-13"
            }
          },
          "tokens": {
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation-13"
            }
          },
          "lastName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "enum": [
              true,
              false
            ]
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-13"
            }
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "preferredCountryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Uppercase ISO ALPHA-3 3-letter country code. Currently only \"USA\" supported.",
            "example": "USA"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-2"
            }
          }
        }
      },
      "CollectionResourceTransactionControlDocument-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/TransactionControlDocument-8"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "FilterByCountry": {
        "type": "object",
        "properties": {
          "controlEnabledCountryList": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of countries where this control will be applied. Uppercase ISO 3166 3-letter country code.",
            "example": [
              "USA",
              "CAN",
              "GBR"
            ],
            "items": {
              "type": "string",
              "description": "List of countries where this control will be applied. Uppercase ISO 3166 3-letter country code.",
              "example": "USA"
            }
          },
          "controlDisabledCountryList": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of countries where this control will not be applied. Uppercase ISO 3166 3-letter country code.",
            "example": [
              "USA",
              "CAN",
              "GBR"
            ],
            "items": {
              "type": "string",
              "description": "List of countries where this control will not be applied. Uppercase ISO 3166 3-letter country code.",
              "example": "USA"
            }
          }
        },
        "description": "Allows cardholders to specify in which countries their card can, or cannot, be used depending on which child attribute is configured."
      },
      "FilterByCountry-1": {
        "title": "FilterByCountry",
        "type": "object",
        "properties": {
          "controlEnabledCountryList": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of countries where this control will be applied. Uppercase ISO 3166 3-letter country code.",
            "example": "[USA]",
            "items": {
              "type": "string",
              "description": "List of countries where this control will be applied. Uppercase ISO 3166 3-letter country code.",
              "example": "[USA]"
            }
          },
          "controlDisabledCountryList": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of countries where this control will not be applied. Uppercase ISO 3166 3-letter country code.",
            "example": "[USA]",
            "items": {
              "type": "string",
              "description": "List of countries where this control will not be applied. Uppercase ISO 3166 3-letter country code.",
              "example": "[USA]"
            }
          }
        }
      },
      "CollectionResourceVoid": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "type": "object",
            "properties": {},
            "description": "The response resource container. Contains information provided in the request body."
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CardDetail": {
        "type": "object",
        "properties": {
          "nameOnCard": {
            "maxLength": 26,
            "minLength": 0,
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "sequenceOnCard": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Card sequence number as encoded on the payment instrument.",
            "example": "003"
          }
        },
        "description": "Provide cardDetails to set up controls and restrict access based on cardholder name or card sequence number. If used, the processor must provide the same transaction data when invoking the decision request and the authorization engine will attempt to use the details to locate a transaction control. If the card data is not matched from the transaction data, the control will not affect the transaction."
      },
      "AlertOutboundCallDetails-1": {
        "required": [
          "httpResponseCode",
          "httpVerb"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request.",
            "example": "SUCCESS"
          },
          "message": {
            "type": "string",
            "description": "Transaction information sent to the cardholder as SMS, email, or push notification. ",
            "example": "No controls found for given time range."
          },
          "httpVerb": {
            "type": "string",
            "description": "HTTP method used.",
            "example": "POST"
          },
          "errorDetails": {
            "type": "array",
            "description": "List of error details that occurred during request processing. Includes error codes and messages.",
            "items": {
              "$ref": "#/components/schemas/Error-1"
            }
          },
          "alertPreferences": {
            "$ref": "#/components/schemas/NotificationDetailsAlertPreferences-1"
          },
          "httpResponseCode": {
            "type": "integer",
            "description": "Three-digit HTTP code that provides information about request results.",
            "format": "int32",
            "example": 200
          }
        },
        "description": "Outbound call details."
      },
      "StatusResponseType": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"InActive\", default contact preferences will deliver last mile alerts to cardholder."
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "NotificationInquiryRequestPayload": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/DateTimeRange"
          },
          "pagination": {
            "$ref": "#/components/schemas/PagingControlInformation"
          },
          "documentIds": {
            "type": "array",
            "description": "List of documentIDs for which Alert History is requested.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b",
            "items": {
              "type": "string",
              "description": "List of documentIDs for which Alert History is requested.",
              "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
            }
          },
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control is to be established.",
            "example": "4000123456789010"
          },
          "includeAlertDetails": {
            "type": "boolean",
            "description": "Indicates if alertDetails object will be populated in response. Defaults to false."
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "includeContactDetails": {
            "type": "boolean",
            "description": "Indicates if contacts object will be populated in response. Defaults to false."
          },
          "includeMerchantDetails": {
            "type": "boolean",
            "description": "Indicates if merchantInfo object will be populated in response. Defaults to false."
          }
        }
      },
      "FilterByCountry-2": {
        "type": "object",
        "properties": {
          "controlEnabledCountryList": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of countries where this control will be applied. Uppercase ISO 3166 3-letter country code.",
            "example": "[USA]",
            "items": {
              "type": "string",
              "description": "List of countries where this control will be applied. Uppercase ISO 3166 3-letter country code.",
              "example": "[USA]"
            }
          },
          "controlDisabledCountryList": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of countries where this control will not be applied. Uppercase ISO 3166 3-letter country code.",
            "example": "[USA]",
            "items": {
              "type": "string",
              "description": "List of countries where this control will not be applied. Uppercase ISO 3166 3-letter country code.",
              "example": "[USA]"
            }
          }
        },
        "description": "Allows cardholders to specify in which countries their card can, or cannot, be used depending on which child attribute is configured."
      },
      "AlertPreferences-13": {
        "required": [
          "alertType",
          "contacts",
          "controlType"
        ],
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of contacts associated with alert preference.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-2"
            }
          },
          "alertType": {
            "type": "string",
            "description": "Transaction events supported with generated alerts. ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "DECLINE_ALL",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "DECLINE_BY_ISSUER"
            ]
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAWAL",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "GLOBAL",
              "ALL"
            ]
          }
        },
        "description": "List of alert preferences for specific alert types."
      },
      "DecisionHistoryRequest": {
        "title": "DecisionHistoryRequest",
        "type": "object",
        "properties": {
          "documentIds": {
            "type": "array",
            "description": "The list of documentId of control document. All the documentIds must point to the same pan",
            "items": {
              "type": "string",
              "description": "The list of documentId of control document. All the documentIds must point to the same pan"
            }
          },
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationIndex"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for the list of documents, must be between 13 and 19 numeric digits"
          }
        },
        "description": "Get Decision History Page by Card - Request"
      },
      "SpendLimit": {
        "required": [
          "currentPeriodSpend",
          "declineThreshold",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Time period that the control spans. LMT_MONTH: until the end of that month. LMT_WEEK: 7-day period. LMT_DAY: 24 hour period. LMT_DATE_RANGE: date range specified in startDateTime and endDateTime. LMT_RECURRING: recurring period, number of days specified in recurringCycleTime.",
            "example": "LMT_WEEK",
            "enum": [
              "LMT_MONTH",
              "LMT_WEEK",
              "LMT_DAY",
              "LMT_DATE_RANGE",
              "LMT_RECURRING"
            ]
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time zone to be applied to related object in Area/Location format. For example: 'America/Denver' is in United States MST. If not provided, assumed to be UTC. timeZoneID can be applied within timeRange and spendLimit fields to affect endDateTime, startDateTime, endTime, and startTime fields.",
            "example": "UTC"
          },
          "endDateTime": {
            "type": "string",
            "description": "End date and time in UTC of a timeRange that bounds a control.",
            "example": "2025-06-21 04:56"
          },
          "startDateTime": {
            "type": "string",
            "description": "Starting date and time of a date and time range bounding a control, in the time zone set by the timeZoneID.",
            "example": "2025-06-21 03:51"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum total value of approved purchases within the time period before triggering an alert. Purchases that meet or exceed the limit set to this control type will not trigger another spendLimit alert until everything is reset when the next time period begins.",
            "format": "double",
            "example": 1000
          },
          "currentPeriodEnd": {
            "type": "string",
            "description": "Ending timestamp for current spending period in UTC.",
            "example": "2025-06-21 04:56:00"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum total value of approved purchases within the time period before triggering a decline.",
            "format": "double",
            "example": 1000
          },
          "currentPeriodSpend": {
            "type": "number",
            "description": "Total amount of all approved transactions performed within the time period for this control type. Reset once a new time period begins by the amount of the first transaction.",
            "format": "double",
            "example": 200
          },
          "recurringCycleTime": {
            "type": "integer",
            "description": "Number of days after which the currentPeriodSpend is reset and a new cycle begins. Required only when type = LMT_RECURRING; in all other cases, the field is optional and even if present, it will be ignored.",
            "format": "int32",
            "example": 366
          }
        },
        "description": "Used to track and manage total approved account purchases over a period of time. All amounts are based on the cardholderBillAmount in the authorization request. The actual amount submitted for settlement can differ (e.g. tips, hotel, car rental...)."
      },
      "AlertNotificationDeliveryCallbackPayloadV2": {
        "required": [
          "transactionDetails",
          "transactionOutcome",
          "transactionTypes"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "Enum for the type of transaction.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Enum for the type of transaction.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/AlertTransactionDetailsV2"
          },
          "transactionOutcome": {
            "$ref": "#/components/schemas/AlertTransactionOutcomeV2"
          }
        },
        "description": "Outbound alerts notification payload."
      },
      "NotificationInquiryRequestV2": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/DateTimeRange"
          },
          "pagination": {
            "$ref": "#/components/schemas/PagingControlInformation"
          },
          "documentIds": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "description": "List of documentIDs for which Alert History is requested.",
            "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]",
            "items": {
              "type": "string",
              "description": "List of documentIDs for which Alert History is requested.",
              "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]"
            }
          },
          "paymentTokens": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "example": [
              4000123456789010
            ],
            "items": {
              "type": "string",
              "description": "List of payment tokens with associated contact details.",
              "example": "[4000123456789010]"
            }
          },
          "includeAlertDetails": {
            "type": "boolean",
            "description": "Indicates if alertDetails object will be populated in response. Defaults to false."
          },
          "includeContactDetails": {
            "type": "boolean",
            "description": "Indicates if contacts object will be populated in response. Defaults to false."
          },
          "primaryAccountNumbers": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "description": "Card number for which alert history details are to be returned.",
            "example": [
              4000123456789010
            ],
            "items": {
              "maxLength": 10,
              "type": "string",
              "description": "Card number for which alert history details are to be returned.",
              "example": "[4000123456789010]"
            }
          },
          "includeMerchantDetails": {
            "type": "boolean",
            "description": "Indicates if merchantInfo object will be populated in response. Defaults to false."
          }
        },
        "description": "NotificationInquiryRequestPayload"
      },
      "CollectionResourceSponsorConfigObject": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigObject"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21T04:56:12.551Z"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "TransactionLimit": {
        "required": [
          "maxTransactionCount"
        ],
        "type": "object",
        "properties": {
          "maxTransactionCount": {
            "type": "integer",
            "description": "Number of transactions permitted. After the transaction count is reached, then subsequent transactions are declined. Counts apply to specific processing codes, on Visa processed transactions, and is limited to the Global control type.",
            "format": "int32",
            "example": 10
          },
          "currentTransactionCount": {
            "type": "integer",
            "description": "Total number of transactions approved since the start of this limit. Counts will apply where processing code is present, on Visa processed transactions. currentTransactionCount is limited for use only with the Global control type.",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Number of transactions to be allowed/approved, after which subsequent transactions will be declined."
      },
      "CardEnquiryTransactionControlResponse-1": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Names of all control types available for this card.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          }
        },
        "description": "Transaction control types available for this card.",
        "enum": [
          "TCT_ATM_WITHDRAW",
          "TCT_AUTO_PAY",
          "TCT_BRICK_AND_MORTAR",
          "TCT_CROSS_BORDER",
          "TCT_E_COMMERCE",
          "TCT_CONTACTLESS",
          "TCT_PURCHASE_RETURN",
          "TCT_OCT"
        ]
      },
      "NotificationDetails-1": {
        "required": [
          "notificationDetails"
        ],
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-2"
          },
          "notificationDetails": {
            "type": "array",
            "description": "List of notification details found for this request.",
            "items": {
              "$ref": "#/components/schemas/AlertNotifyDetail-1"
            }
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "Error-1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP error code. 3xx = Redirection, 4xx = Client Error, 5xx = Server Error.",
            "example": "400"
          },
          "reason": {
            "type": "string",
            "description": "Indicates reason for failure or error.",
            "example": "VTA Error"
          }
        },
        "description": "List of error details that occurred during request processing. Includes error codes and messages."
      },
      "StatusResponseType-1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"Inactive\", default contact preferences will deliver last mile alerts to cardholder."
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CollectionResourceWhiteListAppControlTypeObject": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WhiteListAppControlTypeObject"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21T04:56:12.551Z"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "PreEvalDecisionRequest": {
        "title": "PreEvalDecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "PREEVAL"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "CollectionResourceBulkDecoupleTokenResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/BulkDecoupleTokenResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CardInquiryRequest-1": {
        "required": [
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card account number for which the control details are to be returned.",
            "example": "4000123456789010"
          }
        }
      },
      "GroupTransactionControlRequest": {
        "type": "object",
        "properties": {
          "globalControl": {
            "$ref": "#/components/schemas/BaseControl"
          },
          "merchantControls": {
            "type": "array",
            "description": "If provided, includes the list of defined merchant controls that have been configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypedGroupControl"
            }
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypedGroupControl"
            }
          }
        },
        "description": "All control types to be applied to the list of cards being enrolled."
      },
      "SponsorTransactionControlsRequestType": {
        "required": [
          "transactionTypeRules"
        ],
        "type": "object",
        "properties": {
          "transactionTypeRules": {
            "type": "array",
            "description": "Transaction control types enabled for the Sponsor/Issuer.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Transaction control types enabled for the Sponsor/Issuer.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          }
        }
      },
      "FxCallBackSettings-1": {
        "required": [
          "callBackEndpoint",
          "isCallBackDisabled"
        ],
        "type": "object",
        "properties": {
          "payloadVersion": {
            "type": "string",
            "description": "Payload version to generate for this callback endpoint. Valid values are V1 or V3.",
            "example": "V1"
          },
          "callBackEndpoint": {
            "maxLength": 150,
            "minLength": 6,
            "type": "string",
            "description": "Alert notification callback URL.",
            "example": "https://issuer.api.com/sampleVCTChostprocessor/consumertransactioncontrols/enrollments"
          },
          "isCallBackDisabled": {
            "type": "boolean",
            "description": "Indicates if callback is turned on (false) or off (true)."
          },
          "iscallBackEndpointLocal": {
            "type": "boolean",
            "description": "Indicates if callback URL is on a local network. Default value is false. Sent via WSI."
          }
        },
        "description": "Alert notification fx callback settings."
      },
      "NotificationDetailsV2-13": {
        "required": [
          "notificationDetails"
        ],
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-2"
          },
          "notificationDetails": {
            "type": "array",
            "description": "List of notification details found for this request.",
            "items": {
              "$ref": "#/components/schemas/NotificationDetailsFound-13"
            }
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "TransactionControlReportsDocument-1": {
        "required": [
          "documentID"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"Inactive\", default contact preferences will deliver last mile alerts to cardholder.",
            "example": "ENROLLED",
            "enum": [
              "ENROLLED",
              "DEENROLLED",
              "ADD_CONTROLS",
              "UPDATE_CONTROLS",
              "DELETE_CONTROLS",
              "DELETE_CARD_EXCEPTION",
              "CARD_EXCEPTION",
              "DELETE_PAN",
              "UPDATE_PAN",
              "BATCH_ADD_CONTROLS",
              "UPDATE_TOKEN",
              "DELETE_TOKEN",
              "SYSTEM_UPDATE",
              "SYSTEM_CREATE",
              "SYSTEM_MODIFY",
              "SYSTEM_DELETE",
              "ADD_RELATIONSHIP",
              "UPDATE_RELATIONSHIP",
              "DELETE_RELATIONSHIP",
              "ADD_FLEX_RULES",
              "UPDATE_FLEX_RULES",
              "DELETE_FLEX_RULES",
              "DELETE_CARD",
              "UPDATE_CARD",
              "ADD_UPDATE_FLEX_RULES",
              "REPLACE_CARD"
            ]
          },
          "userId": {
            "type": "string",
            "description": "User ID of the person/system invoking the service.",
            "example": "1222"
          },
          "documentID": {
            "type": "string",
            "description": "Uniquely identifies the control document that triggered the notification.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "example": "2023-03-21 04:56:12.561"
          },
          "requestedAppID": {
            "type": "string",
            "description": "Unique ID assigned by VDP to identify a transaction control management application.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "requestedDocumentID": {
            "type": "string",
            "description": "System generated ID for the control document bound to the PAN or token.",
            "example": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6"
          },
          "transactionControlDocument": {
            "$ref": "#/components/schemas/TransactionControlDocument-8"
          }
        },
        "description": "List of transaction control documents."
      },
      "CardDetail-1": {
        "title": "CardDetail",
        "type": "object",
        "properties": {
          "nameOnCard": {
            "maxLength": 26,
            "minLength": 0,
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "sequenceOnCard": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Card sequence number as encoded on the payment instrument.",
            "example": "003"
          }
        }
      },
      "TimeRange": {
        "required": [
          "endTime",
          "startTime",
          "timeZoneID"
        ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "End time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using HH:MM format.",
            "example": "04:56"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. Formatted in 24hr time using HH:MM format.",
            "example": "04:56"
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time zone to be applied to related object in Area/Location format. For example: 'America/Denver' is in United States MST. If not provided, assumed to be UTC. timeZoneID can be applied within timeRange and spendLimit fields to affect endDateTime, startDateTime, endTime, and startTime fields.",
            "example": "UTC"
          }
        },
        "description": "When provided, control will only be triggered when transaction takes place within the provided time range. Time data is stored in UTC: the application must first convert it from the cardholder's local time."
      },
      "AlertPreferences-1": {
        "required": [
          "alertType",
          "contacts",
          "controlType"
        ],
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of contacts associated with alert preference.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-1"
            }
          },
          "alertType": {
            "type": "string",
            "description": "Transaction events supported with generated alerts. ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "DECLINE_ALL",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "DECLINE_BY_ISSUER"
            ]
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". When alertType is DECLINE_BY_ISSUER, the only valid controlType value is ALL.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "GLOBAL",
              "ALL"
            ]
          }
        },
        "description": "List of alert preferences for specific alert types."
      },
      "CardDetail-2": {
        "type": "object",
        "properties": {
          "nameOnCard": {
            "maxLength": 26,
            "minLength": 0,
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "sequenceOnCard": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Card sequence number as encoded on the payment instrument.",
            "example": "003"
          }
        },
        "description": "Provide cardDetails to set up controls and restrict access based on cardholder name or card sequence number. If used, the processor must provide the same transaction data when invoking the decision request and the authorization engine will attempt to use the details to locate a transaction control. If the card data is not matched from the transaction data, the control will not affect the transaction.",
        "readOnly": true
      },
      "ContactPreferenceDetails-2": {
        "required": [
          "contactType",
          "contactValue"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"InActive\", default contact preferences will deliver last mile alerts to cardholder.",
            "example": "Active"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates if contact type has been verified by issuer. Contacts mapped to cardholder must be verified. Currently, VISA only supports the double opt in verification for SMS-type contacts if field is set to false. For any other contact type, Visa will not conduct additional verification. Issuer should only allow verified contacts to be used as contact preferences. Double opt in feature is not supported in sandbox. For last mile alert delivery testing in sandbox this field must be set to true.",
            "example": true,
            "enum": [
              true,
              false
            ]
          },
          "callingCode": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "\\d{1,3}",
            "type": "string",
            "description": "Code for SMS contact types. If not set for an SMS contact, default value is \"1\".",
            "example": "52"
          },
          "contactType": {
            "type": "string",
            "description": "Channel to deliver alert message. Supported channels include SMS, Push, Email. (Only email is supported in sandbox.)",
            "example": "Email"
          },
          "contactValue": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "Email address, phone number or device ID associated with contactType.",
            "example": "alexmiller@example.com"
          },
          "preferredEmailFormat": {
            "type": "string",
            "description": "Preferred email format for email contact types. If not provided for an email contact, default value is set to \"Plain\".",
            "example": "Plain",
            "enum": [
              "Plain",
              "RichText",
              "Html"
            ]
          }
        },
        "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact."
      },
      "CustomerProfile-1": {
        "required": [
          "countryCode",
          "defaultAlertsPreferences",
          "firstName",
          "lastName",
          "preferredLanguage",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "communityCode": {
            "type": "string",
            "description": "Default community assigned by API. The default is the sponsor BID description.",
            "readOnly": true,
            "example": "123456789"
          },
          "userIdentifier": {
            "pattern": "(^[\\p{L}0-9_\\-.@]{0,72}$)",
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-2"
            }
          }
        },
        "description": "All alerts enrollment details for the cardholder, if enrolled for last mile delivery of alert notifications through VTA."
      },
      "CollectionResourceAppConfigurationCallBackSettingsResponseType": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/AppConfigurationCallBackSettingsResponseType"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "NotificationDetails-13": {
        "required": [
          "notificationDetails"
        ],
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-2"
          },
          "notificationDetails": {
            "type": "array",
            "description": "List of notification details found for this request.",
            "items": {
              "$ref": "#/components/schemas/AlertNotifyDetail-13"
            }
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "CollectionResourceAccountUpdateResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/AccountUpdateResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received",
            "example": "2025-05-27 05:13:30.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "SponsorRuleCategoryRequestType": {
        "required": [
          "ruleCategories"
        ],
        "type": "object",
        "properties": {
          "ruleCategories": {
            "type": "array",
            "description": "Allowed rule categories configured for this Sponsor ID.",
            "items": {
              "type": "string",
              "description": "Allowed rule categories configured for this Sponsor ID.",
              "enum": [
                "PCT_GLOBAL, PCT_TRANSACTION, PCT_MERCHANT"
              ]
            }
          }
        }
      },
      "DecoupleTokenResponseObject": {
        "required": [
          "index"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Index from request to correlate the response to.",
            "format": "int32",
            "example": 0
          },
          "reason": {
            "type": "string",
            "description": "Indicates reason for failure or error.",
            "example": "VTA Error"
          },
          "documentID": {
            "type": "string",
            "description": "Updated document ID.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code to be set on failure. Values that can be set here are 400, 403, 404, and 422.",
            "format": "int32",
            "example": 400
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          }
        },
        "description": "Object informing the status of the request.  The documentID field will be set when the request was successful.  On a failure, the statusCode and reason fields will be set"
      },
      "NotificationDetailsAlertPreferences-1": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of contacts associated with alert preference.",
            "items": {
              "$ref": "#/components/schemas/NotificationDetailsContactPreferenceDetails-1"
            }
          },
          "alertType": {
            "type": "string",
            "description": "Transaction events supported with generated alerts. ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "DECLINE_ALL",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "DECLINE_BY_ISSUER"
            ]
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAW"
          }
        }
      },
      "ContactPreferenceDetails-1": {
        "required": [
          "contactType",
          "contactValue"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. Valid values are \"Active\" and \"InActive\". If set to \"InActive\", default contact preferences will deliver last mile alerts to the cardholder.",
            "example": "Active"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates if the contact type has been verified by the issuer. Contacts mapped to cardholder must be verified. For SMS-type contacts, VISA only supports double opt-in verification if this field is set to false. For other contact types, Visa will not conduct additional verification. Issuers should only allow verified contacts to be used as contact preferences. The double opt-in feature is not supported in sandbox. For last mile alert delivery testing in sandbox, this field must be set to true.",
            "example": true,
            "enum": [
              true,
              false
            ]
          },
          "callingCode": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "\\d{1,3}",
            "type": "string",
            "description": "Code for SMS contact types. If not set for an SMS contact, default value is \"1\".",
            "example": "52"
          },
          "contactType": {
            "type": "string",
            "description": "Channel to deliver alert message. Supported channels include SMS, Push, Email. (Only email is supported in sandbox.)",
            "example": "Email"
          },
          "contactValue": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "Email address, phone number or device ID associated with contactType.",
            "example": "alexmiller@example.com"
          },
          "preferredEmailFormat": {
            "type": "string",
            "description": "Preferred email format for email contact types. If not provided for an email contact, default value is set to \"Plain\".",
            "example": "Plain",
            "enum": [
              "Plain",
              "RichText",
              "Html"
            ]
          }
        },
        "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact."
      },
      "CurrencyConversion-1": {
        "type": "object",
        "properties": {
          "convertedAmount": {
            "type": "number",
            "description": "Transaction amount, converted to the control-type currency using the Visa Exchange Rate.",
            "example": 100
          },
          "fromCurrencyCode": {
            "type": "string",
            "description": "Indicates the currency that was used to perform the conversion to the cardholder’s control currency.",
            "example": "840"
          },
          "visaExchangeRate": {
            "type": "string",
            "description": "The rate used by VisaNet to convert the transaction amount (field 4) to the cardholder billing amount (field 6) including the optional issuer fee (OIF).\nWhen a Client participates in multi-currency feature, this field includes the VisaNet rate used to convert the transaction/cardholder billing  amount to the currency of the control-type.",
            "example": "0.05"
          },
          "controlCurrencyCode": {
            "type": "string",
            "description": "Currency code that was defined for the control-type.",
            "example": "840"
          }
        },
        "description": "Currency conversion details. Sets a currency for the control type."
      },
      "AccountUpdateRequest-1": {
        "required": [
          "currentAccountID",
          "newAccountID"
        ],
        "type": "object",
        "properties": {
          "newAccountID": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "New account ID, between 13 and 19 digits.",
            "example": "4000123456789010"
          },
          "currentAccountID": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Current account ID, between 13 and 19 digits.",
            "example": "4000123456789010"
          }
        },
        "description": "Account update request"
      },
      "FxCallBackSettings": {
        "required": [
          "callBackEndpoint",
          "isCallBackDisabled"
        ],
        "type": "object",
        "properties": {
          "payloadVersion": {
            "type": "string",
            "description": "Payload version to generate for this callback endpoint. Valid values are V1 or V3.",
            "example": "V1"
          },
          "callBackEndpoint": {
            "maxLength": 150,
            "minLength": 6,
            "type": "string",
            "description": "Alert notification callback URL.",
            "example": "https://api.issuer.example/sampleVCTChostprocessor/consumertransactioncontrols/enrollments"
          },
          "isCallBackDisabled": {
            "type": "boolean",
            "description": "Indicates if callback is turned on (false) or off (true)."
          },
          "iscallBackEndpointLocal": {
            "type": "boolean",
            "description": "Indicates if callback URL is on a local network. Default value is false. Sent via WSI."
          }
        },
        "description": "Alert notification fx callback settings."
      },
      "BulkDecoupleTokenRequest": {
        "required": [
          "decoupleTokenRequest"
        ],
        "type": "object",
        "properties": {
          "decoupleTokenRequest": {
            "maxItems": 100,
            "minItems": 0,
            "type": "array",
            "description": "List of objects informing couple/decouple request. Minimum 1 object, maximum 100 objects.",
            "items": {
              "$ref": "#/components/schemas/DecoupleTokenRequest"
            }
          }
        }
      },
      "DecisionRequestBody": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "GetDecisionDocument": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument"
            }
          }
        }
      },
      "AlertNotifyDetail-13": {
        "required": [
          "outBoundAlertsNotificationPayload",
          "outboundCallDetails"
        ],
        "type": "object",
        "properties": {
          "outboundCallDetails": {
            "$ref": "#/components/schemas/AlertOutboundCallDetails-13"
          },
          "notificationDetailId": {
            "type": "string",
            "description": "Unique identifier used to locate a list of notification identifiers.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "outBoundAlertsNotificationPayload": {
            "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayload-13"
          }
        },
        "description": "List of notification details found for this request."
      },
      "AlertPreferencesRequest": {
        "required": [
          "alertPreferences"
        ],
        "type": "object",
        "properties": {
          "alertPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences"
            }
          }
        }
      },
      "CollectionResourceBulkDecoupleTokenResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/BulkDecoupleTokenResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "TransactionControlDocument-1": {
        "title": "TransactionControlDocument",
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC",
            "example": "2023-03-21 04:56:12.561"
          },
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl-1"
            }
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-1"
            }
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2023-03-21 04:56:20"
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl-1"
            }
          }
        }
      },
      "BulkEnrollmentRequest-1": {
        "required": [
          "controlRules",
          "enrolledCards",
          "forceEnrollment"
        ],
        "type": "object",
        "properties": {
          "cardsType": {
            "type": "string",
            "description": "Indicates if account is primaryAccountNumber or paymentToken. Valid values are PAN or token. If not provided, PAN is assumed.",
            "example": "PAN"
          },
          "controlRules": {
            "$ref": "#/components/schemas/GroupTransactionControlRequest-1"
          },
          "enrolledCards": {
            "maxItems": 80,
            "minItems": 1,
            "type": "array",
            "description": "List of valid cards added to be enrolled.",
            "items": {
              "$ref": "#/components/schemas/EnrolledCard-1"
            }
          },
          "forceEnrollment": {
            "type": "boolean",
            "description": "Indicates if the previously enrolled control document will be overwritten."
          }
        }
      },
      "CardContactInformation-1": {
        "required": [
          "alertsPreferences",
          "documentID",
          "isProfileActive"
        ],
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "readOnly": true,
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "readOnly": true,
            "enum": [
              true,
              false
            ]
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-1"
            }
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          }
        },
        "description": "List of payment tokens with associated contact details."
      },
      "CollectionResourceNotificationDetails": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/NotificationDetails"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "DecisionDocument": {
        "title": "DecisionDocument",
        "required": [
          "decisionID",
          "decisionRequest",
          "decisionResponse",
          "decisionUpdate",
          "primaryAccountNumber"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "The decisionID assigned to the decision request.  This value is generated by the API."
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "decisionUpdate": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "decisionRequest": {
            "$ref": "#/components/schemas/DecisionRequestBody"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponse"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionControlsnapshot": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument-1"
            }
          }
        }
      },
      "PagingControlInformation-1": {
        "required": [
          "pageLimit",
          "startIndex"
        ],
        "type": "object",
        "properties": {
          "pageLimit": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Maximum number of pages to return. Numeric, between 1 and 100.",
            "example": "50"
          },
          "startIndex": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Page start location. Must be numeric.",
            "example": "1"
          }
        },
        "description": "Paging control information."
      },
      "SponsorRuleCategoryType": {
        "required": [
          "ruleCategories"
        ],
        "type": "object",
        "properties": {
          "ruleCategories": {
            "type": "array",
            "description": "Allowed rule categories configured for this Sponsor ID.",
            "items": {
              "type": "string",
              "description": "Allowed rule categories configured for this Sponsor ID.",
              "enum": [
                "PCT_GLOBAL, PCT_TRANSACTION, PCT_MERCHANT"
              ]
            }
          },
          "isSpendLimitAllowed": {
            "type": "boolean",
            "description": "isSpendLimitAllowed is dependent on the sponsor whether it allows setting up spend limit control or not"
          },
          "isMultiCurrencyAllowed": {
            "type": "boolean",
            "description": "isMultiCurrencyAllowed flag determines if an sponsor allows multi currency controls."
          },
          "isFilterByCountryAllowed": {
            "type": "boolean",
            "description": "isFilterByCountryAllowed is dependent on the sponsor whether it allows setting up country enable or disabled list"
          },
          "cardEnrollmentCallbackSettings": {
            "$ref": "#/components/schemas/CallBackSettings-2"
          }
        }
      },
      "DateTimeRange": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "End time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using YYYY-MM-DD hh:mm:ss format.",
            "example": "2023-03-21T04:56:56.000Z"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using YYYY-MM-DD hh:mm:ss format.",
            "example": "2023-03-21T04:56:56.000Z"
          }
        },
        "description": "When provided, control will only be triggered when transaction takes place within the provided time range. Time data is stored in UTC: the application must first convert it from the cardholder's local time."
      },
      "CollectionResourceWalletServicesAccountInquiryResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WalletServicesAccountInquiryResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "WalletServicesAccountInquiryResponse-1": {
        "type": "object",
        "properties": {
          "accountInquiryResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryInquiryResponse-1"
            }
          }
        }
      },
      "CollectionResourceOfDecisionDocument": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "SponsorConfigControlTypeObject-1": {
        "required": [
          "lastUpdateTimeStamp"
        ],
        "type": "object",
        "properties": {
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated. Format: yyyy-MM-dd HH:mm:ss",
            "example": "2025-08-18 04:35:39"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "SponsorConfigControlTypeObject-2": {
        "required": [
          "lastUpdateTimeStamp"
        ],
        "type": "object",
        "properties": {
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the sponsor configuration document is updated. Value is in UTC time.",
            "example": "2025-08-21 02:51:43"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CollectionResourceNotificationDetailsV2-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/NotificationDetailsV2-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "DecoupleTokenResponseObject-1": {
        "required": [
          "index"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Index from request to correlate the response to.",
            "format": "int32",
            "example": 0
          },
          "reason": {
            "type": "string",
            "description": "Indicates reason for failure or error.",
            "example": "VTA Error"
          },
          "documentID": {
            "type": "string",
            "description": "Updated document ID.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code to be set on failure. Values that can be set here are 400, 403, 404, and 422.",
            "format": "int32",
            "example": 400
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          }
        },
        "description": "Object informing the status of the request.  The documentID field will be set when the request was successful.  On a failure, the statusCode and reason fields will be set"
      },
      "CollectionResourceOfDecisionResponseType": {
        "title": "CollectionResourceOfDecisionResponseType",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionResponseType"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CardContactInformation-13": {
        "required": [
          "alertsPreferences",
          "documentID",
          "isProfileActive"
        ],
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "readOnly": true,
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "readOnly": true,
            "enum": [
              true,
              false
            ]
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-13"
            }
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          }
        },
        "description": "List of payment tokens with associated contact details."
      },
      "DecisionResponseType": {
        "title": "DecisionResponseType",
        "required": [
          "decisionID"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "Unique ID assigned to this decision request"
          },
          "decisionResponse": {
            "$ref": "#/components/schemas/DecisionResponseReply"
          }
        }
      },
      "CollectionResourceSponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "BulkDecoupleTokenResponse-1": {
        "required": [
          "response",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the call: Success, Partial_Success or Failure.",
            "example": "Success",
            "enum": [
              "Success",
              "PartialSuccess",
              "Failed"
            ]
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecoupleTokenResponseObject-1"
            }
          }
        },
        "description": "The response resource container. Contains status of operation and list of tokens to decouple."
      },
      "AlertTransactionOutcome": {
        "required": [
          "alertDetails",
          "decisionID",
          "decisionResponseTimeStamp",
          "notificationID",
          "transactionApproved"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "Decision ID corresponding to the alerts.",
            "example": "v-304-f1f11166-f3b3-4465-b995-61edb244c178"
          },
          "documentID": {
            "type": "string",
            "description": "Uniquely identifies the control document that triggered the notification.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "alertDetails": {
            "type": "array",
            "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present.",
            "items": {
              "$ref": "#/components/schemas/RuleDetail"
            }
          },
          "notificationID": {
            "type": "string",
            "description": "Unique notification detail identifier.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit"
          },
          "declineResponseCode": {
            "type": "string",
            "description": "Response code indicating why the transaction was declined.",
            "example": "50"
          },
          "transactionApproved": {
            "type": "string",
            "description": "Indicates if transaction was approved.",
            "example": "APPROVED",
            "enum": [
              "APPROVED",
              "DECLINED"
            ]
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was returned in UTC.",
            "example": "2023-05-25T18:45:55.000Z"
          }
        },
        "description": "Outcome of the transaction."
      },
      "FxInfo": {
        "title": "FxInfo",
        "type": "object",
        "properties": {
          "visaExchangeRate": {
            "type": "number",
            "description": "Contains the rate used by VisaNet to convert the transaction amount (field 4) to the cardholder billing amount (field 6) including the optional issuer fee (OIF).When a Client participates in multi-currency feature, this field includes the VisaNet rate used to convert the transaction/cardholder billing  amount to the currency of the control-type.",
            "format": "double",
            "example": 0.05
          },
          "crossCurrencyIndicator": {
            "type": "boolean",
            "description": "Indicates if this transaction is cross currency or not."
          }
        }
      },
      "TypeOverrideableControl": {
        "required": [
          "controlType",
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "shouldTargetSpecificCard": {
            "type": "boolean",
            "description": "Indicates if card details are required. Card details will be used to locate a transaction control.",
            "readOnly": true
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        },
        "description": "List of transaction controls configured for the card."
      },
      "WhiteListTransactionControlsRequestType": {
        "type": "object",
        "properties": {
          "transactionTypeRules": {
            "type": "array",
            "description": "Allowed merchant control types configured for this App ID.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Allowed merchant control types configured for this App ID.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW, TCT_AUTO_PAY, TCT_BRICK_AND_MORTAR, TCT_CROSS_BORDER, TCT_E_COMMERCE, TCT_CONTACTLESS, TCT_PURCHASE_RETURN, TCT_OCT"
              ]
            }
          }
        }
      },
      "TransactionControlDocument-8": {
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC",
            "example": "2025-05-13 04:09:18.799"
          },
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl-8"
            }
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-8"
            }
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-27 05:13:30"
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl-8"
            }
          },
          "customMerchantControls": {
            "type": "array",
            "description": "List of custom merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-8"
            }
          }
        }
      },
      "BulkEnrollmentRequest": {
        "required": [
          "controlRules",
          "enrolledCards",
          "forceEnrollment"
        ],
        "type": "object",
        "properties": {
          "cardsType": {
            "type": "string",
            "description": "Indicates if account is primaryAccountNumber or paymentToken. Valid values are PAN or token. If not provided, PAN is assumed.",
            "example": "PAN"
          },
          "controlRules": {
            "$ref": "#/components/schemas/GroupTransactionControlRequest"
          },
          "enrolledCards": {
            "maxItems": 80,
            "minItems": 1,
            "type": "array",
            "description": "List of valid cards added to be enrolled.",
            "items": {
              "$ref": "#/components/schemas/EnrolledCard"
            }
          },
          "forceEnrollment": {
            "type": "boolean",
            "description": "Indicates if the previously enrolled control document will be overwritten."
          }
        }
      },
      "TransactionControlListResponse-1": {
        "type": "object",
        "properties": {
          "controlDocuments": {
            "type": "array",
            "description": "List of transaction control documents.",
            "items": {
              "$ref": "#/components/schemas/TransactionControlDocument4CardInq-1"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CollectionResourceAppConfigurationCallBackSettingsResponseType-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/AppConfigurationCallBackSettingsResponseType-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "RuleDetail": {
        "required": [
          "ruleCategory",
          "ruleType",
          "triggeringAppID"
        ],
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string",
            "description": "Rule type for the control that triggered the alert/decline.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "NONE"
            ]
          },
          "alertReason": {
            "type": "string",
            "description": "Reason for the alert. Only present in alertDetails.",
            "example": "DECLINE_TRANS_LIMIT",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_TRANS_LIMIT",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_ISSUER",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "FX_ALERTS",
              "ALERT_BREACHED_AMT_REVERSAL"
            ]
          },
          "ruleCategory": {
            "type": "string",
            "description": "Rule category for the control that triggered the alert/decline.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "thresholdAmount": {
            "type": "number",
            "description": "Threshold amount for the control that triggered the alert/decline. Only present if thresholdAmount breach caused the trigger.",
            "format": "double",
            "example": 1000
          },
          "triggeringAppID": {
            "type": "string",
            "description": "App ID for the control that triggered the alert.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "controlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "currencyConversion": {
            "$ref": "#/components/schemas/CurrencyConversion"
          }
        },
        "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present."
      },
      "CollectionResourceOfDecisionHistoryResponse": {
        "title": "CollectionResourceOfDecisionHistoryResponse",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "WhiteListMerchantControlsRequestType": {
        "type": "object",
        "properties": {
          "merchantTypeRules": {
            "type": "array",
            "description": "Allowed merchant control types configured for this App ID.",
            "example": "[MCT_AIRFARE, MCT_GROCERY]",
            "items": {
              "type": "string",
              "description": "Allowed merchant control types configured for this App ID.",
              "example": "[MCT_AIRFARE, MCT_GROCERY]",
              "enum": [
                "MCT_ADULT_ENTERTAINMENT, MCT_AIRFARE, MCT_ALCOHOL, MCT_APPAREL_AND_ACCESSORIES, MCT_AUTOMOTIVE, MCT_CAR_RENTAL, MCT_ELECTRONICS, MCT_SPORT_AND_RECREATION, MCT_GAMBLING, MCT_GAS_AND_PETROLEUM, MCT_GROCERY, MCT_HOTEL_AND_LODGING, MCT_HOUSEHOLD, MCT_PERSONAL_CARE, MCT_SMOKE_AND_TOBACCO, MCT_DINING"
              ]
            }
          }
        }
      },
      "WhiteListRuleConfigRequestType": {
        "type": "object",
        "properties": {
          "rulesConfiguration": {
            "type": "array",
            "description": "Allowed rule categories configured for this Sponsor ID.",
            "items": {
              "$ref": "#/components/schemas/RulesConfiguration"
            }
          }
        }
      },
      "CustomerProfileFacade-10": {
        "required": [
          "countryCode",
          "defaultAlertsPreferences",
          "firstName",
          "lastName",
          "preferredLanguage",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "communityCode": {
            "type": "string",
            "description": "Default community assigned by API. The default is the sponsor BID description.",
            "readOnly": true,
            "example": "123456789"
          },
          "userIdentifier": {
            "pattern": "(^[\\p{L}0-9_\\-.@]{0,72}$)",
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-1"
            }
          }
        }
      },
      "CollectionResourceOfDecisionDocument-3": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument-3"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertOutboundCallDetailsV2-13": {
        "type": "object",
        "properties": {
          "errorDetails": {
            "type": "array",
            "description": "List of error details that occurred during request processing. Includes error codes and messages.",
            "items": {
              "$ref": "#/components/schemas/Error-1"
            }
          },
          "alertPreferences": {
            "$ref": "#/components/schemas/NotificationDetailsAlertPreferences-13"
          }
        },
        "description": "Outbound call details."
      },
      "CustomerProfileFacade-13": {
        "required": [
          "defaultAlertsPreferences",
          "firstName",
          "lastName",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "communityCode": {
            "type": "string",
            "description": "Default community assigned by API. The default is the sponsor BID description.",
            "readOnly": true,
            "example": "123456789"
          },
          "userIdentifier": {
            "pattern": "(^[\\p{L}0-9_\\-.@]{0,72}$)",
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-2"
            }
          }
        }
      },
      "CollectionResourceOfDecisionDocument-4": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument-4"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertTransactionDetails": {
        "required": [
          "billerCurrencyCode",
          "cardholderBillAmount",
          "nameOnCard",
          "requestReceivedTimeStamp"
        ],
        "type": "object",
        "properties": {
          "nameOnCard": {
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo"
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "exchangeRateDetails": {
            "$ref": "#/components/schemas/ExchangeRateDetails"
          },
          "cardholderBillAmount": {
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "requestReceivedTimeStamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "maxLength": 72,
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Details of the transaction."
      },
      "CollectionResourceOfDecisionDocument-5": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument-5"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionDocument-6": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument-6"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertNotifyDetail": {
        "required": [
          "outBoundAlertsNotificationPayload",
          "outboundCallDetails"
        ],
        "type": "object",
        "properties": {
          "outboundCallDetails": {
            "$ref": "#/components/schemas/AlertOutboundCallDetails"
          },
          "notificationDetailId": {
            "type": "string",
            "description": "Unique identifier used to locate a list of notification identifiers.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "outBoundAlertsNotificationPayload": {
            "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayload"
          }
        },
        "description": "List of notification details found for this request."
      },
      "NotificationDetailsAlertPreferences-13": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of contacts associated with alert preference.",
            "items": {
              "$ref": "#/components/schemas/NotificationDetailsContactPreferenceDetails-2"
            }
          },
          "alertType": {
            "type": "string",
            "description": "Transaction events supported with generated alerts. ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "DECLINE_ALL",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "DECLINE_BY_ISSUER"
            ]
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAWAL"
          }
        }
      },
      "CustomerProfileDocument": {
        "required": [
          "alertsPreferences",
          "cards",
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredCountryCode",
          "preferredLanguage",
          "tokens",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of PANs with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation"
            }
          },
          "tokens": {
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation"
            }
          },
          "lastName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered."
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AlertPreferences"
            }
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "preferredCountryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Uppercase ISO ALPHA-3 3-letter country code. Currently only \"USA\" supported.",
            "example": "USA"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails"
            }
          }
        }
      },
      "CardPrefixAppWhiteList": {
        "required": [
          "prefixStartRange",
          "whiteListConfiguration"
        ],
        "type": "object",
        "properties": {
          "cardType": {
            "type": "string"
          },
          "cardBrand": {
            "type": "string"
          },
          "isLeadPAN": {
            "type": "boolean",
            "description": "Indicates if the PAN is Lead PAN."
          },
          "sponsorBID": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]+)",
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "readOnly": true,
            "example": "003"
          },
          "currencyCode": {
            "type": "string"
          },
          "isVTCAllowed": {
            "type": "boolean",
            "description": "Indicates if BINs are allowed to use VTC."
          },
          "isFlexAllowed": {
            "type": "boolean",
            "description": "Indicates if the Flex feature is allowed."
          },
          "prefixEndRange": {
            "type": "string",
            "description": "Ending point of a valid range of card prefixes between 4 and 12 digits."
          },
          "prefixStartRange": {
            "type": "string",
            "description": "Starting point of a valid range of card prefixes between 4 and 12 digits."
          },
          "cardProgramIdentifier": {
            "type": "string",
            "description": "BIN or Card Range enabled  by the Sponsor/Issuer.",
            "example": "CONSUMER"
          },
          "prefixRangeIdentifier": {
            "type": "string",
            "description": "prefixRangeIdentifier not mandatory field."
          },
          "cardPrefixSponsorLevel": {
            "type": "boolean"
          },
          "isFlexReportingAllowed": {
            "type": "boolean",
            "description": "Indicates if BINs need to generate daily reports."
          },
          "whiteListConfiguration": {
            "$ref": "#/components/schemas/WhiteListAppTransactionControlsConfiguration"
          }
        },
        "description": "List of card prefixes enabled for the Whitelisted App ID."
      },
      "AlertPreferencesRequestV2-13": {
        "required": [
          "alertPreferences"
        ],
        "type": "object",
        "properties": {
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "(^[a-zA-Z0-9]*$)",
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "alertPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-13"
            }
          }
        }
      },
      "TransactionControlRequestType-1": {
        "type": "object",
        "properties": {
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl-8"
            }
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-8"
            }
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl-8"
            }
          },
          "customMerchantControls": {
            "type": "array",
            "description": "List of custom merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl-8"
            }
          }
        }
      },
      "RequestModelForTransactionControlsHistoryByTimeRange": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "description": "End date (YYYY-MM-DD) from which transaction control documents have to be returned.",
            "example": "2023-04-12T00:00:00.000Z"
          },
          "startDate": {
            "type": "string",
            "description": "Start date (YYYY-MM-DD) from which transaction control documents have to be returned.",
            "example": "2023-04-12T00:00:00.000Z"
          },
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card account number for which the control details are to be returned.",
            "example": "4000123456789010"
          }
        },
        "description": "Request model for Transaction Controls history by time range"
      },
      "DecisionResponseReply": {
        "title": "DecisionResponseReply",
        "required": [
          "decisionResponseTimeStamp",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "NotificationDetailsFound-13": {
        "required": [
          "notificationId",
          "notificationStatus",
          "outBoundAlertsNotificationPayload"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "string",
            "description": "Unique notification detail identifier.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "notificationStatus": {
            "type": "string",
            "description": "Notification status.",
            "example": "SUCCESSFULLY_SENT",
            "enum": [
              "SUCCESSFULLY_SENT",
              "CLIENT_ERROR",
              "SYSTEM_ERROR",
              "CONFIRMATION_PENDING"
            ]
          },
          "outboundCallDetails": {
            "$ref": "#/components/schemas/AlertOutboundCallDetailsV2-13"
          },
          "outBoundAlertsNotificationPayload": {
            "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayloadV2-13"
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "NotificationDetailsAlertPreferences": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of contacts associated with alert preference.",
            "items": {
              "$ref": "#/components/schemas/NotificationDetailsContactPreferenceDetails"
            }
          },
          "alertType": {
            "type": "string",
            "description": "Transaction events supported with generated alerts. ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "DECLINE_ALL",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "DECLINE_BY_ISSUER"
            ]
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAW"
          }
        }
      },
      "CTCSupportedEntitiesRequest": {
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          }
        }
      },
      "AlertTransactionOutcomeV2": {
        "required": [
          "decisionID",
          "decisionResponseTimeStamp",
          "documentID",
          "notificationID",
          "transactionApproved"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "Decision ID corresponding to the alerts.",
            "example": "v-304-f1f11166-f3b3-4465-b995-61edb244c178"
          },
          "documentID": {
            "type": "string",
            "description": "Uniquely identifies the control document that triggered the notification.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "alertDetails": {
            "type": "array",
            "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present.",
            "items": {
              "$ref": "#/components/schemas/RuleDetailV2"
            }
          },
          "notificationID": {
            "type": "string",
            "description": "Unique notification detail identifier.",
            "example": "ctc-vn-b157bd50-1a68-43d4-bb22-ad8e693fea1b"
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit"
          },
          "declineResponseCode": {
            "type": "string",
            "description": "Response code indicating why the transaction was declined.",
            "example": "50"
          },
          "transactionApproved": {
            "type": "string",
            "description": "Indicates if transaction was approved.",
            "example": "APPROVED",
            "enum": [
              "APPROVED",
              "DECLINED"
            ]
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was returned in UTC.",
            "example": "2023-05-25T18:45:55.000Z"
          }
        },
        "description": "Outcome of the transaction."
      },
      "WhiteListAppControlTypeObject": {
        "required": [
          "lastUpdateTimeStamp",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Configuration status",
            "enum": [
              "CONFIGURED,NOT_CONFIGURED"
            ]
          },
          "cardPrefixes": {
            "type": "array",
            "description": "Card Prefix List allowed for the Whitelisted App ID",
            "items": {
              "$ref": "#/components/schemas/CardPrefix"
            }
          },
          "isSpendLimitAllowed": {
            "type": "boolean",
            "description": "isSpendLimitAllowed is dependent on the sponsor whether it allows setting up spend limit control or not"
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This description = will be set automatically when the sponsor configuration document is updated. Value is in UTC time"
          },
          "detokenizationAllowed": {
            "type": "boolean"
          },
          "isMultiCurrencyAllowed": {
            "type": "boolean",
            "description": "isMultiCurrencyAllowed flag determines if an sponsor allows multi currency controls."
          },
          "tokenDecouplingAllowed": {
            "type": "boolean"
          },
          "isDetokenizationAllowed": {
            "type": "boolean",
            "description": "isDetokenizationAllowed determines if the Token needs to be deTokenized or not. If it's set to true, then in future we will call VTS to de-Tokenize the Token"
          },
          "isFilterByCountryAllowed": {
            "type": "boolean",
            "description": "isFilterByCountryAllowed is dependent on the sponsor whether it allows setting up enabled or disabled country list"
          },
          "isTokenDecouplingAllowed": {
            "type": "boolean",
            "description": "isTokenDecouplingAllowed determines if the Token can be decoupled from a PAN or not."
          },
          "availablePaymentRuleTypes": {
            "type": "array",
            "description": "Available Rule categories configured for this App ID. Rules Configuration contains the Rules Category, isAlertAllowed and isDeclineAllowed",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Available Rule categories configured for this App ID. Rules Configuration contains the Rules Category, isAlertAllowed and isDeclineAllowed"
            }
          },
          "availableMerchantTypeRules": {
            "type": "array",
            "description": "List of merchant control types available for this card.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "List of merchant control types available for this card."
            }
          },
          "configuredPaymentRuleTypes": {
            "type": "array",
            "description": "Configured Rule categories configured for this App ID. Rules Configuration contains the Rules Category, isAlertAllowed and isDeclineAllowed",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Configured Rule categories configured for this App ID. Rules Configuration contains the Rules Category, isAlertAllowed and isDeclineAllowed"
            }
          },
          "configuredMerchantTypeRules": {
            "type": "array",
            "description": "Merchant control types asigned to this whitelist appID",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Merchant control types asigned to this whitelist appID"
            }
          },
          "availableTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types available for this whitelist appID",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Transaction control types available for this whitelist appID"
            }
          },
          "configuredTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types assigned to this whitelist appID",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Transaction control types assigned to this whitelist appID"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CollectionResourceSponsorConfigControlTypeObject": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigControlTypeObject-5"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21T04:56:12.551Z"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "SponsorConfigControlTypeObject-5": {
        "required": [
          "lastUpdateTimeStamp"
        ],
        "type": "object",
        "properties": {
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the sponsor configuration document is updated. Format: yyyy-MM-dd HH:mm:ss",
            "example": "2025-08-18 04:33:10"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "SponsorConfigControlTypeObject-6": {
        "required": [
          "lastUpdateTimeStamp"
        ],
        "type": "object",
        "properties": {
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the sponsor configuration document is updated. Value is in UTC time.",
            "example": "2025-08-21 02:40:48"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "SponsorConfigControlTypeObject-3": {
        "required": [
          "availableTransactionTypeRules",
          "configuredTransactionTypeRules",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Configuration status."
          },
          "availableTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types available for the Sponsor/Issuer.",
            "items": {
              "type": "string",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          },
          "configuredTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types assigned to the Sponsor/Issuer.",
            "items": {
              "type": "string",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "OverrideableControl": {
        "required": [
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "shouldTargetSpecificCard": {
            "type": "boolean",
            "description": "Indicates if card details are required. Card details will be used to locate a transaction control.",
            "readOnly": true
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        },
        "description": "Used to set rules that apply to all transactions performed with this account."
      },
      "SponsorConfigControlTypeObject-4": {
        "required": [
          "lastUpdateTimeStamp"
        ],
        "type": "object",
        "properties": {
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the sponsor configuration document is updated. Value is in UTC time.",
            "example": "2025-08-21 03:06:12"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "DecisionRequestBody-5": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "DecisionRequestBody-4": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "NotificationDetails": {
        "required": [
          "notificationDetails"
        ],
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData"
          },
          "notificationDetails": {
            "type": "array",
            "description": "List of notification details found for this request.",
            "items": {
              "$ref": "#/components/schemas/AlertNotifyDetail"
            }
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "DecisionRequestBody-6": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "DecisionRequestBody-1": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "Rate": {
        "title": "Rate",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "toCurrencyCode": {
            "type": "string"
          },
          "exchangeRateECB": {
            "type": "string"
          },
          "lastUpdatedDate": {
            "type": "string"
          },
          "expiryDateTimeMs": {
            "type": "integer",
            "format": "int64"
          },
          "fromCurrencyCode": {
            "type": "string"
          }
        }
      },
      "DecisionRequestBody-3": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "TransactionControlDocument": {
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "System-generated ID for the control document bound to the account identifier (primaryAccountNumber/paymentToken).",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC",
            "example": "2025-05-13 04:09:18.799"
          },
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl"
            }
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to \"true\" on an enrolled paymentToken, the token will operate independently of the PAN's card controls. If set to \"true\" on a primaryAccountNumber, all related token transactions will be ignored by the PAN's card controls."
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl"
            }
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-27 05:13:30"
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl"
            }
          },
          "customMerchantControls": {
            "type": "array",
            "description": "List of custom merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl"
            }
          }
        }
      },
      "DecisionRequestBody-2": {
        "title": "DecisionRequestBody",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionRequestTimeStamp",
          "decisionType",
          "merchantInfo",
          "messageType",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "fxInfo": {
            "$ref": "#/components/schemas/FxInfo"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-1"
          },
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "transactionTypes": {
            "minItems": 1,
            "type": "array",
            "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
            "items": {
              "type": "string",
              "description": "A list of transaction types that this decision qualifies for.  If this value is present then messageType, processingCode, and pointOfServiceInfo will be ignored.",
              "enum": [
                "TCT_OCT",
                "TCT_PURCHASE_RETURN",
                "TCT_AUTO_PAY",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_BRICK_AND_MORTAR"
              ]
            }
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "wasProcessorDeclined": {
            "type": "boolean",
            "description": "Provided along with decision type INFORM to indicate if the transaction was declined or approved ."
          },
          "decisionRequestTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was requested in UTC.",
            "example": "2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "DecisionResponse-3": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "DecisionResponse-2": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "DecisionResponse-1": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "SponsorConfigControlTypeObject": {
        "required": [
          "lastUpdateTimeStamp"
        ],
        "type": "object",
        "properties": {
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the sponsor configuration document is updated. Value is in UTC time.",
            "example": "2025-08-21 02:49:27"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "DecisionResponse-6": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "DecisionResponse-5": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "CollectionResourceWalletServicesAccountInquiryResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/WalletServicesAccountInquiryResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "DecisionResponse-4": {
        "title": "DecisionResponse",
        "required": [
          "decisionResponseTimeStamp",
          "shouldAlert",
          "shouldDecline"
        ],
        "type": "object",
        "properties": {
          "shouldAlert": {
            "type": "boolean",
            "description": "Indicates whether an an alert should be generated"
          },
          "shouldDecline": {
            "type": "boolean",
            "description": "Indicates the decline decision/recommendation depending on decision type"
          },
          "declineRuleType": {
            "type": "string",
            "description": "indicates thedecline Rule type that triggered the decline decision, only present when shouldDecline is true"
          },
          "responseMessage": {
            "type": "string",
            "description": "This field provides more information on the disposition of the response",
            "enum": [
              "CARD_NOT_ENROLLED"
            ]
          },
          "alertsRuleDetail": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of rules that triggered alerts, only present when alerts are triggerd for a decision",
            "items": {
              "$ref": "#/components/schemas/RuleDetail-1"
            }
          },
          "declineRuleDetail": {
            "$ref": "#/components/schemas/RuleDetail-1"
          },
          "declineRuleCategory": {
            "type": "string",
            "description": "indicates the decline Rule Category that triggered the decline decision, only present when shouldDecline is true"
          },
          "declineThresholdAmount": {
            "type": "number",
            "description": "indicates the decline threshold amount that was used to trigger the decline decision, only present when shouldDecline is true and a decline threshold has been defined.",
            "format": "double"
          },
          "declineControlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "This value will be set automatically when the decision response is sent. Value is in UTC time",
            "example": "2022-05-25 18:45:55"
          }
        }
      },
      "AlertPreferencesRequest-13": {
        "required": [
          "alertPreferences"
        ],
        "type": "object",
        "properties": {
          "alertPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-13"
            }
          }
        }
      },
      "CallBackSettings": {
        "required": [
          "callBackEndpoint",
          "isCallBackDisabled"
        ],
        "type": "object",
        "properties": {
          "payloadVersion": {
            "type": "string",
            "description": "Payload version to generate for this callback endpoint. Valid values are V1 or V3.",
            "example": "V1"
          },
          "callBackEndpoint": {
            "maxLength": 150,
            "minLength": 6,
            "type": "string",
            "description": "Alert notification callback URL.",
            "example": "https://api.issuer.example/sampleVCTChostprocessor/consumertransactioncontrols/enrollments"
          },
          "isCallBackDisabled": {
            "type": "boolean",
            "description": "Indicates if callback is turned on (false) or off (true)."
          },
          "iscallBackEndpointLocal": {
            "type": "boolean",
            "description": "Indicates if callback URL is on a local network. Default value is false. Sent via WSI."
          }
        },
        "description": "URL posted following card enrollment or de-enrollment."
      },
      "EnrolledCard": {
        "required": [
          "accountIdentifier"
        ],
        "type": "object",
        "properties": {
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "accountIdentifier": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card number to be enrolled in VTC. Can be PAN, bank account number or token.",
            "example": "4000123456789010"
          }
        },
        "description": "List of valid cards added to be enrolled."
      },
      "DecisionRequestType": {
        "title": "DecisionRequestType",
        "required": [
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmms"
          },
          "cardAcceptorTerminalID": {
            "minLength": 1,
            "type": "string",
            "description": "Terminal ID of the card acceptor.",
            "example": "45678"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "pattern": "([a-zA-Z0-9]+)",
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Get Decision Document by Reference Number - Request"
      },
      "SpendLimit-1": {
        "title": "SpendLimit",
        "required": [
          "currentPeriodSpend",
          "declineThreshold",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Time period that the control spans. LMT_MONTH: until the end of that month. LMT_WEEK: 7-day period. LMT_DAY: 24 hour period. LMT_DATE_RANGE: date range specified in startDateTime and endDateTime. LMT_RECURRING: recurring period, number of days specified in recurringCycleTime.",
            "example": "LMT_WEEK",
            "enum": [
              "LMT_MONTH",
              "LMT_WEEK",
              "LMT_DAY",
              "LMT_DATE_RANGE",
              "LMT_RECURRING"
            ]
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time zone to be applied to related object in Area/Location format. For example: 'America/Denver' is in United States MST. If not provided, assumed to be UTC. timeZoneID can be applied within timeRange and spendLimit fields to affect endDateTime, startDateTime, endTime, and startTime fields.",
            "example": "UTC"
          },
          "endDateTime": {
            "type": "string",
            "description": "End time in UTC of a timeRange that bounds a control. Only transactions attempted during the specified timeRange will trigger this control. The format of the string is in 24hr time using HH:MM format.",
            "example": "2023-03-21 04:56:56"
          },
          "startDateTime": {
            "type": "string",
            "description": "Starting date and time of a date and time range bounding a control, in the time zone set by the timeZoneID. Only transactions attempted during the specified date and time range will trigger this control. Cannot be in the past. Format is \\\"CCYY-MM-DD HH:MM\\\". The hour and minute portion is optional: if not provided, these values will be set to \\\"00:00\\\". This field is required only when type = LMT_DATE_RANGE. If it set when the type = LMT_RECURRING, the control will become active at that time, as if the user set the recurring functionality at that point in time. In all other cases the field is optional and even if present, it will be ignored.",
            "example": "2023-03-21 04:56"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum total value of approved purchases within the time period before triggering an alert. Purchases that meet or exceed the limit set to this control type will not trigger another spendLimit alert until everything is reset when the next time period begins.",
            "format": "double",
            "example": 1000
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum total value of approved purchases within the time period before triggering a decline.",
            "format": "double",
            "example": 1000
          },
          "currentPeriodSpend": {
            "type": "number",
            "description": "Total amount of all approved transactions performed within the time period for this control type. Reset once a new time period begins by the amount of the first transaction.",
            "format": "double",
            "example": 200
          },
          "recurringCycleTime": {
            "type": "integer",
            "description": "Number of days after which the currentPeriodSpend is reset and a new cycle begins. Required only when type = LMT_RECURRING; in all other cases, the field is optional and even if present, it will be ignored.",
            "format": "int32",
            "example": 366
          }
        }
      },
      "SponsorConfigMerchantTypeCardEnquiryMerchantControlResponse-1": {
        "required": [
          "availableMerchantTypeRules",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "availableMerchantTypeRules": {
            "type": "array",
            "description": "List of merchant control types available for this card.",
            "items": {
              "$ref": "#/components/schemas/CardEnquiryMerchantControlResponse-1"
            },
            "enum": [
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO"
            ]
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "SpendLimit-2": {
        "required": [
          "currentPeriodSpend",
          "declineThreshold",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Time period that the control spans. LMT_MONTH: until the end of that month. LMT_WEEK: 7-day period. LMT_DAY: 24 hour period. LMT_DATE_RANGE: date range specified in startDateTime and endDateTime. LMT_RECURRING: recurring period, number of days specified in recurringCycleTime.",
            "example": "LMT_WEEK",
            "enum": [
              "LMT_MONTH",
              "LMT_WEEK",
              "LMT_DAY",
              "LMT_DATE_RANGE",
              "LMT_RECURRING"
            ]
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time zone to be applied to related object in Area/Location format. For example: 'America/Denver' is in United States MST. If not provided, assumed to be UTC. timeZoneID can be applied within timeRange and spendLimit fields to affect endDateTime, startDateTime, endTime, and startTime fields.",
            "example": "UTC"
          },
          "endDateTime": {
            "type": "string",
            "description": "End date and time in UTC of a timeRange that bounds a control.",
            "example": "2025-06-21 04:56"
          },
          "startDateTime": {
            "type": "string",
            "description": "Starting date and time of a date and time range bounding a control, in the time zone set by the timeZoneID.",
            "example": "2025-06-21 03:51"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum total value of approved purchases within the time period before triggering an alert. Purchases that meet or exceed the limit set to this control type will not trigger another spendLimit alert until everything is reset when the next time period begins.",
            "format": "double",
            "example": 1000
          },
          "currentPeriodEnd": {
            "type": "string",
            "description": "Ending timestamp for current spending period in UTC.",
            "example": "2025-06-21 04:56:00"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum total value of approved purchases within the time period before triggering a decline.",
            "format": "double",
            "example": 1000
          },
          "currentPeriodSpend": {
            "type": "number",
            "description": "Total amount of all approved transactions performed within the time period for this control type. Reset once a new time period begins by the amount of the first transaction.",
            "format": "double",
            "example": 200
          },
          "recurringCycleTime": {
            "type": "integer",
            "description": "Number of days after which the currentPeriodSpend is reset and a new cycle begins. Required only when type = LMT_RECURRING; in all other cases, the field is optional and even if present, it will be ignored.",
            "format": "int32",
            "example": 366
          }
        },
        "description": "Used to track and manage total approved account purchases over a period of time. All amounts are based on the cardholderBillAmount in the authorization request. The actual amount submitted for settlement can differ (e.g. tips, hotel, car rental...)."
      },
      "AccountUpdateRequest": {
        "required": [
          "currentAccountID",
          "newAccountID"
        ],
        "type": "object",
        "properties": {
          "newAccountID": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "New account ID, between 13 and 19 digits.",
            "example": "4000123456789010"
          },
          "currentAccountID": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Current account ID, between 13 and 19 digits.",
            "example": "4000123456789010"
          }
        },
        "description": "Account update request"
      },
      "NotificationInquiryRequestPayload-1": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/DateTimeRange-1"
          },
          "pagination": {
            "$ref": "#/components/schemas/PagingControlInformation-1"
          },
          "documentIds": {
            "type": "array",
            "description": "List of documentIDs for which Alert History is requested.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b",
            "items": {
              "type": "string",
              "description": "List of documentIDs for which Alert History is requested.",
              "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
            }
          },
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control is to be established.",
            "example": "4000123456789010"
          },
          "includeAlertDetails": {
            "type": "boolean",
            "description": "Indicates if alertDetails object will be populated in response. Defaults to false."
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "includeContactDetails": {
            "type": "boolean",
            "description": "Indicates if contacts object will be populated in response. Defaults to false."
          },
          "includeMerchantDetails": {
            "type": "boolean",
            "description": "Indicates if merchantInfo object will be populated in response. Defaults to false."
          }
        }
      },
      "CollectionResourceNotificationDetails-13": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/NotificationDetails-13"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceSponsorMccGroupRequestResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorMccGroupRequestResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21T04:56:12.551Z"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "PresentationData": {
        "title": "PresentationData",
        "required": [
          "howPresented",
          "isCardPresent"
        ],
        "type": "object",
        "properties": {
          "howPresented": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Identifies how the transaction entered the payment system",
            "enum": [
              "CUSTOMER_PRESENT",
              "CUSTOMER_NOT_PRESENT",
              "MAIL_PHONE_ORDER",
              "RECURRING_TRANSACTION",
              "INSTALLMENT_PAYMENT"
            ]
          },
          "isCardPresent": {
            "type": "boolean",
            "description": "Identifies whether the card was present at the merchant location when the transaction entered the payment system"
          }
        }
      },
      "NotificationDetailsContactPreferenceDetails": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of contact. If \"InActive\", default contact preferences will deliver last mile alerts to cardholder.",
            "example": "Active"
          },
          "message": {
            "type": "string",
            "description": "Transaction information sent to the cardholder as SMS, email, or push notification. ",
            "example": "No controls found for given time range."
          },
          "isVerified": {
            "type": "boolean",
            "description": "Indicates if contact type has been verified by issuer. Contacts mapped to cardholder must be verified. Currently, VISA only supports the double opt in verification for SMS-type contacts if field is set to false. For any other contact type, Visa will not conduct additional verification. Issuer should only allow verified contacts to be used as contact preferences. Double opt in feature is not supported in sandbox. For last mile alert delivery testing in sandbox this field must be set to true.",
            "example": true
          },
          "contactType": {
            "type": "string",
            "description": "Channel to deliver alert message. Supported channels include SMS, Push, Email. (Only email is supported in sandbox.)",
            "example": "Email"
          },
          "contactValue": {
            "type": "string",
            "description": "Email address, phone number or device ID associated with contactType.",
            "example": "alexmiller@example.com"
          }
        },
        "description": "List of contacts associated with alert preference."
      },
      "CustomMerchantControlQualifier": {
        "type": "object",
        "properties": {
          "updatedBy": {
            "type": "string"
          },
          "isEnabledForVTC": {
            "type": "boolean"
          },
          "lastUpdateTimeStamp": {
            "type": "string"
          },
          "merchantControlType": {
            "maxLength": 26,
            "minLength": 11,
            "pattern": "^MCT_CUSTOM_[A-Z0-9_]*$",
            "type": "string"
          },
          "merchantCategoryCodes": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NotificationInquiryRequestV2-1": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/DateTimeRange-1"
          },
          "pagination": {
            "$ref": "#/components/schemas/PagingControlInformation-1"
          },
          "documentIds": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "description": "List of documentIDs for which Alert History is requested.",
            "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]",
            "items": {
              "type": "string",
              "description": "List of documentIDs for which Alert History is requested.",
              "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]"
            }
          },
          "paymentTokens": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "example": [
              4000123456789010
            ],
            "items": {
              "type": "string",
              "description": "List of payment tokens with associated contact details.",
              "example": "[4000123456789010]"
            }
          },
          "includeAlertDetails": {
            "type": "boolean",
            "description": "Indicates if alertDetails object will be populated in response. Defaults to false."
          },
          "includeContactDetails": {
            "type": "boolean",
            "description": "Indicates if contacts object will be populated in response. Defaults to false."
          },
          "primaryAccountNumbers": {
            "maxLength": 10,
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "description": "Card number for which alert history details are to be returned.",
            "example": [
              4000123456789010
            ],
            "items": {
              "maxLength": 10,
              "type": "string",
              "description": "Card number for which alert history details are to be returned.",
              "example": "[4000123456789010]"
            }
          },
          "includeMerchantDetails": {
            "type": "boolean",
            "description": "Indicates if merchantInfo object will be populated in response. Defaults to false."
          }
        },
        "description": "NotificationInquiryRequestPayload"
      },
      "TransactionControlReportsResponse": {
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData"
          },
          "responseMessage": {
            "type": "string",
            "description": "Details relating to the management and outcome of the response message.",
            "example": "No controls found for given time range."
          },
          "controlDocuments": {
            "type": "array",
            "description": "List of transaction control documents.",
            "items": {
              "$ref": "#/components/schemas/TransactionControlReportsDocument"
            }
          }
        },
        "description": "Transaction control document being returned."
      },
      "ApplicationWhitelistingAPIRequest": {
        "required": [
          "whitelistedAppIDList"
        ],
        "type": "object",
        "properties": {
          "whitelistedAppIDList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationWhitelistingRequest"
            }
          }
        }
      },
      "AlertNotificationDeliveryCallbackPayload": {
        "required": [
          "transactionDetails",
          "transactionOutcome"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "Enum for the type of transaction.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Enum for the type of transaction.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            }
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/AlertTransactionDetails"
          },
          "transactionOutcome": {
            "$ref": "#/components/schemas/AlertTransactionOutcome"
          }
        },
        "description": "Outbound alerts notification payload."
      },
      "TerminalClass": {
        "title": "TerminalClass",
        "required": [
          "deviceLocation",
          "howOperated",
          "isAttended"
        ],
        "type": "object",
        "properties": {
          "isAttended": {
            "type": "boolean",
            "description": "Defines whether card accepting device is attended by a person"
          },
          "howOperated": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "Defines how the card accepting device was operated",
            "enum": [
              "CUSTOMER_OPERATED",
              "CARD_ACCEPTOR_OPERATED",
              "ADMINISTRATIVE"
            ]
          },
          "deviceLocation": {
            "type": "string",
            "description": "Defines the location of the card accepting device ",
            "enum": [
              "ON_PREMISE",
              "OFF_PREMISE",
              "ELECTRONIC_COMMERCE"
            ]
          }
        }
      },
      "AlertNotificationDeliveryCallbackPayloadV2-13": {
        "required": [
          "transactionDetails",
          "transactionOutcome",
          "transactionTypes"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "Enum for the type of transaction.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Enum for the type of transaction.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            },
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/AlertTransactionDetailsV2-13"
          },
          "transactionOutcome": {
            "$ref": "#/components/schemas/AlertTransactionOutcomeV2-1"
          }
        },
        "description": "Outbound alerts notification payload."
      },
      "SponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse": {
        "required": [
          "availableControlTypes",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "availableControlTypes": {
            "type": "array",
            "description": "Control types available for this card.",
            "items": {
              "$ref": "#/components/schemas/CardEnquiryRuleCategoryResponse"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "MerchantOverrideableControl-8": {
        "required": [
          "controlType",
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-2"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-2"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-2"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAWAL",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-2"
          },
          "impulseDelayEnd": {
            "type": "string",
            "description": "Time in UTC when impulseDelayPeriod expires. Value is calculated by adding the impulseDelayPeriod value to the impulseDelayStart value.",
            "readOnly": true,
            "example": "1319"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "impulseDelayStart": {
            "type": "string",
            "description": "Time in UTC the initial impulseDelayPeriod was received on a merchant control.",
            "readOnly": true,
            "example": "1319"
          },
          "impulseDelayPeriod": {
            "type": "string",
            "description": "Indicates the time merchantControls should be inactive. When autoRemoval is set to false, controls will continue to block transactions until impulse delay is removed. When autoRemoval is set to true, impulse is expired. No action is needed to unblock.",
            "example": "1439"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "impulseDelayRemaining": {
            "type": "string",
            "description": "Time remaining before the impulseDelayPeriod expires.",
            "readOnly": true,
            "example": "719"
          },
          "shouldTargetSpecificCard": {
            "type": "boolean",
            "description": "Indicates if card details are required. Card details will be used to locate a transaction control.",
            "readOnly": true
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        },
        "description": "List of merchant controls configured for the card."
      },
      "CustomerProfileFacade": {
        "required": [
          "defaultAlertsPreferences",
          "firstName",
          "lastName",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "communityCode": {
            "type": "string",
            "description": "Default community assigned by API. The default is the sponsor BID description.",
            "readOnly": true,
            "example": "123456789"
          },
          "userIdentifier": {
            "pattern": "(^[\\p{L}0-9_\\-.@]{0,72}$)",
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails"
            }
          }
        }
      },
      "GetDecisionDocument-6": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-6"
            }
          }
        }
      },
      "CollectionResourceTransactionControlListResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/TransactionControlListResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "GetDecisionDocument-5": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-5"
            }
          }
        }
      },
      "GetDecisionDocument-4": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-4"
            }
          }
        }
      },
      "CollectionResourceBulkEnrollmentResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/BulkEnrollmentResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "MerchantOverrideableControl-1": {
        "title": "MerchantOverrideableControl",
        "required": [
          "controlType",
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-1"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-1"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-1"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-1"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-1"
          },
          "impulseDelayPeriod": {
            "type": "string",
            "description": "Indicates the time merchantControls should be inactive. When autoRemoval is set to false, controls will continue to block transactions until impulse delay is removed. When autoRemoval is set to true, impulse is expired. No action is needed to unblock.",
            "example": "23:59"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        }
      },
      "GetDecisionDocument-3": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-3"
            }
          }
        }
      },
      "GetDecisionDocument-2": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-2"
            }
          }
        }
      },
      "PaginationIndex": {
        "title": "PaginationIndex",
        "required": [
          "pageLimit",
          "startIndex"
        ],
        "type": "object",
        "properties": {
          "pageLimit": {
            "maxLength": 3,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Maximum number of pages to return. Numeric, between 1 and 100.",
            "example": "50"
          },
          "startIndex": {
            "maxLength": 9,
            "minLength": 1,
            "pattern": "[0-9]+",
            "type": "string",
            "description": "Page start location. Must be numeric.",
            "example": "1"
          }
        },
        "description": "Paging control information."
      },
      "GetDecisionDocument-1": {
        "title": "GetDecisionDocument",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "SUCCESS",
              "RESOURCE_NOT_FOUND"
            ]
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument-1"
            }
          }
        }
      },
      "CardListDescription-1": {
        "required": [
          "cards",
          "description"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of disqualifying cards.",
            "example": 4000123456789010,
            "items": {
              "type": "string",
              "description": "List of disqualifying cards.",
              "example": "4000123456789010"
            }
          },
          "description": {
            "type": "string",
            "description": "Reason for card disqualification.",
            "example": "These cards are already enrolled with VTC. Set forceEnrollment:true in the request to override existing controls."
          }
        },
        "description": "List of disqualifying cards. These cards were not eligible to be added to the group, and will be returned in the response with partial success. HTTP status code will be 207. DisqualifyingCards will not be visible when HTTP status code is 200."
      },
      "CollectionResourceNotificationDetails-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/NotificationDetails-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "RequestModelForTransactionControlsHistoryByTimeRange-1": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "description": "End date (YYYY-MM-DD) from which transaction control documents have to be returned.",
            "example": "2023-04-12T00:00:00.000Z"
          },
          "startDate": {
            "type": "string",
            "description": "Start date (YYYY-MM-DD) from which transaction control documents have to be returned.",
            "example": "2023-04-12T00:00:00.000Z"
          },
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control details are to be returned.",
            "example": "4000123456789010"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Card account number for which the control details are to be returned.",
            "example": "4000123456789010"
          }
        },
        "description": "Request model for Transaction Controls history by time range"
      },
      "CardEnquiryMerchantControlResponse": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Names of all merchant control types available for this card.",
            "example": "MCT_AIRFARE",
            "enum": [
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO"
            ]
          }
        },
        "description": "List of merchant control types available for this card.",
        "enum": [
          "MCT_ADULT_ENTERTAINMENT",
          "MCT_AIRFARE",
          "MCT_ALCOHOL",
          "MCT_APPAREL_AND_ACCESSORIES",
          "MCT_AUTOMOTIVE",
          "MCT_CAR_RENTAL",
          "MCT_ELECTRONICS",
          "MCT_SPORT_AND_RECREATION",
          "MCT_GAMBLING",
          "MCT_GAS_AND_PETROLEUM",
          "MCT_GROCERY",
          "MCT_HOTEL_AND_LODGING",
          "MCT_HOUSEHOLD",
          "MCT_PERSONAL_CARE",
          "MCT_SMOKE_AND_TOBACCO"
        ]
      },
      "GroupTransactionControlRequest-1": {
        "type": "object",
        "properties": {
          "globalControl": {
            "$ref": "#/components/schemas/BaseControl-1"
          },
          "merchantControls": {
            "type": "array",
            "description": "If provided, includes the list of defined merchant controls that have been configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypedGroupControl-1"
            }
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypedGroupControl-1"
            }
          }
        },
        "description": "All control types to be applied to the list of cards being enrolled."
      },
      "CollectionResourceNotificationDetailsV2-13": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/NotificationDetailsV2-13"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfGetDecisionDocument": {
        "title": "CollectionResourceOfGetDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CustomerProfilePatchRequest": {
        "required": [
          "countryCode",
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredLanguage"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered."
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails"
            }
          }
        }
      },
      "AppConfigurationCallBackSettingsRequestType-1": {
        "required": [
          "callBackSettings"
        ],
        "type": "object",
        "properties": {
          "callBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings-1"
          },
          "fxCallBackSettings": {
            "$ref": "#/components/schemas/FxCallBackSettings-1"
          }
        }
      },
      "VdpErrorResponse-1": {
        "required": [
          "responseCode",
          "responseMessage"
        ],
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "description": "Response code"
          },
          "responseMessage": {
            "type": "string",
            "description": "Response message"
          }
        }
      },
      "ApplicationWhitelistingRequest": {
        "required": [
          "appID",
          "appType",
          "applicationName"
        ],
        "type": "object",
        "properties": {
          "appID": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Identifier for the application requesting to be enabled by the Sponsor/Issuer."
          },
          "appType": {
            "type": "string",
            "description": "Type of application requesting to be enabled by the Sponsor/Issuer.",
            "enum": [
              "ISSUER",
              "THIRDPARTY"
            ]
          },
          "cardPrefixes": {
            "type": "array",
            "description": "List of card prefixes enabled for the Whitelisted App ID.",
            "items": {
              "$ref": "#/components/schemas/CardPrefixAppWhiteList"
            }
          },
          "applicationName": {
            "type": "string",
            "description": "Name of the application requesting to be enabled by the Sponsor/Issuer."
          },
          "defaultWhiteListConfiguration": {
            "$ref": "#/components/schemas/WhiteListAppTransactionControlsConfiguration"
          }
        }
      },
      "CustomerProfile": {
        "required": [
          "countryCode",
          "defaultAlertsPreferences",
          "firstName",
          "lastName",
          "preferredLanguage",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "communityCode": {
            "type": "string",
            "description": "Default community assigned by API. The default is the sponsor BID description.",
            "readOnly": true,
            "example": "123456789"
          },
          "userIdentifier": {
            "pattern": "(^[\\p{L}0-9_\\-.@]{0,72}$)",
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails"
            }
          }
        },
        "description": "All alerts enrollment details for the cardholder, if enrolled for last mile delivery of alert notifications through VTA."
      },
      "CustomerProfileDocument-2": {
        "required": [
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredCountryCode",
          "preferredLanguage",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of PANs with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation-1"
            }
          },
          "tokens": {
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation-1"
            }
          },
          "lastName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "enum": [
              true,
              false
            ]
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-1"
            }
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "preferredCountryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Uppercase ISO ALPHA-3 3-letter country code. Currently only \"USA\" supported.",
            "example": "USA"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-1"
            }
          }
        }
      },
      "CustomerProfileDocument-1": {
        "required": [
          "alertsPreferences",
          "cards",
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredCountryCode",
          "preferredLanguage",
          "tokens",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of PANs with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation-1"
            }
          },
          "tokens": {
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "items": {
              "$ref": "#/components/schemas/CardContactInformation-1"
            }
          },
          "lastName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "enum": [
              true,
              false
            ]
          },
          "alertsPreferences": {
            "type": "array",
            "description": "List of alert preferences for specific alert types.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-1"
            }
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "lastUpdateTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC.",
            "example": "2025-05-13 04:09:18.799"
          },
          "preferredCountryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Uppercase ISO ALPHA-3 3-letter country code. Currently only \"USA\" supported.",
            "example": "USA"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-1"
            }
          }
        }
      },
      "ExpirationDate": {
        "title": "ExpirationDate",
        "required": [
          "mm",
          "yy"
        ],
        "type": "object",
        "properties": {
          "mm": {
            "type": "string",
            "description": "Value in mm format"
          },
          "yy": {
            "type": "string",
            "description": "Value in yy format"
          }
        }
      },
      "CollectionResourceOfDecisionUpdateModel-6": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-6"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "BulkDecoupleTokenRequest-1": {
        "required": [
          "decoupleTokenRequest"
        ],
        "type": "object",
        "properties": {
          "decoupleTokenRequest": {
            "maxItems": 100,
            "minItems": 0,
            "type": "array",
            "description": "List of objects informing couple/decouple request. Minimum 1 object, maximum 100 objects.",
            "items": {
              "$ref": "#/components/schemas/DecoupleTokenRequest-1"
            }
          }
        }
      },
      "RuleDetail-1": {
        "title": "RuleDetail",
        "required": [
          "ruleCategory",
          "ruleType",
          "triggeringAppID"
        ],
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string",
            "description": "Rule type for the control that triggered the alert/decline.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "NONE"
            ]
          },
          "alertReason": {
            "type": "string",
            "description": "Reason for the alert. Only present in alertDetails.",
            "example": "DECLINE_TRANS_LIMIT",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_TRANS_LIMIT",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_ISSUER",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "FX_ALERTS",
              "ALERT_BREACHED_AMT_REVERSAL"
            ]
          },
          "ruleCategory": {
            "type": "string",
            "description": "Rule category for the control that triggered the alert/decline.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "thresholdAmount": {
            "type": "number",
            "description": "Threshold amount for the control that triggered the alert/decline. Only present if thresholdAmount breach caused the trigger.",
            "format": "double",
            "example": 1000
          },
          "triggeringAppID": {
            "type": "string",
            "description": "App ID for the control that triggered the alert.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-1"
          },
          "controlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          }
        }
      },
      "CollectionResourceOfDecisionDocument-1": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionUpdateModel-5": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-5"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionDocument-2": {
        "title": "CollectionResourceOfDecisionDocument",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionDocument-2"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionUpdateModel-4": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-4"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionUpdateModel-3": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-3"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionUpdateModel-2": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-2"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionUpdateModel-1": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/GetDecisionDocument-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceCustomerProfileDocument-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CustomerProfileDocument-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertPreferencesRequestV2": {
        "required": [
          "alertPreferences"
        ],
        "type": "object",
        "properties": {
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "(^[a-zA-Z0-9]*$)",
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "alertPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences"
            }
          }
        }
      },
      "CollectionResourceCustomerProfileDocument-2": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CustomerProfileDocument-2"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "RuleDetail-8": {
        "required": [
          "ruleCategory",
          "ruleType",
          "triggeringAppID"
        ],
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string",
            "description": "Rule type for the control that triggered the alert/decline.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "NONE"
            ]
          },
          "alertReason": {
            "type": "string",
            "description": "Reason for the alert. Only present in alertDetails.",
            "example": "DECLINE_TRANS_LIMIT",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_TRANS_LIMIT",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_ISSUER",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "FX_ALERTS",
              "ALERT_BREACHED_AMT_REVERSAL"
            ]
          },
          "ruleCategory": {
            "type": "string",
            "description": "Rule category for the control that triggered the alert/decline.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "userIdentifier": {
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "thresholdAmount": {
            "type": "number",
            "description": "Threshold amount for the control that triggered the alert/decline. Only present if thresholdAmount breach caused the trigger.",
            "format": "double",
            "example": 1000
          },
          "triggeringAppID": {
            "type": "string",
            "description": "App ID for the control that triggered the alert.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "controlTargetType": {
            "type": "string",
            "description": "Defines the control level that triggered the alert/decline.",
            "example": "CARD_LEVEL"
          },
          "currencyConversion": {
            "$ref": "#/components/schemas/CurrencyConversion-1"
          }
        },
        "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present."
      },
      "ExchangeRateDetails": {
        "type": "object",
        "properties": {
          "fxStatus": {
            "type": "string",
            "description": "Indicates if FX_ALERT was complete.",
            "example": "COMPLETE"
          },
          "pfxIndicator": {
            "type": "string",
            "description": "Indicates if transaction is eligible for the exchange rate to persist from processing to clearing or if a rate was applied for a full financial transaction (0220/0420).",
            "readOnly": true,
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE",
              "APPLIED"
            ]
          },
          "visaExchangeRate": {
            "type": "number",
            "description": "Exchange rate provided by VIP in the authorization message.",
            "format": "double",
            "example": 0.05
          },
          "billerCurrencyCode": {
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "readOnly": true,
            "example": "840"
          },
          "exchangeRateMarkUp": {
            "type": "number",
            "description": "Calculated exchange rate mark up.",
            "format": "double",
            "example": 0.58
          },
          "ecbExchangeRateInfo": {
            "$ref": "#/components/schemas/EcbExchangeRateInfo"
          },
          "fxRateTableIdentifier": {
            "type": "string",
            "description": "5-byte Rate Table ID performing all required multi-currency processing (format 1-alpha, 4-numeric).",
            "readOnly": true,
            "example": "a0000"
          }
        },
        "description": "Exchange rate details provided in the notification payload for a cross-currency transaction when Issuer has configured FX Alerts."
      },
      "AlertOutboundCallDetailsV2": {
        "type": "object",
        "properties": {
          "errorDetails": {
            "type": "array",
            "description": "List of error details that occurred during request processing. Includes error codes and messages.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "alertPreferences": {
            "$ref": "#/components/schemas/NotificationDetailsAlertPreferences"
          }
        },
        "description": "Outbound call details."
      },
      "CurrencyConversion": {
        "type": "object",
        "properties": {
          "convertedAmount": {
            "type": "number",
            "description": "Transaction amount, converted to the control-type currency using the Visa Exchange Rate.",
            "example": 100
          },
          "fromCurrencyCode": {
            "type": "string",
            "description": "Indicates the currency that was used to perform the conversion to the cardholder’s control currency.",
            "example": "840"
          },
          "visaExchangeRate": {
            "type": "string",
            "description": "The rate used by VisaNet to convert the transaction amount (field 4) to the cardholder billing amount (field 6) including the optional issuer fee (OIF).\nWhen a Client participates in multi-currency feature, this field includes the VisaNet rate used to convert the transaction/cardholder billing  amount to the currency of the control-type.",
            "example": "0.05"
          },
          "controlCurrencyCode": {
            "type": "string",
            "description": "Currency code that was defined for the control-type.",
            "example": "840"
          }
        },
        "description": "Currency conversion details. Sets a currency for the control type."
      },
      "CustomerProfilePatchRequest-1": {
        "required": [
          "countryCode",
          "defaultAlertsPreferences",
          "firstName",
          "isProfileActive",
          "lastName",
          "preferredLanguage"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "isProfileActive": {
            "type": "boolean",
            "description": "Indicates if customer profile is active. If set to false, alerts cannot be delivered.",
            "enum": [
              true,
              false
            ]
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-1"
            }
          }
        }
      },
      "AlertNotificationDeliveryCallbackPayload-1": {
        "required": [
          "transactionDetails",
          "transactionOutcome"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "Enum for the type of transaction.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Enum for the type of transaction.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            },
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/AlertTransactionDetails-1"
          },
          "transactionOutcome": {
            "$ref": "#/components/schemas/AlertTransactionOutcome-1"
          }
        },
        "description": "Outbound alerts notification payload."
      },
      "OverrideableControl-8": {
        "required": [
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-2"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-2"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-2"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-2"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-2"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "shouldTargetSpecificCard": {
            "type": "boolean",
            "description": "Indicates if card details are required. Card details will be used to locate a transaction control.",
            "readOnly": true
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        },
        "description": "Used to set rules that apply to all transactions performed with this account."
      },
      "NotificationDetailsV2": {
        "required": [
          "notificationDetails"
        ],
        "type": "object",
        "properties": {
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData"
          },
          "notificationDetails": {
            "type": "array",
            "description": "List of notification details found for this request.",
            "items": {
              "$ref": "#/components/schemas/NotificationDetailsFound"
            }
          }
        },
        "description": "The response resource container. Contains notification details found."
      },
      "AlertTransactionOutcomeV2-1": {
        "required": [
          "decisionID",
          "decisionResponseTimeStamp",
          "documentID",
          "transactionApproved"
        ],
        "type": "object",
        "properties": {
          "decisionID": {
            "type": "string",
            "description": "Decision ID corresponding to the alerts.",
            "example": "v-304-f1f11166-f3b3-4465-b995-61edb244c178"
          },
          "documentID": {
            "type": "string",
            "description": "Uniquely identifies the control document that triggered the notification.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "alertDetails": {
            "type": "array",
            "description": "List of alerts triggered for a transaction that should be delivered to the cardholder. If transaction was declined, only a single alert detail will be present.",
            "items": {
              "$ref": "#/components/schemas/RuleDetailV2-1"
            }
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-2"
          },
          "declineResponseCode": {
            "type": "string",
            "description": "Response code indicating why the transaction was declined.",
            "example": "50"
          },
          "transactionApproved": {
            "type": "string",
            "description": "Indicates if transaction was approved.",
            "example": "APPROVED",
            "enum": [
              "APPROVED",
              "DECLINED"
            ]
          },
          "decisionResponseTimeStamp": {
            "type": "string",
            "description": "Timestamp of when the decision was returned in UTC.",
            "example": "2023-05-25T18:45:55.000Z"
          }
        },
        "description": "Outcome of the transaction."
      },
      "CollectionResourceSponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CustomAlertsPayloadSettings": {
        "required": [
          "accountIdentifierInClear"
        ],
        "type": "object",
        "properties": {
          "accountIdentifierInClear": {
            "type": "boolean",
            "description": "Indicates if accountIdentifier should be in clear in the notification response payload."
          },
          "additionalAttributeIncluded": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "Attributes added by the issuer.",
            "items": {
              "type": "string",
              "description": "Attributes added by the issuer.",
              "enum": [
                "CARDPREFIX",
                "ALL_QUALIFYING_ALERTS"
              ]
            }
          }
        },
        "description": "Settings for custom alert payloads."
      },
      "CardEnquiryRuleCategoryResponse": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of rule category.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          }
        },
        "description": "Control types available for this card."
      },
      "PointOfServiceInfo": {
        "title": "PointOfServiceInfo",
        "required": [
          "presentationData",
          "terminalClass",
          "terminalEntryCapability",
          "terminalType"
        ],
        "type": "object",
        "properties": {
          "terminalType": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "identifies the type of terminal at which the transaction was acquired",
            "enum": [
              "POS_TERMINAL",
              "ATM",
              "HOME_TERMINAL",
              "MOBILE_DEVICE"
            ]
          },
          "terminalClass": {
            "$ref": "#/components/schemas/TerminalClass"
          },
          "presentationData": {
            "$ref": "#/components/schemas/PresentationData"
          },
          "securityCondition": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "identifies information about how the payment transaction was authenticated",
            "enum": [
              "NO_SECURITY_CONCERN",
              "SUSPECTED_FRAUD",
              "IDENTIFICATION_VERIFIED",
              "SECURE_ELECTRONIC_COMMERCE",
              "NOT_AUTHORIZED_AT_3D_SECURE_MERCHANT",
              "NOT_AUTHENTICATED_SECURITY_TRANSACTION",
              "NON_SECURE_TRANSACTION",
              "NOT_AUTHENTICATED_SECURITY_TRANSACTION_SET_MERCHANT",
              "CVV_VALIDATED_AND_VALID",
              "CVV_VALIDATED_AND_INVALID"
            ]
          },
          "terminalEntryCapability": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "identifies the form the primary account number was acquired",
            "enum": [
              "UNKNOWN",
              "MANUAL",
              "MAG_STRIPE_READ",
              "BAR_CODE",
              "OCR",
              "ICC",
              "KEY_ENTERED",
              "FILE",
              "MICR_READER",
              "CONTACTLESS"
            ]
          },
          "primaryAccountNumberEntryMode": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "identifies the way  primary account number was entered",
            "enum": [
              "UNKNOWN",
              "MANUAL",
              "MAG_STRIPE_READ",
              "BAR_CODE",
              "OCR",
              "ICC",
              "KEY_ENTERED",
              "FILE",
              "MICR_READER",
              "CONTACTLESS"
            ]
          },
          "personalIdentificationNumberEntryMode": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "identifies the way the PIN number was entered",
            "enum": [
              "UNKNOWN",
              "PIN_ENTRY_CAPABLE",
              "NO_PIN_ENTRY",
              "PIN_PAD_INOPERATIVE"
            ]
          }
        }
      },
      "DecoupleTokenRequest-1": {
        "required": [
          "shouldDecouple"
        ],
        "type": "object",
        "properties": {
          "paymentToken": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Token account number for which the control is to be established.",
            "example": "4000123456789010"
          },
          "shouldDecouple": {
            "type": "boolean",
            "description": "Indicates if tokens should be liberated from any card control settings placed on the primaryAccountNumber. If set to 'true' on an enrolled paymentToken the token will operate independently of the PAN's card controls. If set to 'true' on a primaryAccountNumber all related token transactions will be ignored by the PAN's card controls.",
            "enum": [
              false
            ]
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number for which the control is to be established.",
            "example": "4000123456789010"
          }
        },
        "description": "Object indicating if the PAN or token should be decoupled.  Either the primaryAccountNumber or paymentToken field must be set."
      },
      "DecisionHistoryResponse": {
        "title": "DecisionHistoryResponse",
        "required": [
          "decisionDocument",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request",
            "enum": [
              "AVAILABLE_RECORDS",
              "NO_RECORDS"
            ]
          },
          "paginationData": {
            "$ref": "#/components/schemas/PaginationData-1"
          },
          "decisionDocument": {
            "type": "array",
            "description": "List of decision Documents",
            "items": {
              "$ref": "#/components/schemas/DecisionDocument"
            }
          }
        }
      },
      "SponsorConfigTransactionTypeCardEnquiryTransactionControlResponse": {
        "required": [
          "availableTransactionTypeRules",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "availableTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types available for this card.",
            "items": {
              "$ref": "#/components/schemas/CardEnquiryTransactionControlResponse"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "AlertTransactionDetailsV2": {
        "required": [
          "billerCurrencyCode",
          "cardholderBillAmount",
          "requestReceivedTimeStamp"
        ],
        "type": "object",
        "properties": {
          "nameOnCard": {
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "MerchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo"
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "exchangeRateDetails": {
            "$ref": "#/components/schemas/ExchangeRateDetails"
          },
          "cardholderBillAmount": {
            "type": "string",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuer's currency.",
            "example": "0.62"
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "requestReceivedTimeStamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2025-08-06 04:05:15"
          },
          "retrievalReferenceNumber": {
            "maxLength": 72,
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Details of the transaction."
      },
      "CollectionResourceTransactionControlReportsResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/TransactionControlReportsResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionResponseType-1": {
        "title": "CollectionResourceOfDecisionResponseType",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AppConfigurationCallBackSettingsResponseType-1": {
        "required": [
          "callBackSettings",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of callback configuration.",
            "example": "CONFIGURED",
            "enum": [
              "NOT_CONFIGURED",
              "CONFIGURED"
            ]
          },
          "callBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings-1"
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CollectionResourceCustomerProfileDocument-13": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/CustomerProfileDocument-13"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "RulesConfiguration": {
        "required": [
          "isAlertsAllowed",
          "ruleCategory"
        ],
        "type": "object",
        "properties": {
          "ruleCategory": {
            "type": "string",
            "description": "Rule category for the control that triggered the alert/decline.",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          },
          "isAlertsAllowed": {
            "type": "boolean",
            "description": "Indicates if alerts are supported (true) or not supported (false) for this control type."
          },
          "isDeclinedAllowed": {
            "type": "boolean",
            "description": "Indicates if declines are supported (true) or not supported (false) for this control type."
          }
        },
        "description": "Transaction controls configured on an account."
      },
      "TypeOverrideableControl-1": {
        "title": "TypeOverrideableControl",
        "required": [
          "controlType",
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-1"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-1"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-1"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-1"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-1"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        }
      },
      "OverrideableControl-1": {
        "title": "OverrideableControl",
        "required": [
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-1"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-1"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-1"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-1"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "transactionLimit": {
            "$ref": "#/components/schemas/TransactionLimit-1"
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        }
      },
      "CardPrefix": {
        "required": [
          "callBackSettings",
          "cardBrand",
          "cardType",
          "prefixStartRange"
        ],
        "type": "object",
        "properties": {
          "cardType": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Type of the Account Funding Source"
          },
          "cardBrand": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "Payment Network/Brand of the BIN or Card Range.",
            "example": "Visa"
          },
          "isLeadPAN": {
            "type": "boolean",
            "description": "Indicates if the PAN is Lead PAN."
          },
          "sponsorBID": {
            "maxLength": 12,
            "minLength": 0,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Identifier assigned to sponsor's business identity.",
            "readOnly": true
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "([a-zA-Z0-9]+)",
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "readOnly": true,
            "example": "003"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "isVTCAllowed": {
            "type": "boolean",
            "description": "Indicates if BINs are allowed to use VTC."
          },
          "isFlexAllowed": {
            "type": "boolean",
            "description": "Indicates if the Flex feature is allowed."
          },
          "prefixEndRange": {
            "type": "string",
            "description": "Ending point of a valid range of card prefixes between 4 and 12 digits."
          },
          "callBackSettings": {
            "$ref": "#/components/schemas/CallBackSettings-2"
          },
          "prefixStartRange": {
            "type": "string",
            "description": "Starting point of a valid range of card prefixes between 4 and 12 digits."
          },
          "cardProgramIdentifier": {
            "type": "string",
            "description": "BIN or Card Range enabled  by the Sponsor/Issuer.",
            "example": "CONSUMER"
          },
          "prefixRangeIdentifier": {
            "type": "string",
            "description": "prefixRangeIdentifier not mandatory field."
          },
          "isFlexReportingAllowed": {
            "type": "boolean",
            "description": "Indicates if BINs need to generate daily reports."
          }
        },
        "description": "Card Prefix List allowed for the Whitelisted App ID"
      },
      "SponsorConfigTransactionTypeCardEnquiryTransactionControlResponse-1": {
        "required": [
          "availableTransactionTypeRules",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "availableTransactionTypeRules": {
            "type": "array",
            "description": "Transaction control types available for this card.",
            "items": {
              "$ref": "#/components/schemas/CardEnquiryTransactionControlResponse-1"
            },
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CardEnquiryRuleCategoryResponse-1": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of rule category.",
            "example": "PCT_GLOBAL",
            "enum": [
              "PCT_GLOBAL",
              "PCT_TRANSACTION",
              "PCT_MERCHANT"
            ]
          }
        },
        "description": "Control types available for this card."
      },
      "CustomerProfileFacade-1": {
        "required": [
          "defaultAlertsPreferences",
          "firstName",
          "lastName",
          "userIdentifier"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "Last name of the cardholder.",
            "example": "Miller"
          },
          "firstName": {
            "maxLength": 25,
            "minLength": 0,
            "pattern": "(^[\\p{L}0-9,'~.\\s:\\-_`‘’]*$)",
            "type": "string",
            "description": "First name of the cardholder.",
            "example": "Alex"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 0,
            "pattern": "([a-zA-Z]+)",
            "type": "string",
            "description": "Three letter ISO ALPHA-3 country code for the merchant location.",
            "example": "USA"
          },
          "portfolioID": {
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "paymentToken": {
            "type": "string",
            "description": "Payment token passed in the request for registration.",
            "example": "4000123456789010"
          },
          "communityCode": {
            "type": "string",
            "description": "Default community assigned by API. The default is the sponsor BID description.",
            "readOnly": true,
            "example": "123456789"
          },
          "userIdentifier": {
            "pattern": "(^[\\p{L}0-9_\\-.@]{0,72}$)",
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 72 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "preferredLanguage": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "description": "Preferred language for last mile alerts. Current languages supported are \"en-us\" (English US) and \"es-us\"(Spanish US).",
            "example": "en-us"
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "Primary account number passed in the request for registration.",
            "example": "4000123456789010"
          },
          "defaultAlertsPreferences": {
            "type": "array",
            "description": "List of contact types that can be used as defaults for any alert. If no alert preference has been defined, the alert will be delivered with default contact.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails-1"
            }
          }
        }
      },
      "CardListDescription": {
        "required": [
          "cards",
          "description"
        ],
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of disqualifying cards.",
            "example": "4000123456789010",
            "items": {
              "type": "string",
              "description": "List of disqualifying cards.",
              "example": "4000123456789010"
            }
          },
          "description": {
            "type": "string",
            "description": "Reason for card disqualification.",
            "example": "These cards are already enrolled with VTC. Set forceEnrollment:true in the request to override existing controls."
          }
        },
        "description": "List of disqualifying cards. These cards were not eligible to be added to the group, and will be returned in the response with partial success. HTTP status code will be 207. DisqualifyingCards will not be visible when HTTP status code is 200."
      },
      "AccountUpdateResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Account update status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS"
            ]
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "TypeOverrideableControl-8": {
        "required": [
          "controlType",
          "isControlEnabled"
        ],
        "type": "object",
        "properties": {
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange-2"
          },
          "cardDetail": {
            "$ref": "#/components/schemas/CardDetail-2"
          },
          "spendLimit": {
            "$ref": "#/components/schemas/SpendLimit-2"
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "TCT_ATM_WITHDRAWAL",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING"
            ]
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the merchant location.",
            "example": "840"
          },
          "alertThreshold": {
            "type": "number",
            "description": "Maximum value of an approved purchase for this control type before triggering an alert when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if an alert should be sent.",
            "format": "double",
            "example": 1000
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "filterByCountry": {
            "$ref": "#/components/schemas/FilterByCountry-2"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "declineThreshold": {
            "type": "number",
            "description": "Maximum value of a purchase for this control type before triggering a decline when purchase meets/exceeds limit. During authorization processing, the cardholderBillAmount is used to identify if a decline should be triggered.",
            "format": "double",
            "example": 1000
          },
          "isControlEnabled": {
            "type": "boolean",
            "description": "Indicates if this control type will be applied during transaction processing."
          },
          "shouldDeclineAll": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline for all transactions related to this control type. Default value will be false. If false, other control settings (e.g. declineThreshold) will be checked."
          },
          "shouldAlertOnDecline": {
            "type": "boolean",
            "description": "Indicates if VTC will trigger a decline notification for all transactions matching the associated control type. If false, no alerts will be sent for declined transactions related to this control type."
          },
          "shouldTargetSpecificCard": {
            "type": "boolean",
            "description": "Indicates if card details are required. Card details will be used to locate a transaction control.",
            "readOnly": true
          },
          "declineAllNonTokenizeTransactions": {
            "type": "boolean",
            "description": "When set to \"true,\" transactions performed with primaryAccountNumber will be declined. Only token-based transactions will continue to process as normal. Used when the physical card is lost or misplaced but the cardholder wants to continue transacting via their mobile phone."
          }
        },
        "description": "List of transaction controls configured for the card."
      },
      "SponsorMccGroupRequestResponse": {
        "type": "object",
        "properties": {
          "customMerchantControlQualifiers": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomMerchantControlQualifier"
            }
          }
        }
      },
      "VdpErrorResponse": {
        "required": [
          "responseCode",
          "responseMessage"
        ],
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "description": "Response code"
          },
          "responseMessage": {
            "type": "string",
            "description": "Response message"
          }
        }
      },
      "CardHolderBillingAmount": {
        "title": "CardHolderBillingAmount",
        "type": "object",
        "properties": {
          "maxAmount": {
            "type": "number",
            "description": "Maximum range for the account.",
            "format": "double"
          },
          "minAmount": {
            "type": "number",
            "description": "Minimum range for the account.",
            "format": "double"
          }
        }
      },
      "UserInformation-2": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9 ._-]*$",
            "type": "string",
            "description": "Name of the user who configured the control. Required if userInformation is present.",
            "example": "Alex Miller"
          },
          "bankingIdentifier": {
            "type": "string",
            "description": "Identifier for the issuer to map the username.",
            "example": "BI"
          },
          "applicationDefinedAttributes": {
            "type": "array",
            "description": "Application attributes defined by the issuer.",
            "example": "APP",
            "items": {
              "type": "string",
              "description": "Application attributes defined by the issuer.",
              "example": "APP"
            }
          }
        },
        "description": "Optional object to provide the ability to carry additional information about the user that defined the control"
      },
      "UserInformation-1": {
        "title": "UserInformation",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9 ._-]*$",
            "type": "string",
            "description": "Name of the user who configured the control. Required if userInformation is present.",
            "example": "Alex Miller"
          },
          "bankingIdentifier": {
            "type": "string",
            "description": "Identifier for the issuer to map the username.",
            "example": "BI"
          },
          "applicationDefinedAttributes": {
            "type": "array",
            "description": "Application attributes defined by the issuer.",
            "example": "APP",
            "items": {
              "type": "string",
              "description": "Application attributes defined by the issuer.",
              "example": "APP"
            }
          }
        }
      },
      "SponsorConfigRuleCategoryCardEnquiryRuleCategoryResponse-1": {
        "required": [
          "availableControlTypes",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "availableControlTypes": {
            "type": "array",
            "description": "Control types available for this card.",
            "items": {
              "$ref": "#/components/schemas/CardEnquiryRuleCategoryResponse-1"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "WalletServicesAccountInquiryRequest": {
        "type": "object",
        "properties": {
          "documentIDs": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of available transaction control documentIDs where configured rules are required.",
            "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]",
            "items": {
              "maxLength": 25,
              "type": "string",
              "description": "List of available transaction control documentIDs where configured rules are required.",
              "example": "[ctc-vd-857a8766-160b-498d-820f-bf4339949c1b]"
            }
          },
          "paymentTokens": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of payment tokens with associated contact details.",
            "example": [
              "4000123456789010",
              "4000123456789011"
            ],
            "items": {
              "maxLength": 19,
              "minLength": 13,
              "type": "string",
              "description": "List of payment tokens with associated contact details.",
              "example": "[\"4000123456789010\",\"4000123456789011\"]"
            }
          },
          "primaryAccountNumbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of available primary account numbers where configured rules are required.",
            "example": [
              "4000123456789010",
              "4000123456789011"
            ],
            "items": {
              "maxLength": 25,
              "type": "string",
              "description": "List of available primary account numbers where configured rules are required.",
              "example": "[\"4000123456789010\",\"4000123456789011\"]"
            }
          }
        }
      },
      "CollectionResourceSponsorConfigMerchantTypeCardEnquiryMerchantControlResponse": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigMerchantTypeCardEnquiryMerchantControlResponse"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "SponsorConfigMerchantTypeCardEnquiryMerchantControlResponse": {
        "required": [
          "availableMerchantTypeRules",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the rule category or control type (eligible or not eligible).",
            "example": "ELIGIBLE",
            "enum": [
              "ELIGIBLE",
              "NOT_ELIGIBLE"
            ]
          },
          "availableMerchantTypeRules": {
            "type": "array",
            "description": "List of merchant control types available for this card.",
            "items": {
              "$ref": "#/components/schemas/CardEnquiryMerchantControlResponse"
            }
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "DecisionRequest": {
        "title": "DecisionRequest",
        "required": [
          "cardholderBillAmount",
          "dateTimeLocal",
          "decisionType",
          "merchantInfo",
          "messageType",
          "primaryAccountNumber",
          "processingCode",
          "retrievalReferenceNumber"
        ],
        "type": "object",
        "properties": {
          "messageType": {
            "maxLength": 4,
            "minLength": 4,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO message type",
            "enum": [
              "0100",
              "0120",
              "0200",
              "0220",
              "0400",
              "0420"
            ]
          },
          "decisionType": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The decision request type.",
            "enum": [
              "RECOMMENDED",
              "COMPLETE",
              "ADVICE",
              "INFORM",
              "PREAUTH"
            ]
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-1"
          },
          "dateTimeLocal": {
            "type": "string",
            "description": "The date and time the transaction originated in the format: mmddhhmmss"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "processingCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "ISO processing code must be numeric, must be 6 positions"
          },
          "pointOfServiceInfo": {
            "$ref": "#/components/schemas/PointOfServiceInfo"
          },
          "cardholderBillAmount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 19,
            "minLength": 13,
            "pattern": "([0-9]+)",
            "type": "string",
            "description": "The card number for which the decision is to be made, must be between 13 and 19 numeric digits",
            "example": "4000123456789010"
          },
          "retrievalReferenceNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          },
          "decisionRequestTimeStampInMs": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-25 18:45:55"
          }
        }
      },
      "TransactionControlRequestType": {
        "type": "object",
        "properties": {
          "globalControls": {
            "type": "array",
            "description": "Used to set rules that apply to all transactions performed with this account.",
            "items": {
              "$ref": "#/components/schemas/OverrideableControl"
            }
          },
          "merchantControls": {
            "type": "array",
            "description": "List of merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl"
            }
          },
          "transactionControls": {
            "type": "array",
            "description": "List of transaction controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/TypeOverrideableControl"
            }
          },
          "customMerchantControls": {
            "type": "array",
            "description": "List of custom merchant controls configured for the card.",
            "items": {
              "$ref": "#/components/schemas/MerchantOverrideableControl"
            }
          }
        }
      },
      "CollectionResourceSponsorConfigMerchantTypeCardEnquiryMerchantControlResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigMerchantTypeCardEnquiryMerchantControlResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertNotificationDeliveryCallbackPayload-13": {
        "required": [
          "transactionDetails",
          "transactionOutcome"
        ],
        "type": "object",
        "properties": {
          "transactionTypes": {
            "type": "array",
            "description": "Enum for the type of transaction.",
            "example": "TCT_ATM_WITHDRAW",
            "items": {
              "type": "string",
              "description": "Enum for the type of transaction.",
              "example": "TCT_ATM_WITHDRAW",
              "enum": [
                "TCT_ATM_WITHDRAW",
                "TCT_AUTO_PAY",
                "TCT_BRICK_AND_MORTAR",
                "TCT_CROSS_BORDER",
                "TCT_E_COMMERCE",
                "TCT_CONTACTLESS",
                "TCT_PURCHASE_RETURN",
                "TCT_OCT"
              ]
            },
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT"
            ]
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/AlertTransactionDetails-2"
          },
          "transactionOutcome": {
            "$ref": "#/components/schemas/AlertTransactionOutcome-1"
          }
        },
        "description": "Outbound alerts notification payload."
      },
      "AccountUpdateResponse-1": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Account update status.",
            "example": "SUCCESS",
            "enum": [
              "SUCCESS"
            ]
          }
        },
        "description": "The response resource container. Contains information provided in the request body."
      },
      "CollectionResourceOfDecisionUpdateModel": {
        "title": "CollectionResourceOfDecisionUpdateModel",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionUpdateModel"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertTransactionDetailsV2-13": {
        "required": [
          "billerCurrencyCode",
          "cardholderBillAmount",
          "nameOnCard",
          "requestReceivedTimeStamp"
        ],
        "type": "object",
        "properties": {
          "nameOnCard": {
            "type": "string",
            "description": "Cardholder name as encoded on the payment instrument.",
            "example": "Alex Miller"
          },
          "merchantInfo": {
            "$ref": "#/components/schemas/MerchantInfo-3"
          },
          "paymentToken": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked payment token. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "transactionID": {
            "type": "string",
            "description": "Unique transaction ID assigned by processing gateway. If non-Visa processed transaction, transactionID is assigned by the issuer system.",
            "example": "2101000000"
          },
          "userIdentifier": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Uniquely identifies the cardholder to receive the alert. Should be a GUID, must be unique per enrolling application. Must not contain any PII data. Mandatory for all VTC notifications. Maximum of 50 characters.",
            "example": "b2d1b9cc-fc3f-4a37-b431-ebf04f20a3e9"
          },
          "userInformation": {
            "$ref": "#/components/schemas/UserInformation-2"
          },
          "billerCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "ISO 8583 three-digit currency classification code identifying the national currency used at the biller's location.",
            "example": "840"
          },
          "exchangeRateDetails": {
            "$ref": "#/components/schemas/ExchangeRateDetails-1"
          },
          "cardholderBillAmount": {
            "type": "number",
            "description": "Total amount to be billed to the cardholder inclusive of any fees assessed. Amount must be in the card issuers currency.",
            "example": 100
          },
          "primaryAccountNumber": {
            "maxLength": 23,
            "minLength": 16,
            "type": "string",
            "description": "Masked primary account number. Only the last 4 digits provided.",
            "example": "xxxx-xxxx-xxxx-9010"
          },
          "requestReceivedTimeStamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "'2023-05-25 18:45:55"
          },
          "retrievalReferenceNumber": {
            "maxLength": 72,
            "minLength": 1,
            "type": "string",
            "description": "Retrieval reference number assigned by the card acceptor.",
            "example": "1101000000"
          }
        },
        "description": "Details of the transaction."
      },
      "CollectionResourceBulkEnrollmentResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/BulkEnrollmentResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "EcbExchangeRateInfo": {
        "type": "object",
        "properties": {
          "exchangeRate": {
            "type": "number",
            "description": "ECB rate from the ECB table.",
            "format": "double",
            "example": 123.456
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "Timestamp of when the resource was last updated in UTC. Effective from the ECB table (batch date).",
            "example": "2023-05-25T18:45:55.000Z"
          }
        },
        "description": "ECB exchange rates and effective dates."
      },
      "CollectionResourceVoid-2": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "type": "object",
            "properties": {},
            "description": "The response resource container. Contains information provided in the request body."
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21T04:56:12.551Z"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceVoid-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "type": "object",
            "description": "The response resource container. Contains information provided in the request body."
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceSponsorConfigTransactionTypeCardEnquiryTransactionControlResponse-1": {
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/SponsorConfigTransactionTypeCardEnquiryTransactionControlResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-05-21 03:40:32.847"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "WhiteListRuleConfigPUT": {
        "type": "object",
        "properties": {
          "cardPrefixes": {
            "type": "array",
            "description": "List of card prefixes enabled for the Whitelisted App ID.",
            "items": {
              "$ref": "#/components/schemas/CardPrefixAppWhiteList"
            }
          },
          "rulesConfiguration": {
            "type": "array",
            "description": "Allowed rule categories configured for this Sponsor ID.",
            "items": {
              "$ref": "#/components/schemas/RulesConfiguration"
            }
          },
          "isSpendLimitAllowed": {
            "type": "boolean",
            "description": "isSpendLimitAllowed is dependent on the sponsor whether it allows setting up spend limit control or not"
          },
          "isMultiCurrencyAllowed": {
            "type": "boolean",
            "description": "isMultiCurrencyAllowed flag determines if an sponsor allows multi currency controls."
          },
          "isFilterByCountryAllowed": {
            "type": "boolean",
            "description": "isFilterByCountryAllowed is dependent on the sponsor whether it allows setting up country enable or disabled list"
          }
        }
      },
      "CollectionResourceOfRate-1": {
        "title": "CollectionResourceOfRate",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionResponseType"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "AlertNotifyDetail-1": {
        "required": [
          "outBoundAlertsNotificationPayload",
          "outboundCallDetails"
        ],
        "type": "object",
        "properties": {
          "outboundCallDetails": {
            "$ref": "#/components/schemas/AlertOutboundCallDetails-1"
          },
          "notificationDetailId": {
            "type": "string",
            "description": "Unique identifier used to locate a list of notification identifiers.",
            "example": "ctc-vd-45366159-40c2-43fc-914e-7cf7177badfd"
          },
          "outBoundAlertsNotificationPayload": {
            "$ref": "#/components/schemas/AlertNotificationDeliveryCallbackPayload-1"
          }
        },
        "description": "List of notification details found for this request."
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP error code. 3xx = Redirection, 4xx = Client Error, 5xx = Server Error.",
            "example": "400"
          },
          "reason": {
            "type": "string",
            "description": "Indicates reason for failure or error.",
            "example": "VTA Error"
          }
        },
        "description": "List of error details that occurred during request processing. Includes error codes and messages."
      },
      "BulkDecoupleTokenResponse": {
        "required": [
          "response",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the call: Success, Partial_Success or Failure.",
            "example": "Success",
            "enum": [
              "Success",
              "PartialSuccess",
              "Failed"
            ]
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecoupleTokenResponseObject"
            }
          }
        },
        "description": "The response resource container. Contains status of operation and list of tokens to decouple."
      },
      "TransactionControlReportsDocument": {
        "required": [
          "documentID"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of document.",
            "example": "ENROLLED",
            "enum": [
              "ENROLLED",
              "DEENROLLED",
              "ADD_CONTROLS",
              "UPDATE_CONTROLS",
              "DELETE_CONTROLS",
              "DELETE_CARD_EXCEPTION",
              "CARD_EXCEPTION",
              "DELETE_PAN",
              "UPDATE_PAN",
              "BATCH_ADD_CONTROLS",
              "UPDATE_TOKEN",
              "DELETE_TOKEN",
              "SYSTEM_UPDATE",
              "SYSTEM_CREATE",
              "SYSTEM_MODIFY",
              "SYSTEM_DELETE",
              "ADD_RELATIONSHIP",
              "UPDATE_RELATIONSHIP",
              "DELETE_RELATIONSHIP",
              "ADD_FLEX_RULES",
              "UPDATE_FLEX_RULES",
              "DELETE_FLEX_RULES",
              "DELETE_CARD",
              "UPDATE_CARD",
              "ADD_UPDATE_FLEX_RULES",
              "REPLACE_CARD"
            ]
          },
          "userId": {
            "type": "string",
            "description": "User ID of the person/system invoking the service.",
            "example": "1222"
          },
          "documentID": {
            "type": "string",
            "description": "Uniquely identifies the control document that triggered the notification.",
            "example": "ctc-vd-857a8766-160b-498d-820f-bf4339949c1b"
          },
          "createdOnDate": {
            "type": "string",
            "description": "Timestamp when control was added, in UTC.",
            "example": "2023-03-21 04:56:12.561"
          },
          "requestedAppID": {
            "type": "string",
            "description": "Unique ID assigned by VDP to identify a transaction control management application.",
            "example": "vd-b971963f-12d9-4a28-a8dc-80bf9c31"
          },
          "requestedDocumentID": {
            "type": "string",
            "description": "System generated ID for the control document bound to the PAN or token.",
            "example": "ctc-vd-b971963f-12d9-4a28-a8dc-80bf9c31e9f6"
          },
          "transactionControlDocument": {
            "$ref": "#/components/schemas/TransactionControlDocument"
          }
        },
        "description": "List of transaction control documents."
      },
      "AlertPreferences": {
        "required": [
          "alertType",
          "contacts",
          "controlType"
        ],
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of contacts associated with alert preference.",
            "items": {
              "$ref": "#/components/schemas/ContactPreferenceDetails"
            }
          },
          "alertType": {
            "type": "string",
            "description": "Transaction events supported with generated alerts. ALL is the only control type value supported with DECLINE_BY_ISSUER.",
            "example": "DECLINE_ALL",
            "enum": [
              "DECLINE_ALL",
              "DECLINE_BREACHED_AMT",
              "ALERT_BREACHED_AMT",
              "DECLINE_BY_SPEND_LIMIT",
              "ALERT_BREACHED_SPEND",
              "DECLINE_BY_ISSUER"
            ]
          },
          "controlType": {
            "type": "string",
            "description": "Indicates specific control type. Valid transactionControls values begin with: \"TCT_\", valid merchantControls values begin with: \"MCT_\". When alertType is DECLINE_BY_ISSUER, the only valid controlType value is ALL.",
            "example": "TCT_ATM_WITHDRAW",
            "enum": [
              "TCT_ATM_WITHDRAW",
              "TCT_AUTO_PAY",
              "TCT_BRICK_AND_MORTAR",
              "TCT_CROSS_BORDER",
              "TCT_E_COMMERCE",
              "TCT_CONTACTLESS",
              "TCT_PURCHASE_RETURN",
              "TCT_OCT",
              "MCT_ADULT_ENTERTAINMENT",
              "MCT_AIRFARE",
              "MCT_ALCOHOL",
              "MCT_APPAREL_AND_ACCESSORIES",
              "MCT_AUTOMOTIVE",
              "MCT_CAR_RENTAL",
              "MCT_ELECTRONICS",
              "MCT_SPORT_AND_RECREATION",
              "MCT_GAMBLING",
              "MCT_GAS_AND_PETROLEUM",
              "MCT_GROCERY",
              "MCT_HOTEL_AND_LODGING",
              "MCT_HOUSEHOLD",
              "MCT_PERSONAL_CARE",
              "MCT_SMOKE_AND_TOBACCO",
              "MCT_DINING",
              "GLOBAL",
              "ALL"
            ]
          }
        },
        "description": "List of alert preferences for specific alert types."
      },
      "CollectionResourceOfDecisionHistoryResponse-3": {
        "title": "CollectionResourceOfDecisionHistoryResponse",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-4"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionHistoryResponse-2": {
        "title": "CollectionResourceOfDecisionHistoryResponse",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-2"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "CollectionResourceOfDecisionHistoryResponse-1": {
        "title": "CollectionResourceOfDecisionHistoryResponse",
        "required": [
          "processingTimeinMs",
          "receivedTimestamp",
          "resource"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DecisionHistoryResponse-1"
          },
          "receivedTimestamp": {
            "type": "string",
            "description": "Time, in UTC, the request is received.",
            "example": "2023-03-21 04:56:12.551"
          },
          "processingTimeinMs": {
            "type": "integer",
            "description": "Processing time in milliseconds.",
            "format": "int64",
            "example": 15
          }
        }
      },
      "TransactionLimit-2": {
        "required": [
          "maxTransactionCount"
        ],
        "type": "object",
        "properties": {
          "maxTransactionCount": {
            "type": "integer",
            "description": "Number of transactions permitted. After the transaction count is reached, then subsequent transactions are declined. Counts apply to specific processing codes, on Visa processed transactions, and is limited to the Global control type.",
            "format": "int32",
            "example": 10
          },
          "currentTransactionCount": {
            "type": "integer",
            "description": "Total number of transactions approved since the start of this limit. Counts will apply where processing code is present, on Visa processed transactions. currentTransactionCount is limited for use only with the Global control type.",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Number of transactions to be allowed/approved, after which subsequent transactions will be declined."
      },
      "TransactionLimit-1": {
        "title": "TransactionLimit",
        "required": [
          "maxTransactionCount"
        ],
        "type": "object",
        "properties": {
          "maxTransactionCount": {
            "type": "integer",
            "description": "Number of transactions permitted. After the transaction count is reached, then subsequent transactions are declined. Counts apply to specific processing codes, on Visa processed transactions, and is limited to the Global control type.",
            "format": "int32",
            "example": 10
          },
          "currentTransactionCount": {
            "type": "integer",
            "description": "Total number of transactions approved since the start of this limit. Counts will apply where processing code is present, on Visa processed transactions. currentTransactionCount is limited for use only with the Global control type.",
            "format": "int32",
            "example": 10
          }
        }
      },
      "AlertPreferencesRequestV2-1": {
        "required": [
          "alertPreferences"
        ],
        "type": "object",
        "properties": {
          "portfolioID": {
            "maxLength": 3,
            "minLength": 3,
            "pattern": "(^[a-zA-Z0-9]*$)",
            "type": "string",
            "description": "Visa-issued identifier for the issuer card prefix. Used when an alert requires different messaging for different segments of a card portfolio. If not configured will default to 001.",
            "example": "003"
          },
          "alertPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertPreferences-1"
            }
          }
        }
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "callbacks": {}
  },
  "x-tagGroups": [
    {
      "name": "API Reference",
      "tags": [
        "Alert History and Customer Profiles API",
        "Authorization Decision API",
        "Customer Rules API",
        "Enrollment Callback API",
        "Notification Delivery Callback API",
        "Program Administration API"
      ]
    }
  ]
}